
KinematicFW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003598  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08003760  08003760  00013760  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080037e4  080037e4  000137e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080037ec  080037ec  000137ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080037f0  080037f0  000137f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000028  20000000  080037f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000724  20000028  0800381c  00020028  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  2000074c  0800381c  0002074c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 10 .debug_info   00022320  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004071  00000000  00000000  00042378  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000a78b  00000000  00000000  000463e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000df0  00000000  00000000  00050b78  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000013e0  00000000  00000000  00051968  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00008b8e  00000000  00000000  00052d48  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00004c93  00000000  00000000  0005b8d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00060569  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002a58  00000000  00000000  000605e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000028 	.word	0x20000028
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08003748 	.word	0x08003748

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000002c 	.word	0x2000002c
 8000204:	08003748 	.word	0x08003748

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000346:	f1a4 0401 	sub.w	r4, r4, #1
 800034a:	d1e9      	bne.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f092 0f00 	teq	r2, #0
 80004f2:	bf14      	ite	ne
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e720      	b.n	800034c <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aedc 	beq.w	80002fa <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6c1      	b.n	80002fa <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__aeabi_d2uiz>:
 800099c:	004a      	lsls	r2, r1, #1
 800099e:	d211      	bcs.n	80009c4 <__aeabi_d2uiz+0x28>
 80009a0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009a4:	d211      	bcs.n	80009ca <__aeabi_d2uiz+0x2e>
 80009a6:	d50d      	bpl.n	80009c4 <__aeabi_d2uiz+0x28>
 80009a8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b0:	d40e      	bmi.n	80009d0 <__aeabi_d2uiz+0x34>
 80009b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009be:	fa23 f002 	lsr.w	r0, r3, r2
 80009c2:	4770      	bx	lr
 80009c4:	f04f 0000 	mov.w	r0, #0
 80009c8:	4770      	bx	lr
 80009ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ce:	d102      	bne.n	80009d6 <__aeabi_d2uiz+0x3a>
 80009d0:	f04f 30ff 	mov.w	r0, #4294967295
 80009d4:	4770      	bx	lr
 80009d6:	f04f 0000 	mov.w	r0, #0
 80009da:	4770      	bx	lr

080009dc <__aeabi_uldivmod>:
 80009dc:	b953      	cbnz	r3, 80009f4 <__aeabi_uldivmod+0x18>
 80009de:	b94a      	cbnz	r2, 80009f4 <__aeabi_uldivmod+0x18>
 80009e0:	2900      	cmp	r1, #0
 80009e2:	bf08      	it	eq
 80009e4:	2800      	cmpeq	r0, #0
 80009e6:	bf1c      	itt	ne
 80009e8:	f04f 31ff 	movne.w	r1, #4294967295
 80009ec:	f04f 30ff 	movne.w	r0, #4294967295
 80009f0:	f000 b97a 	b.w	8000ce8 <__aeabi_idiv0>
 80009f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009fc:	f000 f806 	bl	8000a0c <__udivmoddi4>
 8000a00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a08:	b004      	add	sp, #16
 8000a0a:	4770      	bx	lr

08000a0c <__udivmoddi4>:
 8000a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a10:	468c      	mov	ip, r1
 8000a12:	460d      	mov	r5, r1
 8000a14:	4604      	mov	r4, r0
 8000a16:	9e08      	ldr	r6, [sp, #32]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d151      	bne.n	8000ac0 <__udivmoddi4+0xb4>
 8000a1c:	428a      	cmp	r2, r1
 8000a1e:	4617      	mov	r7, r2
 8000a20:	d96d      	bls.n	8000afe <__udivmoddi4+0xf2>
 8000a22:	fab2 fe82 	clz	lr, r2
 8000a26:	f1be 0f00 	cmp.w	lr, #0
 8000a2a:	d00b      	beq.n	8000a44 <__udivmoddi4+0x38>
 8000a2c:	f1ce 0c20 	rsb	ip, lr, #32
 8000a30:	fa01 f50e 	lsl.w	r5, r1, lr
 8000a34:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000a38:	fa02 f70e 	lsl.w	r7, r2, lr
 8000a3c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000a40:	fa00 f40e 	lsl.w	r4, r0, lr
 8000a44:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000a48:	0c25      	lsrs	r5, r4, #16
 8000a4a:	fbbc f8fa 	udiv	r8, ip, sl
 8000a4e:	fa1f f987 	uxth.w	r9, r7
 8000a52:	fb0a cc18 	mls	ip, sl, r8, ip
 8000a56:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000a5a:	fb08 f309 	mul.w	r3, r8, r9
 8000a5e:	42ab      	cmp	r3, r5
 8000a60:	d90a      	bls.n	8000a78 <__udivmoddi4+0x6c>
 8000a62:	19ed      	adds	r5, r5, r7
 8000a64:	f108 32ff 	add.w	r2, r8, #4294967295
 8000a68:	f080 8123 	bcs.w	8000cb2 <__udivmoddi4+0x2a6>
 8000a6c:	42ab      	cmp	r3, r5
 8000a6e:	f240 8120 	bls.w	8000cb2 <__udivmoddi4+0x2a6>
 8000a72:	f1a8 0802 	sub.w	r8, r8, #2
 8000a76:	443d      	add	r5, r7
 8000a78:	1aed      	subs	r5, r5, r3
 8000a7a:	b2a4      	uxth	r4, r4
 8000a7c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000a80:	fb0a 5510 	mls	r5, sl, r0, r5
 8000a84:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a88:	fb00 f909 	mul.w	r9, r0, r9
 8000a8c:	45a1      	cmp	r9, r4
 8000a8e:	d909      	bls.n	8000aa4 <__udivmoddi4+0x98>
 8000a90:	19e4      	adds	r4, r4, r7
 8000a92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a96:	f080 810a 	bcs.w	8000cae <__udivmoddi4+0x2a2>
 8000a9a:	45a1      	cmp	r9, r4
 8000a9c:	f240 8107 	bls.w	8000cae <__udivmoddi4+0x2a2>
 8000aa0:	3802      	subs	r0, #2
 8000aa2:	443c      	add	r4, r7
 8000aa4:	eba4 0409 	sub.w	r4, r4, r9
 8000aa8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000aac:	2100      	movs	r1, #0
 8000aae:	2e00      	cmp	r6, #0
 8000ab0:	d061      	beq.n	8000b76 <__udivmoddi4+0x16a>
 8000ab2:	fa24 f40e 	lsr.w	r4, r4, lr
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	6034      	str	r4, [r6, #0]
 8000aba:	6073      	str	r3, [r6, #4]
 8000abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ac0:	428b      	cmp	r3, r1
 8000ac2:	d907      	bls.n	8000ad4 <__udivmoddi4+0xc8>
 8000ac4:	2e00      	cmp	r6, #0
 8000ac6:	d054      	beq.n	8000b72 <__udivmoddi4+0x166>
 8000ac8:	2100      	movs	r1, #0
 8000aca:	e886 0021 	stmia.w	r6, {r0, r5}
 8000ace:	4608      	mov	r0, r1
 8000ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ad4:	fab3 f183 	clz	r1, r3
 8000ad8:	2900      	cmp	r1, #0
 8000ada:	f040 808e 	bne.w	8000bfa <__udivmoddi4+0x1ee>
 8000ade:	42ab      	cmp	r3, r5
 8000ae0:	d302      	bcc.n	8000ae8 <__udivmoddi4+0xdc>
 8000ae2:	4282      	cmp	r2, r0
 8000ae4:	f200 80fa 	bhi.w	8000cdc <__udivmoddi4+0x2d0>
 8000ae8:	1a84      	subs	r4, r0, r2
 8000aea:	eb65 0503 	sbc.w	r5, r5, r3
 8000aee:	2001      	movs	r0, #1
 8000af0:	46ac      	mov	ip, r5
 8000af2:	2e00      	cmp	r6, #0
 8000af4:	d03f      	beq.n	8000b76 <__udivmoddi4+0x16a>
 8000af6:	e886 1010 	stmia.w	r6, {r4, ip}
 8000afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000afe:	b912      	cbnz	r2, 8000b06 <__udivmoddi4+0xfa>
 8000b00:	2701      	movs	r7, #1
 8000b02:	fbb7 f7f2 	udiv	r7, r7, r2
 8000b06:	fab7 fe87 	clz	lr, r7
 8000b0a:	f1be 0f00 	cmp.w	lr, #0
 8000b0e:	d134      	bne.n	8000b7a <__udivmoddi4+0x16e>
 8000b10:	1beb      	subs	r3, r5, r7
 8000b12:	0c3a      	lsrs	r2, r7, #16
 8000b14:	fa1f fc87 	uxth.w	ip, r7
 8000b18:	2101      	movs	r1, #1
 8000b1a:	fbb3 f8f2 	udiv	r8, r3, r2
 8000b1e:	0c25      	lsrs	r5, r4, #16
 8000b20:	fb02 3318 	mls	r3, r2, r8, r3
 8000b24:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000b28:	fb0c f308 	mul.w	r3, ip, r8
 8000b2c:	42ab      	cmp	r3, r5
 8000b2e:	d907      	bls.n	8000b40 <__udivmoddi4+0x134>
 8000b30:	19ed      	adds	r5, r5, r7
 8000b32:	f108 30ff 	add.w	r0, r8, #4294967295
 8000b36:	d202      	bcs.n	8000b3e <__udivmoddi4+0x132>
 8000b38:	42ab      	cmp	r3, r5
 8000b3a:	f200 80d1 	bhi.w	8000ce0 <__udivmoddi4+0x2d4>
 8000b3e:	4680      	mov	r8, r0
 8000b40:	1aed      	subs	r5, r5, r3
 8000b42:	b2a3      	uxth	r3, r4
 8000b44:	fbb5 f0f2 	udiv	r0, r5, r2
 8000b48:	fb02 5510 	mls	r5, r2, r0, r5
 8000b4c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000b50:	fb0c fc00 	mul.w	ip, ip, r0
 8000b54:	45a4      	cmp	ip, r4
 8000b56:	d907      	bls.n	8000b68 <__udivmoddi4+0x15c>
 8000b58:	19e4      	adds	r4, r4, r7
 8000b5a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b5e:	d202      	bcs.n	8000b66 <__udivmoddi4+0x15a>
 8000b60:	45a4      	cmp	ip, r4
 8000b62:	f200 80b8 	bhi.w	8000cd6 <__udivmoddi4+0x2ca>
 8000b66:	4618      	mov	r0, r3
 8000b68:	eba4 040c 	sub.w	r4, r4, ip
 8000b6c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b70:	e79d      	b.n	8000aae <__udivmoddi4+0xa2>
 8000b72:	4631      	mov	r1, r6
 8000b74:	4630      	mov	r0, r6
 8000b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7a:	f1ce 0420 	rsb	r4, lr, #32
 8000b7e:	fa05 f30e 	lsl.w	r3, r5, lr
 8000b82:	fa07 f70e 	lsl.w	r7, r7, lr
 8000b86:	fa20 f804 	lsr.w	r8, r0, r4
 8000b8a:	0c3a      	lsrs	r2, r7, #16
 8000b8c:	fa25 f404 	lsr.w	r4, r5, r4
 8000b90:	ea48 0803 	orr.w	r8, r8, r3
 8000b94:	fbb4 f1f2 	udiv	r1, r4, r2
 8000b98:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000b9c:	fb02 4411 	mls	r4, r2, r1, r4
 8000ba0:	fa1f fc87 	uxth.w	ip, r7
 8000ba4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000ba8:	fb01 f30c 	mul.w	r3, r1, ip
 8000bac:	42ab      	cmp	r3, r5
 8000bae:	fa00 f40e 	lsl.w	r4, r0, lr
 8000bb2:	d909      	bls.n	8000bc8 <__udivmoddi4+0x1bc>
 8000bb4:	19ed      	adds	r5, r5, r7
 8000bb6:	f101 30ff 	add.w	r0, r1, #4294967295
 8000bba:	f080 808a 	bcs.w	8000cd2 <__udivmoddi4+0x2c6>
 8000bbe:	42ab      	cmp	r3, r5
 8000bc0:	f240 8087 	bls.w	8000cd2 <__udivmoddi4+0x2c6>
 8000bc4:	3902      	subs	r1, #2
 8000bc6:	443d      	add	r5, r7
 8000bc8:	1aeb      	subs	r3, r5, r3
 8000bca:	fa1f f588 	uxth.w	r5, r8
 8000bce:	fbb3 f0f2 	udiv	r0, r3, r2
 8000bd2:	fb02 3310 	mls	r3, r2, r0, r3
 8000bd6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000bda:	fb00 f30c 	mul.w	r3, r0, ip
 8000bde:	42ab      	cmp	r3, r5
 8000be0:	d907      	bls.n	8000bf2 <__udivmoddi4+0x1e6>
 8000be2:	19ed      	adds	r5, r5, r7
 8000be4:	f100 38ff 	add.w	r8, r0, #4294967295
 8000be8:	d26f      	bcs.n	8000cca <__udivmoddi4+0x2be>
 8000bea:	42ab      	cmp	r3, r5
 8000bec:	d96d      	bls.n	8000cca <__udivmoddi4+0x2be>
 8000bee:	3802      	subs	r0, #2
 8000bf0:	443d      	add	r5, r7
 8000bf2:	1aeb      	subs	r3, r5, r3
 8000bf4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bf8:	e78f      	b.n	8000b1a <__udivmoddi4+0x10e>
 8000bfa:	f1c1 0720 	rsb	r7, r1, #32
 8000bfe:	fa22 f807 	lsr.w	r8, r2, r7
 8000c02:	408b      	lsls	r3, r1
 8000c04:	fa05 f401 	lsl.w	r4, r5, r1
 8000c08:	ea48 0303 	orr.w	r3, r8, r3
 8000c0c:	fa20 fe07 	lsr.w	lr, r0, r7
 8000c10:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000c14:	40fd      	lsrs	r5, r7
 8000c16:	ea4e 0e04 	orr.w	lr, lr, r4
 8000c1a:	fbb5 f9fc 	udiv	r9, r5, ip
 8000c1e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000c22:	fb0c 5519 	mls	r5, ip, r9, r5
 8000c26:	fa1f f883 	uxth.w	r8, r3
 8000c2a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000c2e:	fb09 f408 	mul.w	r4, r9, r8
 8000c32:	42ac      	cmp	r4, r5
 8000c34:	fa02 f201 	lsl.w	r2, r2, r1
 8000c38:	fa00 fa01 	lsl.w	sl, r0, r1
 8000c3c:	d908      	bls.n	8000c50 <__udivmoddi4+0x244>
 8000c3e:	18ed      	adds	r5, r5, r3
 8000c40:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c44:	d243      	bcs.n	8000cce <__udivmoddi4+0x2c2>
 8000c46:	42ac      	cmp	r4, r5
 8000c48:	d941      	bls.n	8000cce <__udivmoddi4+0x2c2>
 8000c4a:	f1a9 0902 	sub.w	r9, r9, #2
 8000c4e:	441d      	add	r5, r3
 8000c50:	1b2d      	subs	r5, r5, r4
 8000c52:	fa1f fe8e 	uxth.w	lr, lr
 8000c56:	fbb5 f0fc 	udiv	r0, r5, ip
 8000c5a:	fb0c 5510 	mls	r5, ip, r0, r5
 8000c5e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000c62:	fb00 f808 	mul.w	r8, r0, r8
 8000c66:	45a0      	cmp	r8, r4
 8000c68:	d907      	bls.n	8000c7a <__udivmoddi4+0x26e>
 8000c6a:	18e4      	adds	r4, r4, r3
 8000c6c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000c70:	d229      	bcs.n	8000cc6 <__udivmoddi4+0x2ba>
 8000c72:	45a0      	cmp	r8, r4
 8000c74:	d927      	bls.n	8000cc6 <__udivmoddi4+0x2ba>
 8000c76:	3802      	subs	r0, #2
 8000c78:	441c      	add	r4, r3
 8000c7a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c7e:	eba4 0408 	sub.w	r4, r4, r8
 8000c82:	fba0 8902 	umull	r8, r9, r0, r2
 8000c86:	454c      	cmp	r4, r9
 8000c88:	46c6      	mov	lr, r8
 8000c8a:	464d      	mov	r5, r9
 8000c8c:	d315      	bcc.n	8000cba <__udivmoddi4+0x2ae>
 8000c8e:	d012      	beq.n	8000cb6 <__udivmoddi4+0x2aa>
 8000c90:	b156      	cbz	r6, 8000ca8 <__udivmoddi4+0x29c>
 8000c92:	ebba 030e 	subs.w	r3, sl, lr
 8000c96:	eb64 0405 	sbc.w	r4, r4, r5
 8000c9a:	fa04 f707 	lsl.w	r7, r4, r7
 8000c9e:	40cb      	lsrs	r3, r1
 8000ca0:	431f      	orrs	r7, r3
 8000ca2:	40cc      	lsrs	r4, r1
 8000ca4:	6037      	str	r7, [r6, #0]
 8000ca6:	6074      	str	r4, [r6, #4]
 8000ca8:	2100      	movs	r1, #0
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	e6f8      	b.n	8000aa4 <__udivmoddi4+0x98>
 8000cb2:	4690      	mov	r8, r2
 8000cb4:	e6e0      	b.n	8000a78 <__udivmoddi4+0x6c>
 8000cb6:	45c2      	cmp	sl, r8
 8000cb8:	d2ea      	bcs.n	8000c90 <__udivmoddi4+0x284>
 8000cba:	ebb8 0e02 	subs.w	lr, r8, r2
 8000cbe:	eb69 0503 	sbc.w	r5, r9, r3
 8000cc2:	3801      	subs	r0, #1
 8000cc4:	e7e4      	b.n	8000c90 <__udivmoddi4+0x284>
 8000cc6:	4628      	mov	r0, r5
 8000cc8:	e7d7      	b.n	8000c7a <__udivmoddi4+0x26e>
 8000cca:	4640      	mov	r0, r8
 8000ccc:	e791      	b.n	8000bf2 <__udivmoddi4+0x1e6>
 8000cce:	4681      	mov	r9, r0
 8000cd0:	e7be      	b.n	8000c50 <__udivmoddi4+0x244>
 8000cd2:	4601      	mov	r1, r0
 8000cd4:	e778      	b.n	8000bc8 <__udivmoddi4+0x1bc>
 8000cd6:	3802      	subs	r0, #2
 8000cd8:	443c      	add	r4, r7
 8000cda:	e745      	b.n	8000b68 <__udivmoddi4+0x15c>
 8000cdc:	4608      	mov	r0, r1
 8000cde:	e708      	b.n	8000af2 <__udivmoddi4+0xe6>
 8000ce0:	f1a8 0802 	sub.w	r8, r8, #2
 8000ce4:	443d      	add	r5, r7
 8000ce6:	e72b      	b.n	8000b40 <__udivmoddi4+0x134>

08000ce8 <__aeabi_idiv0>:
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop

08000cec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cec:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cee:	4a0e      	ldr	r2, [pc, #56]	; (8000d28 <HAL_InitTick+0x3c>)
 8000cf0:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <HAL_InitTick+0x40>)
{
 8000cf2:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cf4:	7818      	ldrb	r0, [r3, #0]
 8000cf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cfa:	fbb3 f3f0 	udiv	r3, r3, r0
 8000cfe:	6810      	ldr	r0, [r2, #0]
 8000d00:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d04:	f000 f8a2 	bl	8000e4c <HAL_SYSTICK_Config>
 8000d08:	4604      	mov	r4, r0
 8000d0a:	b958      	cbnz	r0, 8000d24 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d0c:	2d0f      	cmp	r5, #15
 8000d0e:	d809      	bhi.n	8000d24 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d10:	4602      	mov	r2, r0
 8000d12:	4629      	mov	r1, r5
 8000d14:	f04f 30ff 	mov.w	r0, #4294967295
 8000d18:	f000 f84a 	bl	8000db0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d1c:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <HAL_InitTick+0x44>)
 8000d1e:	4620      	mov	r0, r4
 8000d20:	601d      	str	r5, [r3, #0]
 8000d22:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000d24:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000d26:	bd38      	pop	{r3, r4, r5, pc}
 8000d28:	20000024 	.word	0x20000024
 8000d2c:	20000000 	.word	0x20000000
 8000d30:	20000004 	.word	0x20000004

08000d34 <HAL_Init>:
{
 8000d34:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d36:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <HAL_Init+0x30>)
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d3e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000d46:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000d4e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d50:	2003      	movs	r0, #3
 8000d52:	f000 f81b 	bl	8000d8c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d56:	2000      	movs	r0, #0
 8000d58:	f7ff ffc8 	bl	8000cec <HAL_InitTick>
  HAL_MspInit();
 8000d5c:	f002 faa4 	bl	80032a8 <HAL_MspInit>
}
 8000d60:	2000      	movs	r0, #0
 8000d62:	bd08      	pop	{r3, pc}
 8000d64:	40023c00 	.word	0x40023c00

08000d68 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000d68:	4a03      	ldr	r2, [pc, #12]	; (8000d78 <HAL_IncTick+0x10>)
 8000d6a:	4b04      	ldr	r3, [pc, #16]	; (8000d7c <HAL_IncTick+0x14>)
 8000d6c:	6811      	ldr	r1, [r2, #0]
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	440b      	add	r3, r1
 8000d72:	6013      	str	r3, [r2, #0]
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	2000048c 	.word	0x2000048c
 8000d7c:	20000000 	.word	0x20000000

08000d80 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000d80:	4b01      	ldr	r3, [pc, #4]	; (8000d88 <HAL_GetTick+0x8>)
 8000d82:	6818      	ldr	r0, [r3, #0]
}
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	2000048c 	.word	0x2000048c

08000d8c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d8c:	4a07      	ldr	r2, [pc, #28]	; (8000dac <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000d8e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d90:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000d94:	041b      	lsls	r3, r3, #16
 8000d96:	0c1b      	lsrs	r3, r3, #16
 8000d98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000d9c:	0200      	lsls	r0, r0, #8
 8000d9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000da6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000da8:	60d3      	str	r3, [r2, #12]
 8000daa:	4770      	bx	lr
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db0:	4b17      	ldr	r3, [pc, #92]	; (8000e10 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000db2:	b530      	push	{r4, r5, lr}
 8000db4:	68dc      	ldr	r4, [r3, #12]
 8000db6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dba:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dbe:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc0:	2b04      	cmp	r3, #4
 8000dc2:	bf28      	it	cs
 8000dc4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dc6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc8:	f04f 0501 	mov.w	r5, #1
 8000dcc:	fa05 f303 	lsl.w	r3, r5, r3
 8000dd0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dd4:	bf8c      	ite	hi
 8000dd6:	3c03      	subhi	r4, #3
 8000dd8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dda:	4019      	ands	r1, r3
 8000ddc:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dde:	fa05 f404 	lsl.w	r4, r5, r4
 8000de2:	3c01      	subs	r4, #1
 8000de4:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000de6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de8:	ea42 0201 	orr.w	r2, r2, r1
 8000dec:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df0:	bfaf      	iteee	ge
 8000df2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df6:	f000 000f 	andlt.w	r0, r0, #15
 8000dfa:	4b06      	ldrlt	r3, [pc, #24]	; (8000e14 <HAL_NVIC_SetPriority+0x64>)
 8000dfc:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfe:	bfa5      	ittet	ge
 8000e00:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000e04:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e06:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e08:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000e0c:	bd30      	pop	{r4, r5, pc}
 8000e0e:	bf00      	nop
 8000e10:	e000ed00 	.word	0xe000ed00
 8000e14:	e000ed14 	.word	0xe000ed14

08000e18 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000e18:	0942      	lsrs	r2, r0, #5
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	f000 001f 	and.w	r0, r0, #31
 8000e20:	fa03 f000 	lsl.w	r0, r3, r0
 8000e24:	4b01      	ldr	r3, [pc, #4]	; (8000e2c <HAL_NVIC_EnableIRQ+0x14>)
 8000e26:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000e2a:	4770      	bx	lr
 8000e2c:	e000e100 	.word	0xe000e100

08000e30 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000e30:	0943      	lsrs	r3, r0, #5
 8000e32:	2201      	movs	r2, #1
 8000e34:	f000 001f 	and.w	r0, r0, #31
 8000e38:	fa02 f000 	lsl.w	r0, r2, r0
 8000e3c:	3320      	adds	r3, #32
 8000e3e:	4a02      	ldr	r2, [pc, #8]	; (8000e48 <HAL_NVIC_DisableIRQ+0x18>)
 8000e40:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	e000e100 	.word	0xe000e100

08000e4c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e4c:	3801      	subs	r0, #1
 8000e4e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000e52:	d20a      	bcs.n	8000e6a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e56:	4a07      	ldr	r2, [pc, #28]	; (8000e74 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e58:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e5a:	21f0      	movs	r1, #240	; 0xf0
 8000e5c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e60:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e62:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e64:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000e6a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	e000e010 	.word	0xe000e010
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000e78:	6803      	ldr	r3, [r0, #0]
 8000e7a:	b2da      	uxtb	r2, r3
 8000e7c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000e80:	f023 0303 	bic.w	r3, r3, #3
 8000e84:	2118      	movs	r1, #24
 8000e86:	3a10      	subs	r2, #16
 8000e88:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000e8c:	4904      	ldr	r1, [pc, #16]	; (8000ea0 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8000e8e:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000e90:	bf88      	it	hi
 8000e92:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000e94:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000e96:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000e98:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 8000e9a:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	08003760 	.word	0x08003760

08000ea4 <HAL_DMA_Init>:
{
 8000ea4:	b570      	push	{r4, r5, r6, lr}
 8000ea6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000ea8:	f7ff ff6a 	bl	8000d80 <HAL_GetTick>
 8000eac:	4605      	mov	r5, r0
  if(hdma == NULL)
 8000eae:	2c00      	cmp	r4, #0
 8000eb0:	d071      	beq.n	8000f96 <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8000eb8:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8000ec0:	6813      	ldr	r3, [r2, #0]
 8000ec2:	f023 0301 	bic.w	r3, r3, #1
 8000ec6:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ec8:	6821      	ldr	r1, [r4, #0]
 8000eca:	680b      	ldr	r3, [r1, #0]
 8000ecc:	07d8      	lsls	r0, r3, #31
 8000ece:	d43c      	bmi.n	8000f4a <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8000ed0:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000ed2:	4d32      	ldr	r5, [pc, #200]	; (8000f9c <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ed4:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ed6:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000ed8:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000eda:	68a3      	ldr	r3, [r4, #8]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	68e2      	ldr	r2, [r4, #12]
 8000ee0:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ee2:	6922      	ldr	r2, [r4, #16]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	6962      	ldr	r2, [r4, #20]
 8000ee8:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eea:	69e2      	ldr	r2, [r4, #28]
 8000eec:	4303      	orrs	r3, r0
 8000eee:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ef0:	6a22      	ldr	r2, [r4, #32]
 8000ef2:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000ef4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000ef6:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ef8:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000efc:	bf01      	itttt	eq
 8000efe:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 8000f00:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 8000f02:	4335      	orreq	r5, r6
 8000f04:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8000f06:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8000f08:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f0a:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000f0c:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8000f10:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f14:	d10b      	bne.n	8000f2e <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8000f16:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000f18:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8000f1a:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000f1c:	b13d      	cbz	r5, 8000f2e <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000f1e:	b9f8      	cbnz	r0, 8000f60 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8000f20:	2a01      	cmp	r2, #1
 8000f22:	d02d      	beq.n	8000f80 <HAL_DMA_Init+0xdc>
 8000f24:	d301      	bcc.n	8000f2a <HAL_DMA_Init+0x86>
 8000f26:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000f28:	d101      	bne.n	8000f2e <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000f2a:	01ea      	lsls	r2, r5, #7
 8000f2c:	d42b      	bmi.n	8000f86 <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8000f2e:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000f30:	4620      	mov	r0, r4
 8000f32:	f7ff ffa1 	bl	8000e78 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f36:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000f38:	233f      	movs	r3, #63	; 0x3f
 8000f3a:	4093      	lsls	r3, r2
 8000f3c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f3e:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000f40:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f42:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000f44:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000f48:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f4a:	f7ff ff19 	bl	8000d80 <HAL_GetTick>
 8000f4e:	1b40      	subs	r0, r0, r5
 8000f50:	2805      	cmp	r0, #5
 8000f52:	d9b9      	bls.n	8000ec8 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f54:	2320      	movs	r3, #32
 8000f56:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f58:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8000f5a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8000f5e:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000f60:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8000f64:	d113      	bne.n	8000f8e <HAL_DMA_Init+0xea>
    switch (tmp)
 8000f66:	2a03      	cmp	r2, #3
 8000f68:	d8e1      	bhi.n	8000f2e <HAL_DMA_Init+0x8a>
 8000f6a:	a001      	add	r0, pc, #4	; (adr r0, 8000f70 <HAL_DMA_Init+0xcc>)
 8000f6c:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8000f70:	08000f87 	.word	0x08000f87
 8000f74:	08000f2b 	.word	0x08000f2b
 8000f78:	08000f87 	.word	0x08000f87
 8000f7c:	08000f81 	.word	0x08000f81
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000f80:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8000f84:	d1d3      	bne.n	8000f2e <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000f86:	2340      	movs	r3, #64	; 0x40
 8000f88:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000f8a:	2001      	movs	r0, #1
 8000f8c:	e7e5      	b.n	8000f5a <HAL_DMA_Init+0xb6>
    switch (tmp)
 8000f8e:	2a02      	cmp	r2, #2
 8000f90:	d9f9      	bls.n	8000f86 <HAL_DMA_Init+0xe2>
 8000f92:	2a03      	cmp	r2, #3
 8000f94:	e7c8      	b.n	8000f28 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 8000f96:	2001      	movs	r0, #1
 8000f98:	bd70      	pop	{r4, r5, r6, pc}
 8000f9a:	bf00      	nop
 8000f9c:	f010803f 	.word	0xf010803f

08000fa0 <HAL_DMA_Start_IT>:
{
 8000fa0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8000fa2:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8000fa6:	2c01      	cmp	r4, #1
 8000fa8:	d036      	beq.n	8001018 <HAL_DMA_Start_IT+0x78>
 8000faa:	2401      	movs	r4, #1
 8000fac:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8000fb0:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fb4:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 8000fb6:	2c01      	cmp	r4, #1
 8000fb8:	f04f 0500 	mov.w	r5, #0
 8000fbc:	f04f 0402 	mov.w	r4, #2
 8000fc0:	d128      	bne.n	8001014 <HAL_DMA_Start_IT+0x74>
    hdma->State = HAL_DMA_STATE_BUSY;
 8000fc2:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000fc6:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fc8:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000fca:	6825      	ldr	r5, [r4, #0]
 8000fcc:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8000fd0:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8000fd2:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000fd4:	6883      	ldr	r3, [r0, #8]
 8000fd6:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 8000fd8:	bf0e      	itee	eq
 8000fda:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8000fdc:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8000fde:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fe0:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 8000fe2:	bf08      	it	eq
 8000fe4:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fe6:	233f      	movs	r3, #63	; 0x3f
 8000fe8:	4093      	lsls	r3, r2
 8000fea:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000fec:	6823      	ldr	r3, [r4, #0]
 8000fee:	f043 0316 	orr.w	r3, r3, #22
 8000ff2:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000ff4:	6963      	ldr	r3, [r4, #20]
 8000ff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ffa:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8000ffc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000ffe:	b11b      	cbz	r3, 8001008 <HAL_DMA_Start_IT+0x68>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001000:	6823      	ldr	r3, [r4, #0]
 8001002:	f043 0308 	orr.w	r3, r3, #8
 8001006:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001008:	6823      	ldr	r3, [r4, #0]
 800100a:	f043 0301 	orr.w	r3, r3, #1
 800100e:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001010:	2000      	movs	r0, #0
 8001012:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 8001014:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8001018:	2002      	movs	r0, #2
}
 800101a:	bd70      	pop	{r4, r5, r6, pc}

0800101c <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800101c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001020:	2b02      	cmp	r3, #2
 8001022:	d003      	beq.n	800102c <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001024:	2380      	movs	r3, #128	; 0x80
 8001026:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001028:	2001      	movs	r0, #1
 800102a:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 800102c:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 800102e:	2305      	movs	r3, #5
 8001030:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8001034:	6813      	ldr	r3, [r2, #0]
 8001036:	f023 0301 	bic.w	r3, r3, #1
 800103a:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800103c:	2000      	movs	r0, #0
}
 800103e:	4770      	bx	lr

08001040 <HAL_DMA_IRQHandler>:
{
 8001040:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8001042:	2300      	movs	r3, #0
 8001044:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001046:	4b5a      	ldr	r3, [pc, #360]	; (80011b0 <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001048:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 800104a:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800104c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 800104e:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001050:	2208      	movs	r2, #8
 8001052:	409a      	lsls	r2, r3
 8001054:	4216      	tst	r6, r2
{
 8001056:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001058:	d00c      	beq.n	8001074 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800105a:	6801      	ldr	r1, [r0, #0]
 800105c:	6808      	ldr	r0, [r1, #0]
 800105e:	0740      	lsls	r0, r0, #29
 8001060:	d508      	bpl.n	8001074 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001062:	6808      	ldr	r0, [r1, #0]
 8001064:	f020 0004 	bic.w	r0, r0, #4
 8001068:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800106a:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800106c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800106e:	f042 0201 	orr.w	r2, r2, #1
 8001072:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001074:	2201      	movs	r2, #1
 8001076:	409a      	lsls	r2, r3
 8001078:	4216      	tst	r6, r2
 800107a:	d008      	beq.n	800108e <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800107c:	6821      	ldr	r1, [r4, #0]
 800107e:	6949      	ldr	r1, [r1, #20]
 8001080:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001082:	bf41      	itttt	mi
 8001084:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001086:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8001088:	f042 0202 	orrmi.w	r2, r2, #2
 800108c:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800108e:	2204      	movs	r2, #4
 8001090:	409a      	lsls	r2, r3
 8001092:	4216      	tst	r6, r2
 8001094:	d008      	beq.n	80010a8 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001096:	6821      	ldr	r1, [r4, #0]
 8001098:	6809      	ldr	r1, [r1, #0]
 800109a:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800109c:	bf41      	itttt	mi
 800109e:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80010a0:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80010a2:	f042 0204 	orrmi.w	r2, r2, #4
 80010a6:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80010a8:	2210      	movs	r2, #16
 80010aa:	409a      	lsls	r2, r3
 80010ac:	4216      	tst	r6, r2
 80010ae:	d010      	beq.n	80010d2 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80010b0:	6823      	ldr	r3, [r4, #0]
 80010b2:	6819      	ldr	r1, [r3, #0]
 80010b4:	0709      	lsls	r1, r1, #28
 80010b6:	d50c      	bpl.n	80010d2 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80010b8:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	0350      	lsls	r0, r2, #13
 80010be:	d535      	bpl.n	800112c <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	0319      	lsls	r1, r3, #12
 80010c4:	d401      	bmi.n	80010ca <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 80010c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010c8:	e000      	b.n	80010cc <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80010ca:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 80010cc:	b10b      	cbz	r3, 80010d2 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 80010ce:	4620      	mov	r0, r4
 80010d0:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80010d2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80010d4:	2220      	movs	r2, #32
 80010d6:	408a      	lsls	r2, r1
 80010d8:	4216      	tst	r6, r2
 80010da:	d038      	beq.n	800114e <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80010dc:	6823      	ldr	r3, [r4, #0]
 80010de:	6818      	ldr	r0, [r3, #0]
 80010e0:	06c6      	lsls	r6, r0, #27
 80010e2:	d534      	bpl.n	800114e <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80010e4:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80010e6:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80010ea:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80010ec:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80010ee:	d125      	bne.n	800113c <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80010f0:	f022 0216 	bic.w	r2, r2, #22
 80010f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80010f6:	695a      	ldr	r2, [r3, #20]
 80010f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010fc:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010fe:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001100:	b90a      	cbnz	r2, 8001106 <HAL_DMA_IRQHandler+0xc6>
 8001102:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001104:	b11a      	cbz	r2, 800110e <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	f022 0208 	bic.w	r2, r2, #8
 800110c:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800110e:	233f      	movs	r3, #63	; 0x3f
 8001110:	408b      	lsls	r3, r1
 8001112:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8001114:	2300      	movs	r3, #0
 8001116:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 800111a:	2301      	movs	r3, #1
 800111c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8001120:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8001122:	b10b      	cbz	r3, 8001128 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 8001124:	4620      	mov	r0, r4
 8001126:	4798      	blx	r3
}
 8001128:	b003      	add	sp, #12
 800112a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001130:	bf5e      	ittt	pl
 8001132:	681a      	ldrpl	r2, [r3, #0]
 8001134:	f022 0208 	bicpl.w	r2, r2, #8
 8001138:	601a      	strpl	r2, [r3, #0]
 800113a:	e7c4      	b.n	80010c6 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800113c:	0350      	lsls	r0, r2, #13
 800113e:	d528      	bpl.n	8001192 <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	0319      	lsls	r1, r3, #12
 8001144:	d432      	bmi.n	80011ac <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 8001146:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8001148:	b10b      	cbz	r3, 800114e <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 800114a:	4620      	mov	r0, r4
 800114c:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800114e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001150:	2b00      	cmp	r3, #0
 8001152:	d0e9      	beq.n	8001128 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001154:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001156:	07da      	lsls	r2, r3, #31
 8001158:	d519      	bpl.n	800118e <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 800115a:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 800115c:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 800115e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001162:	6813      	ldr	r3, [r2, #0]
 8001164:	f023 0301 	bic.w	r3, r3, #1
 8001168:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800116a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800116e:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8001172:	9b01      	ldr	r3, [sp, #4]
 8001174:	3301      	adds	r3, #1
 8001176:	429f      	cmp	r7, r3
 8001178:	9301      	str	r3, [sp, #4]
 800117a:	d302      	bcc.n	8001182 <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800117c:	6813      	ldr	r3, [r2, #0]
 800117e:	07db      	lsls	r3, r3, #31
 8001180:	d4f7      	bmi.n	8001172 <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 8001182:	2300      	movs	r3, #0
 8001184:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8001188:	2301      	movs	r3, #1
 800118a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 800118e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001190:	e7c7      	b.n	8001122 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8001198:	d108      	bne.n	80011ac <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800119a:	6819      	ldr	r1, [r3, #0]
 800119c:	f021 0110 	bic.w	r1, r1, #16
 80011a0:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80011a2:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 80011a4:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80011a8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 80011ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80011ae:	e7cb      	b.n	8001148 <HAL_DMA_IRQHandler+0x108>
 80011b0:	20000024 	.word	0x20000024

080011b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011b8:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ba:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011bc:	f8df 8168 	ldr.w	r8, [pc, #360]	; 8001328 <HAL_GPIO_Init+0x174>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011c0:	4a57      	ldr	r2, [pc, #348]	; (8001320 <HAL_GPIO_Init+0x16c>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011c2:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 80011c4:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011c8:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ca:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 80011cc:	fa09 fa03 	lsl.w	sl, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011d0:	ea0a 0504 	and.w	r5, sl, r4
    if(iocurrent == ioposition)
 80011d4:	45aa      	cmp	sl, r5
 80011d6:	f040 8097 	bne.w	8001308 <HAL_GPIO_Init+0x154>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011da:	684c      	ldr	r4, [r1, #4]
 80011dc:	f024 0b10 	bic.w	fp, r4, #16
 80011e0:	f1bb 0f02 	cmp.w	fp, #2
 80011e4:	d114      	bne.n	8001210 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->AFR[position >> 3U];
 80011e6:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 80011ea:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011ee:	f003 0c07 	and.w	ip, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80011f2:	f8de 6020 	ldr.w	r6, [lr, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011f6:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80011fa:	270f      	movs	r7, #15
 80011fc:	fa07 f70c 	lsl.w	r7, r7, ip
 8001200:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001204:	690e      	ldr	r6, [r1, #16]
 8001206:	fa06 f60c 	lsl.w	r6, r6, ip
 800120a:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 800120c:	f8ce 6020 	str.w	r6, [lr, #32]
 8001210:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001214:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8001216:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001218:	fa07 f70c 	lsl.w	r7, r7, ip
 800121c:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800121e:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001222:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001224:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001228:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800122c:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001230:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 8001234:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001236:	d811      	bhi.n	800125c <HAL_GPIO_Init+0xa8>
        temp = GPIOx->OSPEEDR; 
 8001238:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800123a:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 800123e:	68ce      	ldr	r6, [r1, #12]
 8001240:	fa06 fe0c 	lsl.w	lr, r6, ip
 8001244:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 8001248:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800124a:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800124c:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001250:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8001254:	409e      	lsls	r6, r3
 8001256:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 800125a:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 800125c:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800125e:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001260:	688e      	ldr	r6, [r1, #8]
 8001262:	fa06 f60c 	lsl.w	r6, r6, ip
 8001266:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001268:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 800126a:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800126c:	d54c      	bpl.n	8001308 <HAL_GPIO_Init+0x154>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126e:	2600      	movs	r6, #0
 8001270:	9603      	str	r6, [sp, #12]
 8001272:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 8001276:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 800127a:	f8c8 6044 	str.w	r6, [r8, #68]	; 0x44
 800127e:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 8001282:	f023 0703 	bic.w	r7, r3, #3
 8001286:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800128a:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 800128e:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8001292:	9603      	str	r6, [sp, #12]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001294:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001298:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 800129a:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800129c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80012a0:	f04f 0e0f 	mov.w	lr, #15
 80012a4:	fa0e fe0c 	lsl.w	lr, lr, ip
 80012a8:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012ac:	4e1d      	ldr	r6, [pc, #116]	; (8001324 <HAL_GPIO_Init+0x170>)
 80012ae:	42b0      	cmp	r0, r6
 80012b0:	d031      	beq.n	8001316 <HAL_GPIO_Init+0x162>
 80012b2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80012b6:	42b0      	cmp	r0, r6
 80012b8:	d02f      	beq.n	800131a <HAL_GPIO_Init+0x166>
 80012ba:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80012be:	42b0      	cmp	r0, r6
 80012c0:	bf14      	ite	ne
 80012c2:	2607      	movne	r6, #7
 80012c4:	2602      	moveq	r6, #2
 80012c6:	fa06 f60c 	lsl.w	r6, r6, ip
 80012ca:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012ce:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 80012d0:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80012d2:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012d4:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80012d8:	bf0c      	ite	eq
 80012da:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80012dc:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 80012de:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 80012e0:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012e2:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80012e6:	bf0c      	ite	eq
 80012e8:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80012ea:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 80012ec:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ee:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012f0:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80012f4:	bf0c      	ite	eq
 80012f6:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80012f8:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 80012fa:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 80012fc:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012fe:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001300:	bf54      	ite	pl
 8001302:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8001304:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8001306:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001308:	3301      	adds	r3, #1
 800130a:	2b10      	cmp	r3, #16
 800130c:	f47f af5d 	bne.w	80011ca <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001310:	b005      	add	sp, #20
 8001312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001316:	2600      	movs	r6, #0
 8001318:	e7d5      	b.n	80012c6 <HAL_GPIO_Init+0x112>
 800131a:	2601      	movs	r6, #1
 800131c:	e7d3      	b.n	80012c6 <HAL_GPIO_Init+0x112>
 800131e:	bf00      	nop
 8001320:	40013c00 	.word	0x40013c00
 8001324:	40020000 	.word	0x40020000
 8001328:	40023800 	.word	0x40023800

0800132c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800132c:	b10a      	cbz	r2, 8001332 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800132e:	6181      	str	r1, [r0, #24]
 8001330:	4770      	bx	lr
 8001332:	0409      	lsls	r1, r1, #16
 8001334:	e7fb      	b.n	800132e <HAL_GPIO_WritePin+0x2>

08001336 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001336:	6943      	ldr	r3, [r0, #20]
 8001338:	4059      	eors	r1, r3
 800133a:	6141      	str	r1, [r0, #20]
 800133c:	4770      	bx	lr

0800133e <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800133e:	4770      	bx	lr

08001340 <HAL_GPIO_EXTI_IRQHandler>:
{
 8001340:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001342:	4b04      	ldr	r3, [pc, #16]	; (8001354 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001344:	6959      	ldr	r1, [r3, #20]
 8001346:	4201      	tst	r1, r0
 8001348:	d002      	beq.n	8001350 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800134a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800134c:	f7ff fff7 	bl	800133e <HAL_GPIO_EXTI_Callback>
 8001350:	bd08      	pop	{r3, pc}
 8001352:	bf00      	nop
 8001354:	40013c00 	.word	0x40013c00

08001358 <HAL_I2C_Init>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001358:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange = 0U;
  uint32_t pclk1 = 0U;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 800135a:	4604      	mov	r4, r0
 800135c:	2800      	cmp	r0, #0
 800135e:	d062      	beq.n	8001426 <HAL_I2C_Init+0xce>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001360:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001364:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001368:	b91b      	cbnz	r3, 8001372 <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800136a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800136e:	f001 fef7 	bl	8003160 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001372:	6822      	ldr	r2, [r4, #0]
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001374:	4e2d      	ldr	r6, [pc, #180]	; (800142c <HAL_I2C_Init+0xd4>)
  freqrange = I2C_FREQRANGE(pclk1);
 8001376:	4d2e      	ldr	r5, [pc, #184]	; (8001430 <HAL_I2C_Init+0xd8>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001378:	2324      	movs	r3, #36	; 0x24
 800137a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800137e:	6813      	ldr	r3, [r2, #0]
 8001380:	f023 0301 	bic.w	r3, r3, #1
 8001384:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001386:	f000 f91d 	bl	80015c4 <HAL_RCC_GetPCLK1Freq>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800138a:	6863      	ldr	r3, [r4, #4]
  hi2c->Instance->CR2 = freqrange;
 800138c:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800138e:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001392:	42b3      	cmp	r3, r6
 8001394:	bf84      	itt	hi
 8001396:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 800139a:	4369      	mulhi	r1, r5
  hi2c->Instance->CR2 = freqrange;
 800139c:	6055      	str	r5, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800139e:	bf91      	iteee	ls
 80013a0:	1c69      	addls	r1, r5, #1
 80013a2:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 80013a6:	fbb1 f1f5 	udivhi	r1, r1, r5
 80013aa:	3101      	addhi	r1, #1

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80013ac:	42b3      	cmp	r3, r6
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80013ae:	6211      	str	r1, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80013b0:	d821      	bhi.n	80013f6 <HAL_I2C_Init+0x9e>
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	fbb0 f0f3 	udiv	r0, r0, r3
 80013b8:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80013bc:	2b03      	cmp	r3, #3
 80013be:	bf98      	it	ls
 80013c0:	2004      	movls	r0, #4

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80013c2:	6a21      	ldr	r1, [r4, #32]
 80013c4:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80013c6:	61d0      	str	r0, [r2, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80013c8:	430b      	orrs	r3, r1
 80013ca:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80013cc:	68e1      	ldr	r1, [r4, #12]
 80013ce:	6923      	ldr	r3, [r4, #16]
 80013d0:	430b      	orrs	r3, r1
 80013d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 80013d4:	69a1      	ldr	r1, [r4, #24]
 80013d6:	6963      	ldr	r3, [r4, #20]
 80013d8:	430b      	orrs	r3, r1
 80013da:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80013dc:	6813      	ldr	r3, [r2, #0]
 80013de:	f043 0301 	orr.w	r3, r3, #1
 80013e2:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013e4:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80013e6:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013e8:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80013ea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80013ee:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013f0:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 80013f4:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80013f6:	68a1      	ldr	r1, [r4, #8]
 80013f8:	b949      	cbnz	r1, 800140e <HAL_I2C_Init+0xb6>
 80013fa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80013fe:	fbb0 f0f3 	udiv	r0, r0, r3
 8001402:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001406:	b163      	cbz	r3, 8001422 <HAL_I2C_Init+0xca>
 8001408:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 800140c:	e7d9      	b.n	80013c2 <HAL_I2C_Init+0x6a>
 800140e:	2119      	movs	r1, #25
 8001410:	434b      	muls	r3, r1
 8001412:	fbb0 f0f3 	udiv	r0, r0, r3
 8001416:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800141a:	b113      	cbz	r3, 8001422 <HAL_I2C_Init+0xca>
 800141c:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8001420:	e7cf      	b.n	80013c2 <HAL_I2C_Init+0x6a>
 8001422:	2001      	movs	r0, #1
 8001424:	e7cd      	b.n	80013c2 <HAL_I2C_Init+0x6a>
    return HAL_ERROR;
 8001426:	2001      	movs	r0, #1
}
 8001428:	bd70      	pop	{r4, r5, r6, pc}
 800142a:	bf00      	nop
 800142c:	000186a0 	.word	0x000186a0
 8001430:	000f4240 	.word	0x000f4240

08001434 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001434:	4913      	ldr	r1, [pc, #76]	; (8001484 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001436:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001438:	688b      	ldr	r3, [r1, #8]
 800143a:	f003 030c 	and.w	r3, r3, #12
 800143e:	2b04      	cmp	r3, #4
 8001440:	d003      	beq.n	800144a <HAL_RCC_GetSysClockFreq+0x16>
 8001442:	2b08      	cmp	r3, #8
 8001444:	d003      	beq.n	800144e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001446:	4810      	ldr	r0, [pc, #64]	; (8001488 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001448:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 800144a:	4810      	ldr	r0, [pc, #64]	; (800148c <HAL_RCC_GetSysClockFreq+0x58>)
 800144c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800144e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001450:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001452:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001454:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001458:	bf14      	ite	ne
 800145a:	480c      	ldrne	r0, [pc, #48]	; (800148c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800145c:	480a      	ldreq	r0, [pc, #40]	; (8001488 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800145e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001462:	bf18      	it	ne
 8001464:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001466:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800146a:	fba1 0100 	umull	r0, r1, r1, r0
 800146e:	f7ff fab5 	bl	80009dc <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001472:	4b04      	ldr	r3, [pc, #16]	; (8001484 <HAL_RCC_GetSysClockFreq+0x50>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800147a:	3301      	adds	r3, #1
 800147c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 800147e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001482:	bd08      	pop	{r3, pc}
 8001484:	40023800 	.word	0x40023800
 8001488:	00f42400 	.word	0x00f42400
 800148c:	007a1200 	.word	0x007a1200

08001490 <HAL_RCC_ClockConfig>:
{
 8001490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001494:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001496:	4604      	mov	r4, r0
 8001498:	b910      	cbnz	r0, 80014a0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800149a:	2001      	movs	r0, #1
 800149c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014a0:	4b44      	ldr	r3, [pc, #272]	; (80015b4 <HAL_RCC_ClockConfig+0x124>)
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	f002 020f 	and.w	r2, r2, #15
 80014a8:	428a      	cmp	r2, r1
 80014aa:	d328      	bcc.n	80014fe <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014ac:	6821      	ldr	r1, [r4, #0]
 80014ae:	078f      	lsls	r7, r1, #30
 80014b0:	d42d      	bmi.n	800150e <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014b2:	07c8      	lsls	r0, r1, #31
 80014b4:	d440      	bmi.n	8001538 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014b6:	4b3f      	ldr	r3, [pc, #252]	; (80015b4 <HAL_RCC_ClockConfig+0x124>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	f002 020f 	and.w	r2, r2, #15
 80014be:	4295      	cmp	r5, r2
 80014c0:	d366      	bcc.n	8001590 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014c2:	6822      	ldr	r2, [r4, #0]
 80014c4:	0751      	lsls	r1, r2, #29
 80014c6:	d46c      	bmi.n	80015a2 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014c8:	0713      	lsls	r3, r2, #28
 80014ca:	d507      	bpl.n	80014dc <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014cc:	4a3a      	ldr	r2, [pc, #232]	; (80015b8 <HAL_RCC_ClockConfig+0x128>)
 80014ce:	6921      	ldr	r1, [r4, #16]
 80014d0:	6893      	ldr	r3, [r2, #8]
 80014d2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80014d6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80014da:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014dc:	f7ff ffaa 	bl	8001434 <HAL_RCC_GetSysClockFreq>
 80014e0:	4b35      	ldr	r3, [pc, #212]	; (80015b8 <HAL_RCC_ClockConfig+0x128>)
 80014e2:	4a36      	ldr	r2, [pc, #216]	; (80015bc <HAL_RCC_ClockConfig+0x12c>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80014ea:	5cd3      	ldrb	r3, [r2, r3]
 80014ec:	40d8      	lsrs	r0, r3
 80014ee:	4b34      	ldr	r3, [pc, #208]	; (80015c0 <HAL_RCC_ClockConfig+0x130>)
 80014f0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80014f2:	2000      	movs	r0, #0
 80014f4:	f7ff fbfa 	bl	8000cec <HAL_InitTick>
  return HAL_OK;
 80014f8:	2000      	movs	r0, #0
 80014fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014fe:	b2ca      	uxtb	r2, r1
 8001500:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 030f 	and.w	r3, r3, #15
 8001508:	4299      	cmp	r1, r3
 800150a:	d1c6      	bne.n	800149a <HAL_RCC_ClockConfig+0xa>
 800150c:	e7ce      	b.n	80014ac <HAL_RCC_ClockConfig+0x1c>
 800150e:	4b2a      	ldr	r3, [pc, #168]	; (80015b8 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001510:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001514:	bf1e      	ittt	ne
 8001516:	689a      	ldrne	r2, [r3, #8]
 8001518:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 800151c:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800151e:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001520:	bf42      	ittt	mi
 8001522:	689a      	ldrmi	r2, [r3, #8]
 8001524:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001528:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800152a:	689a      	ldr	r2, [r3, #8]
 800152c:	68a0      	ldr	r0, [r4, #8]
 800152e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001532:	4302      	orrs	r2, r0
 8001534:	609a      	str	r2, [r3, #8]
 8001536:	e7bc      	b.n	80014b2 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001538:	6862      	ldr	r2, [r4, #4]
 800153a:	4b1f      	ldr	r3, [pc, #124]	; (80015b8 <HAL_RCC_ClockConfig+0x128>)
 800153c:	2a01      	cmp	r2, #1
 800153e:	d11d      	bne.n	800157c <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001546:	d0a8      	beq.n	800149a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001548:	4e1b      	ldr	r6, [pc, #108]	; (80015b8 <HAL_RCC_ClockConfig+0x128>)
 800154a:	68b3      	ldr	r3, [r6, #8]
 800154c:	f023 0303 	bic.w	r3, r3, #3
 8001550:	4313      	orrs	r3, r2
 8001552:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001554:	f7ff fc14 	bl	8000d80 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001558:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800155c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800155e:	68b3      	ldr	r3, [r6, #8]
 8001560:	6862      	ldr	r2, [r4, #4]
 8001562:	f003 030c 	and.w	r3, r3, #12
 8001566:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800156a:	d0a4      	beq.n	80014b6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800156c:	f7ff fc08 	bl	8000d80 <HAL_GetTick>
 8001570:	1bc0      	subs	r0, r0, r7
 8001572:	4540      	cmp	r0, r8
 8001574:	d9f3      	bls.n	800155e <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001576:	2003      	movs	r0, #3
}
 8001578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800157c:	1e91      	subs	r1, r2, #2
 800157e:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001580:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001582:	d802      	bhi.n	800158a <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001584:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001588:	e7dd      	b.n	8001546 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800158a:	f013 0f02 	tst.w	r3, #2
 800158e:	e7da      	b.n	8001546 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001590:	b2ea      	uxtb	r2, r5
 8001592:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 030f 	and.w	r3, r3, #15
 800159a:	429d      	cmp	r5, r3
 800159c:	f47f af7d 	bne.w	800149a <HAL_RCC_ClockConfig+0xa>
 80015a0:	e78f      	b.n	80014c2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015a2:	4905      	ldr	r1, [pc, #20]	; (80015b8 <HAL_RCC_ClockConfig+0x128>)
 80015a4:	68e0      	ldr	r0, [r4, #12]
 80015a6:	688b      	ldr	r3, [r1, #8]
 80015a8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80015ac:	4303      	orrs	r3, r0
 80015ae:	608b      	str	r3, [r1, #8]
 80015b0:	e78a      	b.n	80014c8 <HAL_RCC_ClockConfig+0x38>
 80015b2:	bf00      	nop
 80015b4:	40023c00 	.word	0x40023c00
 80015b8:	40023800 	.word	0x40023800
 80015bc:	080037ca 	.word	0x080037ca
 80015c0:	20000024 	.word	0x20000024

080015c4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80015c4:	4b04      	ldr	r3, [pc, #16]	; (80015d8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80015c6:	4a05      	ldr	r2, [pc, #20]	; (80015dc <HAL_RCC_GetPCLK1Freq+0x18>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80015ce:	5cd3      	ldrb	r3, [r2, r3]
 80015d0:	4a03      	ldr	r2, [pc, #12]	; (80015e0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80015d2:	6810      	ldr	r0, [r2, #0]
}
 80015d4:	40d8      	lsrs	r0, r3
 80015d6:	4770      	bx	lr
 80015d8:	40023800 	.word	0x40023800
 80015dc:	080037da 	.word	0x080037da
 80015e0:	20000024 	.word	0x20000024

080015e4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80015e4:	4b04      	ldr	r3, [pc, #16]	; (80015f8 <HAL_RCC_GetPCLK2Freq+0x14>)
 80015e6:	4a05      	ldr	r2, [pc, #20]	; (80015fc <HAL_RCC_GetPCLK2Freq+0x18>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80015ee:	5cd3      	ldrb	r3, [r2, r3]
 80015f0:	4a03      	ldr	r2, [pc, #12]	; (8001600 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80015f2:	6810      	ldr	r0, [r2, #0]
}
 80015f4:	40d8      	lsrs	r0, r3
 80015f6:	4770      	bx	lr
 80015f8:	40023800 	.word	0x40023800
 80015fc:	080037da 	.word	0x080037da
 8001600:	20000024 	.word	0x20000024

08001604 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001604:	6803      	ldr	r3, [r0, #0]
{
 8001606:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800160a:	07dd      	lsls	r5, r3, #31
{
 800160c:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800160e:	d410      	bmi.n	8001632 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001610:	6823      	ldr	r3, [r4, #0]
 8001612:	0798      	lsls	r0, r3, #30
 8001614:	d45b      	bmi.n	80016ce <HAL_RCC_OscConfig+0xca>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001616:	6823      	ldr	r3, [r4, #0]
 8001618:	071a      	lsls	r2, r3, #28
 800161a:	f100 809d 	bmi.w	8001758 <HAL_RCC_OscConfig+0x154>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800161e:	6823      	ldr	r3, [r4, #0]
 8001620:	075b      	lsls	r3, r3, #29
 8001622:	f100 80bb 	bmi.w	800179c <HAL_RCC_OscConfig+0x198>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001626:	69a2      	ldr	r2, [r4, #24]
 8001628:	2a00      	cmp	r2, #0
 800162a:	f040 811c 	bne.w	8001866 <HAL_RCC_OscConfig+0x262>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 800162e:	2000      	movs	r0, #0
 8001630:	e015      	b.n	800165e <HAL_RCC_OscConfig+0x5a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001632:	4ba7      	ldr	r3, [pc, #668]	; (80018d0 <HAL_RCC_OscConfig+0x2cc>)
 8001634:	689a      	ldr	r2, [r3, #8]
 8001636:	f002 020c 	and.w	r2, r2, #12
 800163a:	2a04      	cmp	r2, #4
 800163c:	d007      	beq.n	800164e <HAL_RCC_OscConfig+0x4a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001644:	2a08      	cmp	r2, #8
 8001646:	d10d      	bne.n	8001664 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	0259      	lsls	r1, r3, #9
 800164c:	d50a      	bpl.n	8001664 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800164e:	4ba0      	ldr	r3, [pc, #640]	; (80018d0 <HAL_RCC_OscConfig+0x2cc>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	039a      	lsls	r2, r3, #14
 8001654:	d5dc      	bpl.n	8001610 <HAL_RCC_OscConfig+0xc>
 8001656:	6863      	ldr	r3, [r4, #4]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d1d9      	bne.n	8001610 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800165c:	2001      	movs	r0, #1
}
 800165e:	b002      	add	sp, #8
 8001660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001664:	6863      	ldr	r3, [r4, #4]
 8001666:	4d9a      	ldr	r5, [pc, #616]	; (80018d0 <HAL_RCC_OscConfig+0x2cc>)
 8001668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800166c:	d111      	bne.n	8001692 <HAL_RCC_OscConfig+0x8e>
 800166e:	682b      	ldr	r3, [r5, #0]
 8001670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001674:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001676:	f7ff fb83 	bl	8000d80 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800167a:	4d95      	ldr	r5, [pc, #596]	; (80018d0 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 800167c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800167e:	682b      	ldr	r3, [r5, #0]
 8001680:	039b      	lsls	r3, r3, #14
 8001682:	d4c5      	bmi.n	8001610 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001684:	f7ff fb7c 	bl	8000d80 <HAL_GetTick>
 8001688:	1b80      	subs	r0, r0, r6
 800168a:	2864      	cmp	r0, #100	; 0x64
 800168c:	d9f7      	bls.n	800167e <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 800168e:	2003      	movs	r0, #3
 8001690:	e7e5      	b.n	800165e <HAL_RCC_OscConfig+0x5a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001692:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001696:	d104      	bne.n	80016a2 <HAL_RCC_OscConfig+0x9e>
 8001698:	682b      	ldr	r3, [r5, #0]
 800169a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800169e:	602b      	str	r3, [r5, #0]
 80016a0:	e7e5      	b.n	800166e <HAL_RCC_OscConfig+0x6a>
 80016a2:	682a      	ldr	r2, [r5, #0]
 80016a4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80016a8:	602a      	str	r2, [r5, #0]
 80016aa:	682a      	ldr	r2, [r5, #0]
 80016ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80016b0:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1df      	bne.n	8001676 <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 80016b6:	f7ff fb63 	bl	8000d80 <HAL_GetTick>
 80016ba:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016bc:	682b      	ldr	r3, [r5, #0]
 80016be:	039f      	lsls	r7, r3, #14
 80016c0:	d5a6      	bpl.n	8001610 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016c2:	f7ff fb5d 	bl	8000d80 <HAL_GetTick>
 80016c6:	1b80      	subs	r0, r0, r6
 80016c8:	2864      	cmp	r0, #100	; 0x64
 80016ca:	d9f7      	bls.n	80016bc <HAL_RCC_OscConfig+0xb8>
 80016cc:	e7df      	b.n	800168e <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80016ce:	4b80      	ldr	r3, [pc, #512]	; (80018d0 <HAL_RCC_OscConfig+0x2cc>)
 80016d0:	689a      	ldr	r2, [r3, #8]
 80016d2:	f012 0f0c 	tst.w	r2, #12
 80016d6:	d007      	beq.n	80016e8 <HAL_RCC_OscConfig+0xe4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016d8:	689a      	ldr	r2, [r3, #8]
 80016da:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80016de:	2a08      	cmp	r2, #8
 80016e0:	d111      	bne.n	8001706 <HAL_RCC_OscConfig+0x102>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	025e      	lsls	r6, r3, #9
 80016e6:	d40e      	bmi.n	8001706 <HAL_RCC_OscConfig+0x102>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016e8:	4b79      	ldr	r3, [pc, #484]	; (80018d0 <HAL_RCC_OscConfig+0x2cc>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	0795      	lsls	r5, r2, #30
 80016ee:	d502      	bpl.n	80016f6 <HAL_RCC_OscConfig+0xf2>
 80016f0:	68e2      	ldr	r2, [r4, #12]
 80016f2:	2a01      	cmp	r2, #1
 80016f4:	d1b2      	bne.n	800165c <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	6921      	ldr	r1, [r4, #16]
 80016fa:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80016fe:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001702:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001704:	e787      	b.n	8001616 <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001706:	68e2      	ldr	r2, [r4, #12]
 8001708:	4b72      	ldr	r3, [pc, #456]	; (80018d4 <HAL_RCC_OscConfig+0x2d0>)
 800170a:	b1b2      	cbz	r2, 800173a <HAL_RCC_OscConfig+0x136>
        __HAL_RCC_HSI_ENABLE();
 800170c:	2201      	movs	r2, #1
 800170e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001710:	f7ff fb36 	bl	8000d80 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001714:	4d6e      	ldr	r5, [pc, #440]	; (80018d0 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8001716:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001718:	682b      	ldr	r3, [r5, #0]
 800171a:	0798      	lsls	r0, r3, #30
 800171c:	d507      	bpl.n	800172e <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800171e:	682b      	ldr	r3, [r5, #0]
 8001720:	6922      	ldr	r2, [r4, #16]
 8001722:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001726:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800172a:	602b      	str	r3, [r5, #0]
 800172c:	e773      	b.n	8001616 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800172e:	f7ff fb27 	bl	8000d80 <HAL_GetTick>
 8001732:	1b80      	subs	r0, r0, r6
 8001734:	2802      	cmp	r0, #2
 8001736:	d9ef      	bls.n	8001718 <HAL_RCC_OscConfig+0x114>
 8001738:	e7a9      	b.n	800168e <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 800173a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800173c:	f7ff fb20 	bl	8000d80 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001740:	4d63      	ldr	r5, [pc, #396]	; (80018d0 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8001742:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001744:	682b      	ldr	r3, [r5, #0]
 8001746:	0799      	lsls	r1, r3, #30
 8001748:	f57f af65 	bpl.w	8001616 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800174c:	f7ff fb18 	bl	8000d80 <HAL_GetTick>
 8001750:	1b80      	subs	r0, r0, r6
 8001752:	2802      	cmp	r0, #2
 8001754:	d9f6      	bls.n	8001744 <HAL_RCC_OscConfig+0x140>
 8001756:	e79a      	b.n	800168e <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001758:	6962      	ldr	r2, [r4, #20]
 800175a:	4b5f      	ldr	r3, [pc, #380]	; (80018d8 <HAL_RCC_OscConfig+0x2d4>)
 800175c:	b17a      	cbz	r2, 800177e <HAL_RCC_OscConfig+0x17a>
      __HAL_RCC_LSI_ENABLE();
 800175e:	2201      	movs	r2, #1
 8001760:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001762:	f7ff fb0d 	bl	8000d80 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001766:	4d5a      	ldr	r5, [pc, #360]	; (80018d0 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8001768:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800176a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800176c:	079f      	lsls	r7, r3, #30
 800176e:	f53f af56 	bmi.w	800161e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001772:	f7ff fb05 	bl	8000d80 <HAL_GetTick>
 8001776:	1b80      	subs	r0, r0, r6
 8001778:	2802      	cmp	r0, #2
 800177a:	d9f6      	bls.n	800176a <HAL_RCC_OscConfig+0x166>
 800177c:	e787      	b.n	800168e <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 800177e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001780:	f7ff fafe 	bl	8000d80 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001784:	4d52      	ldr	r5, [pc, #328]	; (80018d0 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8001786:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001788:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800178a:	0798      	lsls	r0, r3, #30
 800178c:	f57f af47 	bpl.w	800161e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001790:	f7ff faf6 	bl	8000d80 <HAL_GetTick>
 8001794:	1b80      	subs	r0, r0, r6
 8001796:	2802      	cmp	r0, #2
 8001798:	d9f6      	bls.n	8001788 <HAL_RCC_OscConfig+0x184>
 800179a:	e778      	b.n	800168e <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800179c:	4b4c      	ldr	r3, [pc, #304]	; (80018d0 <HAL_RCC_OscConfig+0x2cc>)
 800179e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017a0:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80017a4:	d128      	bne.n	80017f8 <HAL_RCC_OscConfig+0x1f4>
      __HAL_RCC_PWR_CLK_ENABLE();
 80017a6:	9201      	str	r2, [sp, #4]
 80017a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017aa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80017ae:	641a      	str	r2, [r3, #64]	; 0x40
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b6:	9301      	str	r3, [sp, #4]
 80017b8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80017ba:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017bc:	4d47      	ldr	r5, [pc, #284]	; (80018dc <HAL_RCC_OscConfig+0x2d8>)
 80017be:	682b      	ldr	r3, [r5, #0]
 80017c0:	05d9      	lsls	r1, r3, #23
 80017c2:	d51b      	bpl.n	80017fc <HAL_RCC_OscConfig+0x1f8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017c4:	68a3      	ldr	r3, [r4, #8]
 80017c6:	4d42      	ldr	r5, [pc, #264]	; (80018d0 <HAL_RCC_OscConfig+0x2cc>)
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d127      	bne.n	800181c <HAL_RCC_OscConfig+0x218>
 80017cc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80017ce:	f043 0301 	orr.w	r3, r3, #1
 80017d2:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80017d4:	f7ff fad4 	bl	8000d80 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017d8:	4d3d      	ldr	r5, [pc, #244]	; (80018d0 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 80017da:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017dc:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017e0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80017e2:	079b      	lsls	r3, r3, #30
 80017e4:	d539      	bpl.n	800185a <HAL_RCC_OscConfig+0x256>
    if(pwrclkchanged == SET)
 80017e6:	2e00      	cmp	r6, #0
 80017e8:	f43f af1d 	beq.w	8001626 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 80017ec:	4a38      	ldr	r2, [pc, #224]	; (80018d0 <HAL_RCC_OscConfig+0x2cc>)
 80017ee:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80017f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017f4:	6413      	str	r3, [r2, #64]	; 0x40
 80017f6:	e716      	b.n	8001626 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 80017f8:	2600      	movs	r6, #0
 80017fa:	e7df      	b.n	80017bc <HAL_RCC_OscConfig+0x1b8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017fc:	682b      	ldr	r3, [r5, #0]
 80017fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001802:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001804:	f7ff fabc 	bl	8000d80 <HAL_GetTick>
 8001808:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800180a:	682b      	ldr	r3, [r5, #0]
 800180c:	05da      	lsls	r2, r3, #23
 800180e:	d4d9      	bmi.n	80017c4 <HAL_RCC_OscConfig+0x1c0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001810:	f7ff fab6 	bl	8000d80 <HAL_GetTick>
 8001814:	1bc0      	subs	r0, r0, r7
 8001816:	2802      	cmp	r0, #2
 8001818:	d9f7      	bls.n	800180a <HAL_RCC_OscConfig+0x206>
 800181a:	e738      	b.n	800168e <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800181c:	2b05      	cmp	r3, #5
 800181e:	d104      	bne.n	800182a <HAL_RCC_OscConfig+0x226>
 8001820:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001822:	f043 0304 	orr.w	r3, r3, #4
 8001826:	672b      	str	r3, [r5, #112]	; 0x70
 8001828:	e7d0      	b.n	80017cc <HAL_RCC_OscConfig+0x1c8>
 800182a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800182c:	f022 0201 	bic.w	r2, r2, #1
 8001830:	672a      	str	r2, [r5, #112]	; 0x70
 8001832:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001834:	f022 0204 	bic.w	r2, r2, #4
 8001838:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1ca      	bne.n	80017d4 <HAL_RCC_OscConfig+0x1d0>
      tickstart = HAL_GetTick();
 800183e:	f7ff fa9f 	bl	8000d80 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001842:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001846:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001848:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800184a:	0798      	lsls	r0, r3, #30
 800184c:	d5cb      	bpl.n	80017e6 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800184e:	f7ff fa97 	bl	8000d80 <HAL_GetTick>
 8001852:	1bc0      	subs	r0, r0, r7
 8001854:	4540      	cmp	r0, r8
 8001856:	d9f7      	bls.n	8001848 <HAL_RCC_OscConfig+0x244>
 8001858:	e719      	b.n	800168e <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800185a:	f7ff fa91 	bl	8000d80 <HAL_GetTick>
 800185e:	1bc0      	subs	r0, r0, r7
 8001860:	4540      	cmp	r0, r8
 8001862:	d9bd      	bls.n	80017e0 <HAL_RCC_OscConfig+0x1dc>
 8001864:	e713      	b.n	800168e <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001866:	4d1a      	ldr	r5, [pc, #104]	; (80018d0 <HAL_RCC_OscConfig+0x2cc>)
 8001868:	68ab      	ldr	r3, [r5, #8]
 800186a:	f003 030c 	and.w	r3, r3, #12
 800186e:	2b08      	cmp	r3, #8
 8001870:	f43f aef4 	beq.w	800165c <HAL_RCC_OscConfig+0x58>
 8001874:	4e1a      	ldr	r6, [pc, #104]	; (80018e0 <HAL_RCC_OscConfig+0x2dc>)
 8001876:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001878:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800187a:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800187c:	d138      	bne.n	80018f0 <HAL_RCC_OscConfig+0x2ec>
        tickstart = HAL_GetTick();
 800187e:	f7ff fa7f 	bl	8000d80 <HAL_GetTick>
 8001882:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001884:	682b      	ldr	r3, [r5, #0]
 8001886:	0199      	lsls	r1, r3, #6
 8001888:	d42c      	bmi.n	80018e4 <HAL_RCC_OscConfig+0x2e0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800188a:	6a22      	ldr	r2, [r4, #32]
 800188c:	69e3      	ldr	r3, [r4, #28]
 800188e:	4313      	orrs	r3, r2
 8001890:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001892:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001896:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001898:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800189c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800189e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80018a2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018a4:	4c0a      	ldr	r4, [pc, #40]	; (80018d0 <HAL_RCC_OscConfig+0x2cc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018a6:	0852      	lsrs	r2, r2, #1
 80018a8:	3a01      	subs	r2, #1
 80018aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80018ae:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80018b0:	2301      	movs	r3, #1
 80018b2:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80018b4:	f7ff fa64 	bl	8000d80 <HAL_GetTick>
 80018b8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ba:	6823      	ldr	r3, [r4, #0]
 80018bc:	019a      	lsls	r2, r3, #6
 80018be:	f53f aeb6 	bmi.w	800162e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018c2:	f7ff fa5d 	bl	8000d80 <HAL_GetTick>
 80018c6:	1b40      	subs	r0, r0, r5
 80018c8:	2802      	cmp	r0, #2
 80018ca:	d9f6      	bls.n	80018ba <HAL_RCC_OscConfig+0x2b6>
 80018cc:	e6df      	b.n	800168e <HAL_RCC_OscConfig+0x8a>
 80018ce:	bf00      	nop
 80018d0:	40023800 	.word	0x40023800
 80018d4:	42470000 	.word	0x42470000
 80018d8:	42470e80 	.word	0x42470e80
 80018dc:	40007000 	.word	0x40007000
 80018e0:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018e4:	f7ff fa4c 	bl	8000d80 <HAL_GetTick>
 80018e8:	1bc0      	subs	r0, r0, r7
 80018ea:	2802      	cmp	r0, #2
 80018ec:	d9ca      	bls.n	8001884 <HAL_RCC_OscConfig+0x280>
 80018ee:	e6ce      	b.n	800168e <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 80018f0:	f7ff fa46 	bl	8000d80 <HAL_GetTick>
 80018f4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018f6:	682b      	ldr	r3, [r5, #0]
 80018f8:	019b      	lsls	r3, r3, #6
 80018fa:	f57f ae98 	bpl.w	800162e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018fe:	f7ff fa3f 	bl	8000d80 <HAL_GetTick>
 8001902:	1b00      	subs	r0, r0, r4
 8001904:	2802      	cmp	r0, #2
 8001906:	d9f6      	bls.n	80018f6 <HAL_RCC_OscConfig+0x2f2>
 8001908:	e6c1      	b.n	800168e <HAL_RCC_OscConfig+0x8a>
 800190a:	bf00      	nop

0800190c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800190c:	6a03      	ldr	r3, [r0, #32]
 800190e:	f023 0301 	bic.w	r3, r3, #1
 8001912:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001914:	6a03      	ldr	r3, [r0, #32]
{
 8001916:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001918:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800191a:	6982      	ldr	r2, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800191c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800191e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001922:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001924:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001926:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800192a:	432b      	orrs	r3, r5

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800192c:	4d0a      	ldr	r5, [pc, #40]	; (8001958 <TIM_OC1_SetConfig+0x4c>)
 800192e:	42a8      	cmp	r0, r5
 8001930:	d10b      	bne.n	800194a <TIM_OC1_SetConfig+0x3e>
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001932:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001934:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001936:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800193a:	432b      	orrs	r3, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 800193c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800193e:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8001942:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001944:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001948:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800194a:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800194c:	6182      	str	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800194e:	684a      	ldr	r2, [r1, #4]
 8001950:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001952:	6203      	str	r3, [r0, #32]
 8001954:	bd70      	pop	{r4, r5, r6, pc}
 8001956:	bf00      	nop
 8001958:	40010000 	.word	0x40010000

0800195c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800195c:	6a03      	ldr	r3, [r0, #32]
 800195e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001962:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001964:	6a03      	ldr	r3, [r0, #32]
{
 8001966:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001968:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800196a:	69c2      	ldr	r2, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800196c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 800196e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001972:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001974:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001976:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800197a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800197e:	4d0b      	ldr	r5, [pc, #44]	; (80019ac <TIM_OC3_SetConfig+0x50>)
 8001980:	42a8      	cmp	r0, r5
 8001982:	d10d      	bne.n	80019a0 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001984:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001986:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001988:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800198c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001990:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001992:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001996:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8001998:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800199c:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80019a0:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80019a2:	61c2      	str	r2, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80019a4:	684a      	ldr	r2, [r1, #4]
 80019a6:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80019a8:	6203      	str	r3, [r0, #32]
 80019aa:	bd70      	pop	{r4, r5, r6, pc}
 80019ac:	40010000 	.word	0x40010000

080019b0 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80019b0:	6a03      	ldr	r3, [r0, #32]
 80019b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80019b6:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80019b8:	6a03      	ldr	r3, [r0, #32]
{
 80019ba:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80019bc:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80019be:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80019c0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80019c2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80019c6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80019ca:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80019cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80019d0:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80019d4:	4d06      	ldr	r5, [pc, #24]	; (80019f0 <TIM_OC4_SetConfig+0x40>)
 80019d6:	42a8      	cmp	r0, r5
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80019d8:	bf02      	ittt	eq
 80019da:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80019dc:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80019e0:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80019e4:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80019e6:	61c2      	str	r2, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80019e8:	684a      	ldr	r2, [r1, #4]
 80019ea:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80019ec:	6203      	str	r3, [r0, #32]
 80019ee:	bd30      	pop	{r4, r5, pc}
 80019f0:	40010000 	.word	0x40010000

080019f4 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019f4:	6803      	ldr	r3, [r0, #0]
 80019f6:	68da      	ldr	r2, [r3, #12]
 80019f8:	f042 0201 	orr.w	r2, r2, #1
 80019fc:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	f042 0201 	orr.w	r2, r2, #1
 8001a04:	601a      	str	r2, [r3, #0]
}
 8001a06:	2000      	movs	r0, #0
 8001a08:	4770      	bx	lr

08001a0a <HAL_TIM_PeriodElapsedCallback>:
 8001a0a:	4770      	bx	lr

08001a0c <HAL_TIM_OC_DelayElapsedCallback>:
 8001a0c:	4770      	bx	lr

08001a0e <HAL_TIM_IC_CaptureCallback>:
 8001a0e:	4770      	bx	lr

08001a10 <HAL_TIM_TriggerCallback>:
 8001a10:	4770      	bx	lr

08001a12 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a12:	6803      	ldr	r3, [r0, #0]
 8001a14:	691a      	ldr	r2, [r3, #16]
 8001a16:	0791      	lsls	r1, r2, #30
{
 8001a18:	b510      	push	{r4, lr}
 8001a1a:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a1c:	d50e      	bpl.n	8001a3c <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001a1e:	68da      	ldr	r2, [r3, #12]
 8001a20:	0792      	lsls	r2, r2, #30
 8001a22:	d50b      	bpl.n	8001a3c <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a24:	f06f 0202 	mvn.w	r2, #2
 8001a28:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a2a:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a2c:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a2e:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a30:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a32:	d077      	beq.n	8001b24 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8001a34:	f7ff ffeb 	bl	8001a0e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001a3c:	6823      	ldr	r3, [r4, #0]
 8001a3e:	691a      	ldr	r2, [r3, #16]
 8001a40:	0750      	lsls	r0, r2, #29
 8001a42:	d510      	bpl.n	8001a66 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001a44:	68da      	ldr	r2, [r3, #12]
 8001a46:	0751      	lsls	r1, r2, #29
 8001a48:	d50d      	bpl.n	8001a66 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001a4a:	f06f 0204 	mvn.w	r2, #4
 8001a4e:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a50:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a52:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a54:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a58:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8001a5a:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a5c:	d068      	beq.n	8001b30 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001a5e:	f7ff ffd6 	bl	8001a0e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a62:	2300      	movs	r3, #0
 8001a64:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001a66:	6823      	ldr	r3, [r4, #0]
 8001a68:	691a      	ldr	r2, [r3, #16]
 8001a6a:	0712      	lsls	r2, r2, #28
 8001a6c:	d50f      	bpl.n	8001a8e <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001a6e:	68da      	ldr	r2, [r3, #12]
 8001a70:	0710      	lsls	r0, r2, #28
 8001a72:	d50c      	bpl.n	8001a8e <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a74:	f06f 0208 	mvn.w	r2, #8
 8001a78:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a7a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a7c:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a7e:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a80:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8001a82:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a84:	d05a      	beq.n	8001b3c <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001a86:	f7ff ffc2 	bl	8001a0e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001a8e:	6823      	ldr	r3, [r4, #0]
 8001a90:	691a      	ldr	r2, [r3, #16]
 8001a92:	06d2      	lsls	r2, r2, #27
 8001a94:	d510      	bpl.n	8001ab8 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001a96:	68da      	ldr	r2, [r3, #12]
 8001a98:	06d0      	lsls	r0, r2, #27
 8001a9a:	d50d      	bpl.n	8001ab8 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001a9c:	f06f 0210 	mvn.w	r2, #16
 8001aa0:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001aa2:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001aa4:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001aa6:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001aaa:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8001aac:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001aae:	d04b      	beq.n	8001b48 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001ab0:	f7ff ffad 	bl	8001a0e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ab8:	6823      	ldr	r3, [r4, #0]
 8001aba:	691a      	ldr	r2, [r3, #16]
 8001abc:	07d1      	lsls	r1, r2, #31
 8001abe:	d508      	bpl.n	8001ad2 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001ac0:	68da      	ldr	r2, [r3, #12]
 8001ac2:	07d2      	lsls	r2, r2, #31
 8001ac4:	d505      	bpl.n	8001ad2 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ac6:	f06f 0201 	mvn.w	r2, #1
 8001aca:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001acc:	4620      	mov	r0, r4
 8001ace:	f7ff ff9c 	bl	8001a0a <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ad2:	6823      	ldr	r3, [r4, #0]
 8001ad4:	691a      	ldr	r2, [r3, #16]
 8001ad6:	0610      	lsls	r0, r2, #24
 8001ad8:	d508      	bpl.n	8001aec <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001ada:	68da      	ldr	r2, [r3, #12]
 8001adc:	0611      	lsls	r1, r2, #24
 8001ade:	d505      	bpl.n	8001aec <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ae0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ae4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001ae6:	4620      	mov	r0, r4
 8001ae8:	f000 f9d9 	bl	8001e9e <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001aec:	6823      	ldr	r3, [r4, #0]
 8001aee:	691a      	ldr	r2, [r3, #16]
 8001af0:	0652      	lsls	r2, r2, #25
 8001af2:	d508      	bpl.n	8001b06 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001af4:	68da      	ldr	r2, [r3, #12]
 8001af6:	0650      	lsls	r0, r2, #25
 8001af8:	d505      	bpl.n	8001b06 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001afa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001afe:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001b00:	4620      	mov	r0, r4
 8001b02:	f7ff ff85 	bl	8001a10 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001b06:	6823      	ldr	r3, [r4, #0]
 8001b08:	691a      	ldr	r2, [r3, #16]
 8001b0a:	0691      	lsls	r1, r2, #26
 8001b0c:	d522      	bpl.n	8001b54 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001b0e:	68da      	ldr	r2, [r3, #12]
 8001b10:	0692      	lsls	r2, r2, #26
 8001b12:	d51f      	bpl.n	8001b54 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001b14:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001b18:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001b1a:	611a      	str	r2, [r3, #16]
}
 8001b1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8001b20:	f000 b9bc 	b.w	8001e9c <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b24:	f7ff ff72 	bl	8001a0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b28:	4620      	mov	r0, r4
 8001b2a:	f001 fbdd 	bl	80032e8 <HAL_TIM_PWM_PulseFinishedCallback>
 8001b2e:	e783      	b.n	8001a38 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b30:	f7ff ff6c 	bl	8001a0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b34:	4620      	mov	r0, r4
 8001b36:	f001 fbd7 	bl	80032e8 <HAL_TIM_PWM_PulseFinishedCallback>
 8001b3a:	e792      	b.n	8001a62 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b3c:	f7ff ff66 	bl	8001a0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8001b40:	4620      	mov	r0, r4
 8001b42:	f001 fbd1 	bl	80032e8 <HAL_TIM_PWM_PulseFinishedCallback>
 8001b46:	e7a0      	b.n	8001a8a <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b48:	f7ff ff60 	bl	8001a0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b4c:	4620      	mov	r0, r4
 8001b4e:	f001 fbcb 	bl	80032e8 <HAL_TIM_PWM_PulseFinishedCallback>
 8001b52:	e7af      	b.n	8001ab4 <HAL_TIM_IRQHandler+0xa2>
 8001b54:	bd10      	pop	{r4, pc}
	...

08001b58 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001b58:	4a15      	ldr	r2, [pc, #84]	; (8001bb0 <TIM_Base_SetConfig+0x58>)
  tmpcr1 = TIMx->CR1;
 8001b5a:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001b5c:	4290      	cmp	r0, r2
{
 8001b5e:	b510      	push	{r4, lr}
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001b60:	d002      	beq.n	8001b68 <TIM_Base_SetConfig+0x10>
 8001b62:	4c14      	ldr	r4, [pc, #80]	; (8001bb4 <TIM_Base_SetConfig+0x5c>)
 8001b64:	42a0      	cmp	r0, r4
 8001b66:	d10e      	bne.n	8001b86 <TIM_Base_SetConfig+0x2e>
    tmpcr1 |= Structure->CounterMode;
 8001b68:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001b6e:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 8001b70:	ea43 0304 	orr.w	r3, r3, r4
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001b74:	d104      	bne.n	8001b80 <TIM_Base_SetConfig+0x28>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b76:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	e009      	b.n	8001b94 <TIM_Base_SetConfig+0x3c>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001b80:	4a0c      	ldr	r2, [pc, #48]	; (8001bb4 <TIM_Base_SetConfig+0x5c>)
 8001b82:	4290      	cmp	r0, r2
 8001b84:	d0f7      	beq.n	8001b76 <TIM_Base_SetConfig+0x1e>
 8001b86:	4a0c      	ldr	r2, [pc, #48]	; (8001bb8 <TIM_Base_SetConfig+0x60>)
 8001b88:	4290      	cmp	r0, r2
 8001b8a:	d0f4      	beq.n	8001b76 <TIM_Base_SetConfig+0x1e>
 8001b8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b90:	4290      	cmp	r0, r2
 8001b92:	d0f0      	beq.n	8001b76 <TIM_Base_SetConfig+0x1e>
  TIMx->CR1 = tmpcr1;
 8001b94:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b96:	688b      	ldr	r3, [r1, #8]
 8001b98:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001b9a:	680b      	ldr	r3, [r1, #0]
 8001b9c:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8001b9e:	4b04      	ldr	r3, [pc, #16]	; (8001bb0 <TIM_Base_SetConfig+0x58>)
 8001ba0:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8001ba2:	bf04      	itt	eq
 8001ba4:	690b      	ldreq	r3, [r1, #16]
 8001ba6:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	6143      	str	r3, [r0, #20]
}
 8001bac:	bd10      	pop	{r4, pc}
 8001bae:	bf00      	nop
 8001bb0:	40010000 	.word	0x40010000
 8001bb4:	40000c00 	.word	0x40000c00
 8001bb8:	40014000 	.word	0x40014000

08001bbc <HAL_TIM_Base_Init>:
{ 
 8001bbc:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001bbe:	4604      	mov	r4, r0
 8001bc0:	b1a0      	cbz	r0, 8001bec <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001bc2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001bc6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001bca:	b91b      	cbnz	r3, 8001bd4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001bcc:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8001bd0:	f001 fc24 	bl	800341c <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001bda:	6820      	ldr	r0, [r4, #0]
 8001bdc:	1d21      	adds	r1, r4, #4
 8001bde:	f7ff ffbb 	bl	8001b58 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001be2:	2301      	movs	r3, #1
 8001be4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8001be8:	2000      	movs	r0, #0
 8001bea:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001bec:	2001      	movs	r0, #1
}
 8001bee:	bd10      	pop	{r4, pc}

08001bf0 <HAL_TIM_PWM_Init>:
{
 8001bf0:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001bf2:	4604      	mov	r4, r0
 8001bf4:	b1a0      	cbz	r0, 8001c20 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001bf6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001bfa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001bfe:	b91b      	cbnz	r3, 8001c08 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001c00:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 8001c04:	f001 fbec 	bl	80033e0 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 8001c08:	2302      	movs	r3, #2
 8001c0a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001c0e:	6820      	ldr	r0, [r4, #0]
 8001c10:	1d21      	adds	r1, r4, #4
 8001c12:	f7ff ffa1 	bl	8001b58 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001c16:	2301      	movs	r3, #1
 8001c18:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8001c1c:	2000      	movs	r0, #0
 8001c1e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001c20:	2001      	movs	r0, #1
}  
 8001c22:	bd10      	pop	{r4, pc}

08001c24 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c24:	6a03      	ldr	r3, [r0, #32]
 8001c26:	f023 0310 	bic.w	r3, r3, #16
 8001c2a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001c2c:	6a03      	ldr	r3, [r0, #32]
{
 8001c2e:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 = TIMx->CR2;
 8001c30:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001c32:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c34:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001c36:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c3a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001c3e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001c40:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001c44:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001c48:	4d0b      	ldr	r5, [pc, #44]	; (8001c78 <TIM_OC2_SetConfig+0x54>)
 8001c4a:	42a8      	cmp	r0, r5
 8001c4c:	d10d      	bne.n	8001c6a <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001c4e:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001c50:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001c52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001c56:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001c5a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001c5c:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001c60:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8001c62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001c66:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8001c6a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001c6c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001c6e:	684a      	ldr	r2, [r1, #4]
 8001c70:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001c72:	6203      	str	r3, [r0, #32]
 8001c74:	bd70      	pop	{r4, r5, r6, pc}
 8001c76:	bf00      	nop
 8001c78:	40010000 	.word	0x40010000

08001c7c <HAL_TIM_PWM_ConfigChannel>:
{
 8001c7c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001c7e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001c82:	2b01      	cmp	r3, #1
{
 8001c84:	4604      	mov	r4, r0
 8001c86:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001c8a:	d025      	beq.n	8001cd8 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8001c92:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  switch (Channel)
 8001c96:	2a0c      	cmp	r2, #12
 8001c98:	d818      	bhi.n	8001ccc <HAL_TIM_PWM_ConfigChannel+0x50>
 8001c9a:	e8df f002 	tbb	[pc, r2]
 8001c9e:	1707      	.short	0x1707
 8001ca0:	171e1717 	.word	0x171e1717
 8001ca4:	172f1717 	.word	0x172f1717
 8001ca8:	1717      	.short	0x1717
 8001caa:	40          	.byte	0x40
 8001cab:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001cac:	6820      	ldr	r0, [r4, #0]
 8001cae:	f7ff fe2d 	bl	800190c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001cb2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001cb4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001cb6:	699a      	ldr	r2, [r3, #24]
 8001cb8:	f042 0208 	orr.w	r2, r2, #8
 8001cbc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001cbe:	699a      	ldr	r2, [r3, #24]
 8001cc0:	f022 0204 	bic.w	r2, r2, #4
 8001cc4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001cc6:	699a      	ldr	r2, [r3, #24]
 8001cc8:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001cca:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001ccc:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001cce:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001cd0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8001cd4:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8001cd8:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001cda:	6820      	ldr	r0, [r4, #0]
 8001cdc:	f7ff ffa2 	bl	8001c24 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001ce0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001ce2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001ce4:	699a      	ldr	r2, [r3, #24]
 8001ce6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001cec:	699a      	ldr	r2, [r3, #24]
 8001cee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001cf4:	699a      	ldr	r2, [r3, #24]
 8001cf6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001cfa:	e7e6      	b.n	8001cca <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001cfc:	6820      	ldr	r0, [r4, #0]
 8001cfe:	f7ff fe2d 	bl	800195c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001d02:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8001d04:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001d06:	69da      	ldr	r2, [r3, #28]
 8001d08:	f042 0208 	orr.w	r2, r2, #8
 8001d0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001d0e:	69da      	ldr	r2, [r3, #28]
 8001d10:	f022 0204 	bic.w	r2, r2, #4
 8001d14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8001d16:	69da      	ldr	r2, [r3, #28]
 8001d18:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001d1a:	61da      	str	r2, [r3, #28]
    break;
 8001d1c:	e7d6      	b.n	8001ccc <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001d1e:	6820      	ldr	r0, [r4, #0]
 8001d20:	f7ff fe46 	bl	80019b0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001d24:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001d26:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001d28:	69da      	ldr	r2, [r3, #28]
 8001d2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d2e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001d30:	69da      	ldr	r2, [r3, #28]
 8001d32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d36:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001d38:	69da      	ldr	r2, [r3, #28]
 8001d3a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001d3e:	e7ec      	b.n	8001d1a <HAL_TIM_PWM_ConfigChannel+0x9e>

08001d40 <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 8001d40:	6a03      	ldr	r3, [r0, #32]
{
 8001d42:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 8001d44:	2401      	movs	r4, #1
 8001d46:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001d48:	ea23 0304 	bic.w	r3, r3, r4
 8001d4c:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001d4e:	6a03      	ldr	r3, [r0, #32]
 8001d50:	408a      	lsls	r2, r1
 8001d52:	431a      	orrs	r2, r3
 8001d54:	6202      	str	r2, [r0, #32]
 8001d56:	bd10      	pop	{r4, pc}

08001d58 <HAL_TIM_PWM_Start_IT>:
{
 8001d58:	b510      	push	{r4, lr}
 8001d5a:	4604      	mov	r4, r0
  switch (Channel)
 8001d5c:	290c      	cmp	r1, #12
 8001d5e:	d80d      	bhi.n	8001d7c <HAL_TIM_PWM_Start_IT+0x24>
 8001d60:	e8df f001 	tbb	[pc, r1]
 8001d64:	0c0c0c07 	.word	0x0c0c0c07
 8001d68:	0c0c0c1e 	.word	0x0c0c0c1e
 8001d6c:	0c0c0c23 	.word	0x0c0c0c23
 8001d70:	28          	.byte	0x28
 8001d71:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001d72:	6802      	ldr	r2, [r0, #0]
 8001d74:	68d3      	ldr	r3, [r2, #12]
 8001d76:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001d7a:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001d7c:	6820      	ldr	r0, [r4, #0]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f7ff ffde 	bl	8001d40 <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8001d84:	6823      	ldr	r3, [r4, #0]
 8001d86:	4a0e      	ldr	r2, [pc, #56]	; (8001dc0 <HAL_TIM_PWM_Start_IT+0x68>)
 8001d88:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 8001d8a:	bf02      	ittt	eq
 8001d8c:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8001d8e:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8001d92:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	f042 0201 	orr.w	r2, r2, #1
 8001d9a:	601a      	str	r2, [r3, #0]
} 
 8001d9c:	2000      	movs	r0, #0
 8001d9e:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001da0:	6802      	ldr	r2, [r0, #0]
 8001da2:	68d3      	ldr	r3, [r2, #12]
 8001da4:	f043 0304 	orr.w	r3, r3, #4
 8001da8:	e7e7      	b.n	8001d7a <HAL_TIM_PWM_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001daa:	6802      	ldr	r2, [r0, #0]
 8001dac:	68d3      	ldr	r3, [r2, #12]
 8001dae:	f043 0308 	orr.w	r3, r3, #8
 8001db2:	e7e2      	b.n	8001d7a <HAL_TIM_PWM_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001db4:	6802      	ldr	r2, [r0, #0]
 8001db6:	68d3      	ldr	r3, [r2, #12]
 8001db8:	f043 0310 	orr.w	r3, r3, #16
 8001dbc:	e7dd      	b.n	8001d7a <HAL_TIM_PWM_Start_IT+0x22>
 8001dbe:	bf00      	nop
 8001dc0:	40010000 	.word	0x40010000

08001dc4 <HAL_TIM_PWM_Stop_IT>:
{
 8001dc4:	b510      	push	{r4, lr}
 8001dc6:	4604      	mov	r4, r0
  switch (Channel)
 8001dc8:	290c      	cmp	r1, #12
 8001dca:	d80d      	bhi.n	8001de8 <HAL_TIM_PWM_Stop_IT+0x24>
 8001dcc:	e8df f001 	tbb	[pc, r1]
 8001dd0:	0c0c0c07 	.word	0x0c0c0c07
 8001dd4:	0c0c0c32 	.word	0x0c0c0c32
 8001dd8:	0c0c0c37 	.word	0x0c0c0c37
 8001ddc:	3c          	.byte	0x3c
 8001ddd:	00          	.byte	0x00
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8001dde:	6802      	ldr	r2, [r0, #0]
 8001de0:	68d3      	ldr	r3, [r2, #12]
 8001de2:	f023 0302 	bic.w	r3, r3, #2
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8001de6:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001de8:	2200      	movs	r2, #0
 8001dea:	6820      	ldr	r0, [r4, #0]
 8001dec:	f7ff ffa8 	bl	8001d40 <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8001df0:	6823      	ldr	r3, [r4, #0]
 8001df2:	4a18      	ldr	r2, [pc, #96]	; (8001e54 <HAL_TIM_PWM_Stop_IT+0x90>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d10d      	bne.n	8001e14 <HAL_TIM_PWM_Stop_IT+0x50>
    __HAL_TIM_MOE_DISABLE(htim);
 8001df8:	6a19      	ldr	r1, [r3, #32]
 8001dfa:	f241 1211 	movw	r2, #4369	; 0x1111
 8001dfe:	4211      	tst	r1, r2
 8001e00:	d108      	bne.n	8001e14 <HAL_TIM_PWM_Stop_IT+0x50>
 8001e02:	6a19      	ldr	r1, [r3, #32]
 8001e04:	f240 4244 	movw	r2, #1092	; 0x444
 8001e08:	4211      	tst	r1, r2
 8001e0a:	bf02      	ittt	eq
 8001e0c:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8001e0e:	f422 4200 	biceq.w	r2, r2, #32768	; 0x8000
 8001e12:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 8001e14:	6a19      	ldr	r1, [r3, #32]
 8001e16:	f241 1211 	movw	r2, #4369	; 0x1111
 8001e1a:	4211      	tst	r1, r2
 8001e1c:	d108      	bne.n	8001e30 <HAL_TIM_PWM_Stop_IT+0x6c>
 8001e1e:	6a19      	ldr	r1, [r3, #32]
 8001e20:	f240 4244 	movw	r2, #1092	; 0x444
 8001e24:	4211      	tst	r1, r2
 8001e26:	bf02      	ittt	eq
 8001e28:	681a      	ldreq	r2, [r3, #0]
 8001e2a:	f022 0201 	biceq.w	r2, r2, #1
 8001e2e:	601a      	streq	r2, [r3, #0]
} 
 8001e30:	2000      	movs	r0, #0
 8001e32:	bd10      	pop	{r4, pc}
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8001e34:	6802      	ldr	r2, [r0, #0]
 8001e36:	68d3      	ldr	r3, [r2, #12]
 8001e38:	f023 0304 	bic.w	r3, r3, #4
 8001e3c:	e7d3      	b.n	8001de6 <HAL_TIM_PWM_Stop_IT+0x22>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8001e3e:	6802      	ldr	r2, [r0, #0]
 8001e40:	68d3      	ldr	r3, [r2, #12]
 8001e42:	f023 0308 	bic.w	r3, r3, #8
 8001e46:	e7ce      	b.n	8001de6 <HAL_TIM_PWM_Stop_IT+0x22>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8001e48:	6802      	ldr	r2, [r0, #0]
 8001e4a:	68d3      	ldr	r3, [r2, #12]
 8001e4c:	f023 0310 	bic.w	r3, r3, #16
 8001e50:	e7c9      	b.n	8001de6 <HAL_TIM_PWM_Stop_IT+0x22>
 8001e52:	bf00      	nop
 8001e54:	40010000 	.word	0x40010000

08001e58 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8001e58:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001e5c:	2b01      	cmp	r3, #1
{
 8001e5e:	b510      	push	{r4, lr}
 8001e60:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001e64:	d018      	beq.n	8001e98 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8001e66:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001e6a:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8001e6c:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001e6e:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001e70:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001e72:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001e76:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8001e78:	685a      	ldr	r2, [r3, #4]
 8001e7a:	4322      	orrs	r2, r4
 8001e7c:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e84:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001e86:	689a      	ldr	r2, [r3, #8]
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8001e92:	2300      	movs	r3, #0
 8001e94:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8001e98:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 8001e9a:	bd10      	pop	{r4, pc}

08001e9c <HAL_TIMEx_CommutationCallback>:
 8001e9c:	4770      	bx	lr

08001e9e <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e9e:	4770      	bx	lr

08001ea0 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001ea0:	6803      	ldr	r3, [r0, #0]
 8001ea2:	68da      	ldr	r2, [r3, #12]
 8001ea4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001ea8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001eaa:	695a      	ldr	r2, [r3, #20]
 8001eac:	f022 0201 	bic.w	r2, r2, #1
 8001eb0:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001eb2:	2320      	movs	r3, #32
 8001eb4:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8001eb8:	4770      	bx	lr
	...

08001ebc <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8001ec0:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001ec2:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8001ec4:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001ec6:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001ec8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001ecc:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8001ece:	6133      	str	r3, [r6, #16]
{
 8001ed0:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001ed2:	6883      	ldr	r3, [r0, #8]
 8001ed4:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 8001ed6:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001ed8:	4303      	orrs	r3, r0
 8001eda:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001edc:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001ee0:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001ee2:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001ee6:	430b      	orrs	r3, r1
 8001ee8:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001eea:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001eec:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001eee:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8001ef0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8001ef4:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ef6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8001efa:	6173      	str	r3, [r6, #20]
 8001efc:	4b7a      	ldr	r3, [pc, #488]	; (80020e8 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001efe:	d17c      	bne.n	8001ffa <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f00:	429e      	cmp	r6, r3
 8001f02:	d003      	beq.n	8001f0c <UART_SetConfig+0x50>
 8001f04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f08:	429e      	cmp	r6, r3
 8001f0a:	d144      	bne.n	8001f96 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001f0c:	f7ff fb6a 	bl	80015e4 <HAL_RCC_GetPCLK2Freq>
 8001f10:	2519      	movs	r5, #25
 8001f12:	fb05 f300 	mul.w	r3, r5, r0
 8001f16:	6860      	ldr	r0, [r4, #4]
 8001f18:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001f1c:	0040      	lsls	r0, r0, #1
 8001f1e:	fbb3 f3f0 	udiv	r3, r3, r0
 8001f22:	fbb3 f3f9 	udiv	r3, r3, r9
 8001f26:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001f2a:	f7ff fb5b 	bl	80015e4 <HAL_RCC_GetPCLK2Freq>
 8001f2e:	6863      	ldr	r3, [r4, #4]
 8001f30:	4368      	muls	r0, r5
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	fbb0 f7f3 	udiv	r7, r0, r3
 8001f38:	f7ff fb54 	bl	80015e4 <HAL_RCC_GetPCLK2Freq>
 8001f3c:	6863      	ldr	r3, [r4, #4]
 8001f3e:	4368      	muls	r0, r5
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f46:	fbb3 f3f9 	udiv	r3, r3, r9
 8001f4a:	fb09 7313 	mls	r3, r9, r3, r7
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	3332      	adds	r3, #50	; 0x32
 8001f52:	fbb3 f3f9 	udiv	r3, r3, r9
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001f5c:	f7ff fb42 	bl	80015e4 <HAL_RCC_GetPCLK2Freq>
 8001f60:	6862      	ldr	r2, [r4, #4]
 8001f62:	4368      	muls	r0, r5
 8001f64:	0052      	lsls	r2, r2, #1
 8001f66:	fbb0 faf2 	udiv	sl, r0, r2
 8001f6a:	f7ff fb3b 	bl	80015e4 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001f6e:	6863      	ldr	r3, [r4, #4]
 8001f70:	4368      	muls	r0, r5
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f78:	fbb3 f3f9 	udiv	r3, r3, r9
 8001f7c:	fb09 a313 	mls	r3, r9, r3, sl
 8001f80:	00db      	lsls	r3, r3, #3
 8001f82:	3332      	adds	r3, #50	; 0x32
 8001f84:	fbb3 f3f9 	udiv	r3, r3, r9
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001f8e:	443b      	add	r3, r7
 8001f90:	60b3      	str	r3, [r6, #8]
 8001f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001f96:	f7ff fb15 	bl	80015c4 <HAL_RCC_GetPCLK1Freq>
 8001f9a:	2519      	movs	r5, #25
 8001f9c:	fb05 f300 	mul.w	r3, r5, r0
 8001fa0:	6860      	ldr	r0, [r4, #4]
 8001fa2:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001fa6:	0040      	lsls	r0, r0, #1
 8001fa8:	fbb3 f3f0 	udiv	r3, r3, r0
 8001fac:	fbb3 f3f9 	udiv	r3, r3, r9
 8001fb0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001fb4:	f7ff fb06 	bl	80015c4 <HAL_RCC_GetPCLK1Freq>
 8001fb8:	6863      	ldr	r3, [r4, #4]
 8001fba:	4368      	muls	r0, r5
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	fbb0 f7f3 	udiv	r7, r0, r3
 8001fc2:	f7ff faff 	bl	80015c4 <HAL_RCC_GetPCLK1Freq>
 8001fc6:	6863      	ldr	r3, [r4, #4]
 8001fc8:	4368      	muls	r0, r5
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fd0:	fbb3 f3f9 	udiv	r3, r3, r9
 8001fd4:	fb09 7313 	mls	r3, r9, r3, r7
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	3332      	adds	r3, #50	; 0x32
 8001fdc:	fbb3 f3f9 	udiv	r3, r3, r9
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001fe6:	f7ff faed 	bl	80015c4 <HAL_RCC_GetPCLK1Freq>
 8001fea:	6862      	ldr	r2, [r4, #4]
 8001fec:	4368      	muls	r0, r5
 8001fee:	0052      	lsls	r2, r2, #1
 8001ff0:	fbb0 faf2 	udiv	sl, r0, r2
 8001ff4:	f7ff fae6 	bl	80015c4 <HAL_RCC_GetPCLK1Freq>
 8001ff8:	e7b9      	b.n	8001f6e <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001ffa:	429e      	cmp	r6, r3
 8001ffc:	d002      	beq.n	8002004 <UART_SetConfig+0x148>
 8001ffe:	4b3b      	ldr	r3, [pc, #236]	; (80020ec <UART_SetConfig+0x230>)
 8002000:	429e      	cmp	r6, r3
 8002002:	d140      	bne.n	8002086 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002004:	f7ff faee 	bl	80015e4 <HAL_RCC_GetPCLK2Freq>
 8002008:	6867      	ldr	r7, [r4, #4]
 800200a:	2519      	movs	r5, #25
 800200c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002010:	fb05 f300 	mul.w	r3, r5, r0
 8002014:	00bf      	lsls	r7, r7, #2
 8002016:	fbb3 f3f7 	udiv	r3, r3, r7
 800201a:	fbb3 f3f9 	udiv	r3, r3, r9
 800201e:	011f      	lsls	r7, r3, #4
 8002020:	f7ff fae0 	bl	80015e4 <HAL_RCC_GetPCLK2Freq>
 8002024:	6863      	ldr	r3, [r4, #4]
 8002026:	4368      	muls	r0, r5
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	fbb0 f8f3 	udiv	r8, r0, r3
 800202e:	f7ff fad9 	bl	80015e4 <HAL_RCC_GetPCLK2Freq>
 8002032:	6863      	ldr	r3, [r4, #4]
 8002034:	4368      	muls	r0, r5
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	fbb0 f3f3 	udiv	r3, r0, r3
 800203c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002040:	fb09 8313 	mls	r3, r9, r3, r8
 8002044:	011b      	lsls	r3, r3, #4
 8002046:	3332      	adds	r3, #50	; 0x32
 8002048:	fbb3 f3f9 	udiv	r3, r3, r9
 800204c:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8002050:	f7ff fac8 	bl	80015e4 <HAL_RCC_GetPCLK2Freq>
 8002054:	6862      	ldr	r2, [r4, #4]
 8002056:	4368      	muls	r0, r5
 8002058:	0092      	lsls	r2, r2, #2
 800205a:	fbb0 faf2 	udiv	sl, r0, r2
 800205e:	f7ff fac1 	bl	80015e4 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002062:	6863      	ldr	r3, [r4, #4]
 8002064:	4368      	muls	r0, r5
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	fbb0 f3f3 	udiv	r3, r0, r3
 800206c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002070:	fb09 a313 	mls	r3, r9, r3, sl
 8002074:	011b      	lsls	r3, r3, #4
 8002076:	3332      	adds	r3, #50	; 0x32
 8002078:	fbb3 f3f9 	udiv	r3, r3, r9
 800207c:	f003 030f 	and.w	r3, r3, #15
 8002080:	ea43 0308 	orr.w	r3, r3, r8
 8002084:	e783      	b.n	8001f8e <UART_SetConfig+0xd2>
 8002086:	f7ff fa9d 	bl	80015c4 <HAL_RCC_GetPCLK1Freq>
 800208a:	6867      	ldr	r7, [r4, #4]
 800208c:	2519      	movs	r5, #25
 800208e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002092:	fb05 f300 	mul.w	r3, r5, r0
 8002096:	00bf      	lsls	r7, r7, #2
 8002098:	fbb3 f3f7 	udiv	r3, r3, r7
 800209c:	fbb3 f3f9 	udiv	r3, r3, r9
 80020a0:	011f      	lsls	r7, r3, #4
 80020a2:	f7ff fa8f 	bl	80015c4 <HAL_RCC_GetPCLK1Freq>
 80020a6:	6863      	ldr	r3, [r4, #4]
 80020a8:	4368      	muls	r0, r5
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	fbb0 f8f3 	udiv	r8, r0, r3
 80020b0:	f7ff fa88 	bl	80015c4 <HAL_RCC_GetPCLK1Freq>
 80020b4:	6863      	ldr	r3, [r4, #4]
 80020b6:	4368      	muls	r0, r5
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80020be:	fbb3 f3f9 	udiv	r3, r3, r9
 80020c2:	fb09 8313 	mls	r3, r9, r3, r8
 80020c6:	011b      	lsls	r3, r3, #4
 80020c8:	3332      	adds	r3, #50	; 0x32
 80020ca:	fbb3 f3f9 	udiv	r3, r3, r9
 80020ce:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80020d2:	f7ff fa77 	bl	80015c4 <HAL_RCC_GetPCLK1Freq>
 80020d6:	6862      	ldr	r2, [r4, #4]
 80020d8:	4368      	muls	r0, r5
 80020da:	0092      	lsls	r2, r2, #2
 80020dc:	fbb0 faf2 	udiv	sl, r0, r2
 80020e0:	f7ff fa70 	bl	80015c4 <HAL_RCC_GetPCLK1Freq>
 80020e4:	e7bd      	b.n	8002062 <UART_SetConfig+0x1a6>
 80020e6:	bf00      	nop
 80020e8:	40011000 	.word	0x40011000
 80020ec:	40011400 	.word	0x40011400

080020f0 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80020f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020f2:	4604      	mov	r4, r0
 80020f4:	460e      	mov	r6, r1
 80020f6:	4617      	mov	r7, r2
 80020f8:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80020fa:	6821      	ldr	r1, [r4, #0]
 80020fc:	680b      	ldr	r3, [r1, #0]
 80020fe:	ea36 0303 	bics.w	r3, r6, r3
 8002102:	d101      	bne.n	8002108 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8002104:	2000      	movs	r0, #0
}
 8002106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8002108:	1c6b      	adds	r3, r5, #1
 800210a:	d0f7      	beq.n	80020fc <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800210c:	b995      	cbnz	r5, 8002134 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800210e:	6823      	ldr	r3, [r4, #0]
 8002110:	68da      	ldr	r2, [r3, #12]
 8002112:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002116:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002118:	695a      	ldr	r2, [r3, #20]
 800211a:	f022 0201 	bic.w	r2, r2, #1
 800211e:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8002120:	2320      	movs	r3, #32
 8002122:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002126:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800212a:	2300      	movs	r3, #0
 800212c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8002130:	2003      	movs	r0, #3
 8002132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002134:	f7fe fe24 	bl	8000d80 <HAL_GetTick>
 8002138:	1bc0      	subs	r0, r0, r7
 800213a:	4285      	cmp	r5, r0
 800213c:	d2dd      	bcs.n	80020fa <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 800213e:	e7e6      	b.n	800210e <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08002140 <HAL_UART_Init>:
{
 8002140:	b510      	push	{r4, lr}
  if(huart == NULL)
 8002142:	4604      	mov	r4, r0
 8002144:	b340      	cbz	r0, 8002198 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8002146:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800214a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800214e:	b91b      	cbnz	r3, 8002158 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002150:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002154:	f001 fa18 	bl	8003588 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002158:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800215a:	2324      	movs	r3, #36	; 0x24
 800215c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002160:	68d3      	ldr	r3, [r2, #12]
 8002162:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002166:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002168:	4620      	mov	r0, r4
 800216a:	f7ff fea7 	bl	8001ebc <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800216e:	6823      	ldr	r3, [r4, #0]
 8002170:	691a      	ldr	r2, [r3, #16]
 8002172:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002176:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002178:	695a      	ldr	r2, [r3, #20]
 800217a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800217e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002180:	68da      	ldr	r2, [r3, #12]
 8002182:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002186:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002188:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 800218a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800218c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800218e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8002192:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8002196:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002198:	2001      	movs	r0, #1
}
 800219a:	bd10      	pop	{r4, pc}

0800219c <HAL_UART_Transmit>:
{
 800219c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021a0:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 80021a2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80021a6:	2b20      	cmp	r3, #32
{
 80021a8:	4604      	mov	r4, r0
 80021aa:	460d      	mov	r5, r1
 80021ac:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY) 
 80021ae:	d14f      	bne.n	8002250 <HAL_UART_Transmit+0xb4>
    if((pData == NULL ) || (Size == 0)) 
 80021b0:	2900      	cmp	r1, #0
 80021b2:	d04a      	beq.n	800224a <HAL_UART_Transmit+0xae>
 80021b4:	2a00      	cmp	r2, #0
 80021b6:	d048      	beq.n	800224a <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 80021b8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d047      	beq.n	8002250 <HAL_UART_Transmit+0xb4>
 80021c0:	2301      	movs	r3, #1
 80021c2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021c6:	2300      	movs	r3, #0
 80021c8:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021ca:	2321      	movs	r3, #33	; 0x21
 80021cc:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80021d0:	f7fe fdd6 	bl	8000d80 <HAL_GetTick>
    huart->TxXferSize = Size;
 80021d4:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 80021d8:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80021da:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80021de:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	b96b      	cbnz	r3, 8002200 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021e4:	463b      	mov	r3, r7
 80021e6:	4632      	mov	r2, r6
 80021e8:	2140      	movs	r1, #64	; 0x40
 80021ea:	4620      	mov	r0, r4
 80021ec:	f7ff ff80 	bl	80020f0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80021f0:	b9b0      	cbnz	r0, 8002220 <HAL_UART_Transmit+0x84>
      huart->gState = HAL_UART_STATE_READY;
 80021f2:	2320      	movs	r3, #32
 80021f4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 80021f8:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 80021fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8002200:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002202:	3b01      	subs	r3, #1
 8002204:	b29b      	uxth	r3, r3
 8002206:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002208:	68a3      	ldr	r3, [r4, #8]
 800220a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800220e:	4632      	mov	r2, r6
 8002210:	463b      	mov	r3, r7
 8002212:	f04f 0180 	mov.w	r1, #128	; 0x80
 8002216:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002218:	d10e      	bne.n	8002238 <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800221a:	f7ff ff69 	bl	80020f0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800221e:	b110      	cbz	r0, 8002226 <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8002220:	2003      	movs	r0, #3
 8002222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002226:	882b      	ldrh	r3, [r5, #0]
 8002228:	6822      	ldr	r2, [r4, #0]
 800222a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800222e:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002230:	6923      	ldr	r3, [r4, #16]
 8002232:	b943      	cbnz	r3, 8002246 <HAL_UART_Transmit+0xaa>
          pData +=2U;
 8002234:	3502      	adds	r5, #2
 8002236:	e7d2      	b.n	80021de <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002238:	f7ff ff5a 	bl	80020f0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800223c:	2800      	cmp	r0, #0
 800223e:	d1ef      	bne.n	8002220 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002240:	6823      	ldr	r3, [r4, #0]
 8002242:	782a      	ldrb	r2, [r5, #0]
 8002244:	605a      	str	r2, [r3, #4]
 8002246:	3501      	adds	r5, #1
 8002248:	e7c9      	b.n	80021de <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 800224a:	2001      	movs	r0, #1
 800224c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8002250:	2002      	movs	r0, #2
}
 8002252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002256 <HAL_UART_Transmit_IT>:
  if(huart->gState == HAL_UART_STATE_READY)
 8002256:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800225a:	2b20      	cmp	r3, #32
 800225c:	d118      	bne.n	8002290 <HAL_UART_Transmit_IT+0x3a>
    if((pData == NULL ) || (Size == 0)) 
 800225e:	b1a9      	cbz	r1, 800228c <HAL_UART_Transmit_IT+0x36>
 8002260:	b1a2      	cbz	r2, 800228c <HAL_UART_Transmit_IT+0x36>
    __HAL_LOCK(huart);
 8002262:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002266:	2b01      	cmp	r3, #1
 8002268:	d012      	beq.n	8002290 <HAL_UART_Transmit_IT+0x3a>
    huart->TxXferCount = Size;
 800226a:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->pTxBuffPtr = pData;
 800226c:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 800226e:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002270:	2300      	movs	r3, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002272:	6801      	ldr	r1, [r0, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002274:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002276:	2221      	movs	r2, #33	; 0x21
 8002278:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800227c:	68ca      	ldr	r2, [r1, #12]
    __HAL_UNLOCK(huart);
 800227e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002282:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002286:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 8002288:	4618      	mov	r0, r3
 800228a:	4770      	bx	lr
      return HAL_ERROR;
 800228c:	2001      	movs	r0, #1
 800228e:	4770      	bx	lr
    return HAL_BUSY;   
 8002290:	2002      	movs	r0, #2
}
 8002292:	4770      	bx	lr

08002294 <HAL_UART_Receive_DMA>:
{  
 8002294:	4613      	mov	r3, r2
  if(huart->RxState == HAL_UART_STATE_READY) 
 8002296:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
 800229a:	2a20      	cmp	r2, #32
{  
 800229c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800229e:	4605      	mov	r5, r0
  if(huart->RxState == HAL_UART_STATE_READY) 
 80022a0:	d138      	bne.n	8002314 <HAL_UART_Receive_DMA+0x80>
    if((pData == NULL ) || (Size == 0)) 
 80022a2:	2900      	cmp	r1, #0
 80022a4:	d034      	beq.n	8002310 <HAL_UART_Receive_DMA+0x7c>
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d032      	beq.n	8002310 <HAL_UART_Receive_DMA+0x7c>
    __HAL_LOCK(huart);
 80022aa:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 80022ae:	2a01      	cmp	r2, #1
 80022b0:	d030      	beq.n	8002314 <HAL_UART_Receive_DMA+0x80>
 80022b2:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022b4:	2400      	movs	r4, #0
    __HAL_LOCK(huart);
 80022b6:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80022ba:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022bc:	63c4      	str	r4, [r0, #60]	; 0x3c
    huart->pRxBuffPtr = pData;
 80022be:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 80022c0:	8583      	strh	r3, [r0, #44]	; 0x2c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80022c2:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80022c6:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80022c8:	4a13      	ldr	r2, [pc, #76]	; (8002318 <HAL_UART_Receive_DMA+0x84>)
 80022ca:	63c2      	str	r2, [r0, #60]	; 0x3c
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 80022cc:	682e      	ldr	r6, [r5, #0]
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80022ce:	4a13      	ldr	r2, [pc, #76]	; (800231c <HAL_UART_Receive_DMA+0x88>)
 80022d0:	6402      	str	r2, [r0, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80022d2:	4a13      	ldr	r2, [pc, #76]	; (8002320 <HAL_UART_Receive_DMA+0x8c>)
 80022d4:	64c2      	str	r2, [r0, #76]	; 0x4c
    huart->hdmarx->XferAbortCallback = NULL;
 80022d6:	6504      	str	r4, [r0, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 80022d8:	460a      	mov	r2, r1
 80022da:	1d31      	adds	r1, r6, #4
 80022dc:	f7fe fe60 	bl	8000fa0 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_OREFLAG(huart);
 80022e0:	682b      	ldr	r3, [r5, #0]
 80022e2:	9401      	str	r4, [sp, #4]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	9201      	str	r2, [sp, #4]
 80022e8:	685a      	ldr	r2, [r3, #4]
 80022ea:	9201      	str	r2, [sp, #4]
 80022ec:	9a01      	ldr	r2, [sp, #4]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80022ee:	68da      	ldr	r2, [r3, #12]
    __HAL_UNLOCK(huart);
 80022f0:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80022f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022f8:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022fa:	695a      	ldr	r2, [r3, #20]
 80022fc:	f042 0201 	orr.w	r2, r2, #1
 8002300:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002302:	695a      	ldr	r2, [r3, #20]
 8002304:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002308:	615a      	str	r2, [r3, #20]
    return HAL_OK;
 800230a:	4620      	mov	r0, r4
}
 800230c:	b002      	add	sp, #8
 800230e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002310:	2001      	movs	r0, #1
 8002312:	e7fb      	b.n	800230c <HAL_UART_Receive_DMA+0x78>
    return HAL_BUSY; 
 8002314:	2002      	movs	r0, #2
 8002316:	e7f9      	b.n	800230c <HAL_UART_Receive_DMA+0x78>
 8002318:	08002329 	.word	0x08002329
 800231c:	080023d7 	.word	0x080023d7
 8002320:	080023e3 	.word	0x080023e3

08002324 <HAL_UART_TxCpltCallback>:
 8002324:	4770      	bx	lr

08002326 <HAL_UART_RxCpltCallback>:
 8002326:	4770      	bx	lr

08002328 <UART_DMAReceiveCplt>:
{
 8002328:	b508      	push	{r3, lr}
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800232a:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800232c:	6b82      	ldr	r2, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8002334:	d110      	bne.n	8002358 <UART_DMAReceiveCplt+0x30>
    huart->RxXferCount = 0U;
 8002336:	85d3      	strh	r3, [r2, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002338:	6813      	ldr	r3, [r2, #0]
 800233a:	68d9      	ldr	r1, [r3, #12]
 800233c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8002340:	60d9      	str	r1, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002342:	6959      	ldr	r1, [r3, #20]
 8002344:	f021 0101 	bic.w	r1, r1, #1
 8002348:	6159      	str	r1, [r3, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800234a:	6959      	ldr	r1, [r3, #20]
 800234c:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8002350:	6159      	str	r1, [r3, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8002352:	2320      	movs	r3, #32
 8002354:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 8002358:	4610      	mov	r0, r2
 800235a:	f7ff ffe4 	bl	8002326 <HAL_UART_RxCpltCallback>
 800235e:	bd08      	pop	{r3, pc}

08002360 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8002360:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8002364:	2b22      	cmp	r3, #34	; 0x22
{
 8002366:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8002368:	d132      	bne.n	80023d0 <UART_Receive_IT+0x70>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800236a:	6883      	ldr	r3, [r0, #8]
 800236c:	6901      	ldr	r1, [r0, #16]
 800236e:	6802      	ldr	r2, [r0, #0]
 8002370:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002374:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002376:	d11f      	bne.n	80023b8 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002378:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800237a:	b9c9      	cbnz	r1, 80023b0 <UART_Receive_IT+0x50>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800237c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002380:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8002384:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 8002386:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8002388:	3c01      	subs	r4, #1
 800238a:	b2a4      	uxth	r4, r4
 800238c:	85c4      	strh	r4, [r0, #46]	; 0x2e
 800238e:	b96c      	cbnz	r4, 80023ac <UART_Receive_IT+0x4c>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002390:	6803      	ldr	r3, [r0, #0]
 8002392:	68da      	ldr	r2, [r3, #12]
 8002394:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002398:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800239a:	695a      	ldr	r2, [r3, #20]
 800239c:	f022 0201 	bic.w	r2, r2, #1
 80023a0:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80023a2:	2320      	movs	r3, #32
 80023a4:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80023a8:	f7ff ffbd 	bl	8002326 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 80023ac:	2000      	movs	r0, #0
}
 80023ae:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80023b0:	b2d2      	uxtb	r2, r2
 80023b2:	f823 2b01 	strh.w	r2, [r3], #1
 80023b6:	e7e5      	b.n	8002384 <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 80023b8:	b921      	cbnz	r1, 80023c4 <UART_Receive_IT+0x64>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80023ba:	1c59      	adds	r1, r3, #1
 80023bc:	6852      	ldr	r2, [r2, #4]
 80023be:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80023c0:	701a      	strb	r2, [r3, #0]
 80023c2:	e7e0      	b.n	8002386 <UART_Receive_IT+0x26>
 80023c4:	6852      	ldr	r2, [r2, #4]
 80023c6:	1c59      	adds	r1, r3, #1
 80023c8:	6281      	str	r1, [r0, #40]	; 0x28
 80023ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80023ce:	e7f7      	b.n	80023c0 <UART_Receive_IT+0x60>
    return HAL_BUSY;
 80023d0:	2002      	movs	r0, #2
 80023d2:	bd10      	pop	{r4, pc}

080023d4 <HAL_UART_RxHalfCpltCallback>:
 80023d4:	4770      	bx	lr

080023d6 <UART_DMARxHalfCplt>:
{
 80023d6:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart); 
 80023d8:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80023da:	f7ff fffb 	bl	80023d4 <HAL_UART_RxHalfCpltCallback>
 80023de:	bd08      	pop	{r3, pc}

080023e0 <HAL_UART_ErrorCallback>:
 80023e0:	4770      	bx	lr

080023e2 <UART_DMAError>:
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023e2:	6b81      	ldr	r1, [r0, #56]	; 0x38
{
 80023e4:	b508      	push	{r3, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80023e6:	680b      	ldr	r3, [r1, #0]
 80023e8:	695a      	ldr	r2, [r3, #20]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80023ea:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 80023ee:	2821      	cmp	r0, #33	; 0x21
 80023f0:	d10a      	bne.n	8002408 <UART_DMAError+0x26>
 80023f2:	0612      	lsls	r2, r2, #24
 80023f4:	d508      	bpl.n	8002408 <UART_DMAError+0x26>
    huart->TxXferCount = 0U;
 80023f6:	2200      	movs	r2, #0
 80023f8:	84ca      	strh	r2, [r1, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80023fa:	68da      	ldr	r2, [r3, #12]
 80023fc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002400:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002402:	2220      	movs	r2, #32
 8002404:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 8002408:	695b      	ldr	r3, [r3, #20]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800240a:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 800240e:	2a22      	cmp	r2, #34	; 0x22
 8002410:	d106      	bne.n	8002420 <UART_DMAError+0x3e>
 8002412:	065b      	lsls	r3, r3, #25
 8002414:	d504      	bpl.n	8002420 <UART_DMAError+0x3e>
    huart->RxXferCount = 0U;
 8002416:	2300      	movs	r3, #0
 8002418:	85cb      	strh	r3, [r1, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800241a:	4608      	mov	r0, r1
 800241c:	f7ff fd40 	bl	8001ea0 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002420:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8002422:	f043 0310 	orr.w	r3, r3, #16
 8002426:	63cb      	str	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8002428:	4608      	mov	r0, r1
 800242a:	f7ff ffd9 	bl	80023e0 <HAL_UART_ErrorCallback>
 800242e:	bd08      	pop	{r3, pc}

08002430 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002430:	6803      	ldr	r3, [r0, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002434:	68d9      	ldr	r1, [r3, #12]
{
 8002436:	b570      	push	{r4, r5, r6, lr}
  if(errorflags == RESET)
 8002438:	0716      	lsls	r6, r2, #28
{
 800243a:	4604      	mov	r4, r0
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800243c:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 800243e:	d107      	bne.n	8002450 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002440:	0696      	lsls	r6, r2, #26
 8002442:	d55a      	bpl.n	80024fa <HAL_UART_IRQHandler+0xca>
 8002444:	068d      	lsls	r5, r1, #26
 8002446:	d558      	bpl.n	80024fa <HAL_UART_IRQHandler+0xca>
}
 8002448:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 800244c:	f7ff bf88 	b.w	8002360 <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002450:	f015 0501 	ands.w	r5, r5, #1
 8002454:	d102      	bne.n	800245c <HAL_UART_IRQHandler+0x2c>
 8002456:	f411 7f90 	tst.w	r1, #288	; 0x120
 800245a:	d04e      	beq.n	80024fa <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800245c:	07d3      	lsls	r3, r2, #31
 800245e:	d505      	bpl.n	800246c <HAL_UART_IRQHandler+0x3c>
 8002460:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002462:	bf42      	ittt	mi
 8002464:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8002466:	f043 0301 	orrmi.w	r3, r3, #1
 800246a:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800246c:	0750      	lsls	r0, r2, #29
 800246e:	d504      	bpl.n	800247a <HAL_UART_IRQHandler+0x4a>
 8002470:	b11d      	cbz	r5, 800247a <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002472:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002474:	f043 0302 	orr.w	r3, r3, #2
 8002478:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800247a:	0793      	lsls	r3, r2, #30
 800247c:	d504      	bpl.n	8002488 <HAL_UART_IRQHandler+0x58>
 800247e:	b11d      	cbz	r5, 8002488 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002480:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002482:	f043 0304 	orr.w	r3, r3, #4
 8002486:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002488:	0716      	lsls	r6, r2, #28
 800248a:	d504      	bpl.n	8002496 <HAL_UART_IRQHandler+0x66>
 800248c:	b11d      	cbz	r5, 8002496 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800248e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002490:	f043 0308 	orr.w	r3, r3, #8
 8002494:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002496:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002498:	2b00      	cmp	r3, #0
 800249a:	d066      	beq.n	800256a <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800249c:	0695      	lsls	r5, r2, #26
 800249e:	d504      	bpl.n	80024aa <HAL_UART_IRQHandler+0x7a>
 80024a0:	0688      	lsls	r0, r1, #26
 80024a2:	d502      	bpl.n	80024aa <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 80024a4:	4620      	mov	r0, r4
 80024a6:	f7ff ff5b 	bl	8002360 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80024aa:	6823      	ldr	r3, [r4, #0]
 80024ac:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80024ae:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80024b0:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 80024b2:	4620      	mov	r0, r4
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80024b4:	d402      	bmi.n	80024bc <HAL_UART_IRQHandler+0x8c>
 80024b6:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80024ba:	d01a      	beq.n	80024f2 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 80024bc:	f7ff fcf0 	bl	8001ea0 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024c0:	6823      	ldr	r3, [r4, #0]
 80024c2:	695a      	ldr	r2, [r3, #20]
 80024c4:	0652      	lsls	r2, r2, #25
 80024c6:	d510      	bpl.n	80024ea <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024c8:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 80024ca:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024d0:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 80024d2:	b150      	cbz	r0, 80024ea <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80024d4:	4b25      	ldr	r3, [pc, #148]	; (800256c <HAL_UART_IRQHandler+0x13c>)
 80024d6:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80024d8:	f7fe fda0 	bl	800101c <HAL_DMA_Abort_IT>
 80024dc:	2800      	cmp	r0, #0
 80024de:	d044      	beq.n	800256a <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80024e0:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 80024e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80024e6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80024e8:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80024ea:	4620      	mov	r0, r4
 80024ec:	f7ff ff78 	bl	80023e0 <HAL_UART_ErrorCallback>
 80024f0:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80024f2:	f7ff ff75 	bl	80023e0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024f6:	63e5      	str	r5, [r4, #60]	; 0x3c
 80024f8:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80024fa:	0616      	lsls	r6, r2, #24
 80024fc:	d527      	bpl.n	800254e <HAL_UART_IRQHandler+0x11e>
 80024fe:	060d      	lsls	r5, r1, #24
 8002500:	d525      	bpl.n	800254e <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8002502:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8002506:	2a21      	cmp	r2, #33	; 0x21
 8002508:	d12f      	bne.n	800256a <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800250a:	68a2      	ldr	r2, [r4, #8]
 800250c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002510:	6a22      	ldr	r2, [r4, #32]
 8002512:	d117      	bne.n	8002544 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002514:	8811      	ldrh	r1, [r2, #0]
 8002516:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800251a:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800251c:	6921      	ldr	r1, [r4, #16]
 800251e:	b979      	cbnz	r1, 8002540 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8002520:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8002522:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 8002524:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002526:	3a01      	subs	r2, #1
 8002528:	b292      	uxth	r2, r2
 800252a:	84e2      	strh	r2, [r4, #38]	; 0x26
 800252c:	b9ea      	cbnz	r2, 800256a <HAL_UART_IRQHandler+0x13a>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800252e:	68da      	ldr	r2, [r3, #12]
 8002530:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002534:	60da      	str	r2, [r3, #12]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002536:	68da      	ldr	r2, [r3, #12]
 8002538:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800253c:	60da      	str	r2, [r3, #12]
 800253e:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8002540:	3201      	adds	r2, #1
 8002542:	e7ee      	b.n	8002522 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002544:	1c51      	adds	r1, r2, #1
 8002546:	6221      	str	r1, [r4, #32]
 8002548:	7812      	ldrb	r2, [r2, #0]
 800254a:	605a      	str	r2, [r3, #4]
 800254c:	e7ea      	b.n	8002524 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800254e:	0650      	lsls	r0, r2, #25
 8002550:	d50b      	bpl.n	800256a <HAL_UART_IRQHandler+0x13a>
 8002552:	064a      	lsls	r2, r1, #25
 8002554:	d509      	bpl.n	800256a <HAL_UART_IRQHandler+0x13a>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002556:	68da      	ldr	r2, [r3, #12]
 8002558:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800255c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800255e:	2320      	movs	r3, #32
 8002560:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8002564:	4620      	mov	r0, r4
 8002566:	f7ff fedd 	bl	8002324 <HAL_UART_TxCpltCallback>
 800256a:	bd70      	pop	{r4, r5, r6, pc}
 800256c:	08002571 	.word	0x08002571

08002570 <UART_DMAAbortOnError>:
{
 8002570:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002572:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8002574:	2300      	movs	r3, #0
 8002576:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0U;
 8002578:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800257a:	f7ff ff31 	bl	80023e0 <HAL_UART_ErrorCallback>
 800257e:	bd08      	pop	{r3, pc}

08002580 <G01>:
			}
			memset(temp,0x00,sizeof(HGCodeDataControl_t));
		}
	}
}
void G01(){
 8002580:	b508      	push	{r3, lr}

	STMotorGoMilli(&STMotorDevices[0],temp->HGCodeParameter.A);
 8002582:	4b07      	ldr	r3, [pc, #28]	; (80025a0 <G01+0x20>)
 8002584:	4807      	ldr	r0, [pc, #28]	; (80025a4 <G01+0x24>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	ed93 0b02 	vldr	d0, [r3, #8]
 800258c:	f000 fc12 	bl	8002db4 <STMotorGoMilli>
	//STMotorWaitingActivate(&STMotorDevices[0],0);
	HAL_UART_Transmit_IT(HGCodeControl.HGCodeUartHandle,(uint8_t*)"G01 OK",6);
 8002590:	4b05      	ldr	r3, [pc, #20]	; (80025a8 <G01+0x28>)
 8002592:	4906      	ldr	r1, [pc, #24]	; (80025ac <G01+0x2c>)
 8002594:	6818      	ldr	r0, [r3, #0]
 8002596:	2206      	movs	r2, #6
}
 8002598:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_UART_Transmit_IT(HGCodeControl.HGCodeUartHandle,(uint8_t*)"G01 OK",6);
 800259c:	f7ff be5b 	b.w	8002256 <HAL_UART_Transmit_IT>
 80025a0:	20000044 	.word	0x20000044
 80025a4:	20000490 	.word	0x20000490
 80025a8:	20000240 	.word	0x20000240
 80025ac:	08003768 	.word	0x08003768

080025b0 <G28>:
}
void G27(){
	STMotorGoHome(&STMotorDevices[0]);
	HAL_UART_Transmit_IT(HGCodeControl.HGCodeUartHandle,(uint8_t*)"G27 OK",6);
}
void G28(){
 80025b0:	b508      	push	{r3, lr}

	STMotorAutoHome(&STMotorDevices[0],0);
 80025b2:	2100      	movs	r1, #0
 80025b4:	4805      	ldr	r0, [pc, #20]	; (80025cc <G28+0x1c>)
 80025b6:	f000 fbeb 	bl	8002d90 <STMotorAutoHome>
	//STMotorWaitingActivate(&STMotorDevices[0],0);
	HAL_UART_Transmit_IT(HGCodeControl.HGCodeUartHandle,(uint8_t*)"G28 OK",6);
 80025ba:	4b05      	ldr	r3, [pc, #20]	; (80025d0 <G28+0x20>)
 80025bc:	4905      	ldr	r1, [pc, #20]	; (80025d4 <G28+0x24>)
 80025be:	6818      	ldr	r0, [r3, #0]
 80025c0:	2206      	movs	r2, #6

}
 80025c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_UART_Transmit_IT(HGCodeControl.HGCodeUartHandle,(uint8_t*)"G28 OK",6);
 80025c6:	f7ff be46 	b.w	8002256 <HAL_UART_Transmit_IT>
 80025ca:	bf00      	nop
 80025cc:	20000490 	.word	0x20000490
 80025d0:	20000240 	.word	0x20000240
 80025d4:	0800376f 	.word	0x0800376f

080025d8 <H10>:
	return;
}
void H05(){
	return;
}
void H10(){ //UV LED OFF
 80025d8:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(UV_LCD_GPIO_Port,UV_LCD_Pin,GPIO_PIN_RESET);
 80025da:	2200      	movs	r2, #0
 80025dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025e0:	4805      	ldr	r0, [pc, #20]	; (80025f8 <H10+0x20>)
 80025e2:	f7fe fea3 	bl	800132c <HAL_GPIO_WritePin>
	HAL_UART_Transmit_IT(HGCodeControl.HGCodeUartHandle,(uint8_t*)"H10 OK",6);
 80025e6:	4b05      	ldr	r3, [pc, #20]	; (80025fc <H10+0x24>)
 80025e8:	4905      	ldr	r1, [pc, #20]	; (8002600 <H10+0x28>)
 80025ea:	6818      	ldr	r0, [r3, #0]
 80025ec:	2206      	movs	r2, #6
}
 80025ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_UART_Transmit_IT(HGCodeControl.HGCodeUartHandle,(uint8_t*)"H10 OK",6);
 80025f2:	f7ff be30 	b.w	8002256 <HAL_UART_Transmit_IT>
 80025f6:	bf00      	nop
 80025f8:	40020400 	.word	0x40020400
 80025fc:	20000240 	.word	0x20000240
 8002600:	08003776 	.word	0x08003776

08002604 <H11>:
void H11(){ //UV LED ON
 8002604:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(UV_LCD_GPIO_Port,UV_LCD_Pin,GPIO_PIN_SET);
 8002606:	2201      	movs	r2, #1
 8002608:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800260c:	4805      	ldr	r0, [pc, #20]	; (8002624 <H11+0x20>)
 800260e:	f7fe fe8d 	bl	800132c <HAL_GPIO_WritePin>
	HAL_UART_Transmit_IT(HGCodeControl.HGCodeUartHandle,(uint8_t*)"H11 OK",6);
 8002612:	4b05      	ldr	r3, [pc, #20]	; (8002628 <H11+0x24>)
 8002614:	4905      	ldr	r1, [pc, #20]	; (800262c <H11+0x28>)
 8002616:	6818      	ldr	r0, [r3, #0]
 8002618:	2206      	movs	r2, #6
}
 800261a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_UART_Transmit_IT(HGCodeControl.HGCodeUartHandle,(uint8_t*)"H11 OK",6);
 800261e:	f7ff be1a 	b.w	8002256 <HAL_UART_Transmit_IT>
 8002622:	bf00      	nop
 8002624:	40020400 	.word	0x40020400
 8002628:	20000240 	.word	0x20000240
 800262c:	08003785 	.word	0x08003785

08002630 <H20>:
void H20(){ //UV COOLER OFF
 8002630:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(COOLING_FAN_GPIO_Port,COOLING_FAN_Pin,GPIO_PIN_RESET);
 8002632:	2200      	movs	r2, #0
 8002634:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002638:	4805      	ldr	r0, [pc, #20]	; (8002650 <H20+0x20>)
 800263a:	f7fe fe77 	bl	800132c <HAL_GPIO_WritePin>
	HAL_UART_Transmit_IT(HGCodeControl.HGCodeUartHandle,(uint8_t*)"H20 OK",6);
 800263e:	4b05      	ldr	r3, [pc, #20]	; (8002654 <H20+0x24>)
 8002640:	4905      	ldr	r1, [pc, #20]	; (8002658 <H20+0x28>)
 8002642:	6818      	ldr	r0, [r3, #0]
 8002644:	2206      	movs	r2, #6
}
 8002646:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_UART_Transmit_IT(HGCodeControl.HGCodeUartHandle,(uint8_t*)"H20 OK",6);
 800264a:	f7ff be04 	b.w	8002256 <HAL_UART_Transmit_IT>
 800264e:	bf00      	nop
 8002650:	40020400 	.word	0x40020400
 8002654:	20000240 	.word	0x20000240
 8002658:	0800378c 	.word	0x0800378c

0800265c <H21>:
void H21(){ //UV COOLER ON
 800265c:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(COOLING_FAN_GPIO_Port,COOLING_FAN_Pin,GPIO_PIN_SET);
 800265e:	2201      	movs	r2, #1
 8002660:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002664:	4805      	ldr	r0, [pc, #20]	; (800267c <H21+0x20>)
 8002666:	f7fe fe61 	bl	800132c <HAL_GPIO_WritePin>
	HAL_UART_Transmit_IT(HGCodeControl.HGCodeUartHandle,(uint8_t*)"H21 OK",6);
 800266a:	4b05      	ldr	r3, [pc, #20]	; (8002680 <H21+0x24>)
 800266c:	4905      	ldr	r1, [pc, #20]	; (8002684 <H21+0x28>)
 800266e:	6818      	ldr	r0, [r3, #0]
 8002670:	2206      	movs	r2, #6
}
 8002672:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_UART_Transmit_IT(HGCodeControl.HGCodeUartHandle,(uint8_t*)"H21 OK",6);
 8002676:	f7ff bdee 	b.w	8002256 <HAL_UART_Transmit_IT>
 800267a:	bf00      	nop
 800267c:	40020400 	.word	0x40020400
 8002680:	20000240 	.word	0x20000240
 8002684:	08003793 	.word	0x08003793

08002688 <H100>:
void H100(){
 8002688:	b508      	push	{r3, lr}
	HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 800268a:	2120      	movs	r1, #32
 800268c:	4805      	ldr	r0, [pc, #20]	; (80026a4 <H100+0x1c>)
 800268e:	f7fe fe52 	bl	8001336 <HAL_GPIO_TogglePin>
	HAL_UART_Transmit_IT(HGCodeControl.HGCodeUartHandle,(uint8_t*)"H100 OK",7);
 8002692:	4b05      	ldr	r3, [pc, #20]	; (80026a8 <H100+0x20>)
 8002694:	4905      	ldr	r1, [pc, #20]	; (80026ac <H100+0x24>)
 8002696:	6818      	ldr	r0, [r3, #0]
 8002698:	2207      	movs	r2, #7
}
 800269a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_UART_Transmit_IT(HGCodeControl.HGCodeUartHandle,(uint8_t*)"H100 OK",7);
 800269e:	f7ff bdda 	b.w	8002256 <HAL_UART_Transmit_IT>
 80026a2:	bf00      	nop
 80026a4:	40020000 	.word	0x40020000
 80026a8:	20000240 	.word	0x20000240
 80026ac:	0800377d 	.word	0x0800377d

080026b0 <startHGCode>:
void startHGCode(TIM_HandleTypeDef* timHandler,UART_HandleTypeDef* HGCodeUsartHandle,DMA_HandleTypeDef* HGCodeDmaHandle){
 80026b0:	b507      	push	{r0, r1, r2, lr}
 80026b2:	4604      	mov	r4, r0
 80026b4:	4608      	mov	r0, r1
	HGCodeInit(HGCodeUsartHandle,HGCodeDmaHandle);
 80026b6:	4611      	mov	r1, r2
 80026b8:	f000 f858 	bl	800276c <HGCodeInit>
	HGCodeDMAStart();
 80026bc:	f000 f872 	bl	80027a4 <HGCodeDMAStart>
	HAL_TIM_Base_Start_IT(timHandler);
 80026c0:	4620      	mov	r0, r4
 80026c2:	f7ff f997 	bl	80019f4 <HAL_TIM_Base_Start_IT>
	STMotorInitHandler(&STMotorDevices[0],&htim5,TIM_CHANNEL_1,MOTOR_1_ENDSTOP_IRQN);
 80026c6:	2306      	movs	r3, #6
 80026c8:	2200      	movs	r2, #0
 80026ca:	4925      	ldr	r1, [pc, #148]	; (8002760 <startHGCode+0xb0>)
 80026cc:	4825      	ldr	r0, [pc, #148]	; (8002764 <startHGCode+0xb4>)
			temp = HGCodeGetCommandData();
 80026ce:	4c26      	ldr	r4, [pc, #152]	; (8002768 <startHGCode+0xb8>)
	STMotorInitHandler(&STMotorDevices[0],&htim5,TIM_CHANNEL_1,MOTOR_1_ENDSTOP_IRQN);
 80026d0:	f000 fa72 	bl	8002bb8 <STMotorInitHandler>
	STMotorInitParam(&STMotorDevices[0],1000,400,MAX_SPEED,MIN_SPEED);
 80026d4:	f44f 7348 	mov.w	r3, #800	; 0x320
 80026d8:	9300      	str	r3, [sp, #0]
 80026da:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80026de:	f241 3388 	movw	r3, #5000	; 0x1388
 80026e2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80026e6:	481f      	ldr	r0, [pc, #124]	; (8002764 <startHGCode+0xb4>)
 80026e8:	f000 fa86 	bl	8002bf8 <STMotorInitParam>
 80026ec:	4625      	mov	r5, r4
		if(HGCodeCheckDataBuffer() == 1){
 80026ee:	f000 f873 	bl	80027d8 <HGCodeCheckDataBuffer>
 80026f2:	2801      	cmp	r0, #1
 80026f4:	d1fb      	bne.n	80026ee <startHGCode+0x3e>
			temp = HGCodeGetCommandData();
 80026f6:	f000 f879 	bl	80027ec <HGCodeGetCommandData>
			if(temp->HGCodeCommand.G != 0){
 80026fa:	f9b0 3000 	ldrsh.w	r3, [r0]
			temp = HGCodeGetCommandData();
 80026fe:	6020      	str	r0, [r4, #0]
			if(temp->HGCodeCommand.G != 0){
 8002700:	b17b      	cbz	r3, 8002722 <startHGCode+0x72>
				switch(temp->HGCodeCommand.G){
 8002702:	2b01      	cmp	r3, #1
 8002704:	d007      	beq.n	8002716 <startHGCode+0x66>
 8002706:	2b1c      	cmp	r3, #28
 8002708:	d008      	beq.n	800271c <startHGCode+0x6c>
			memset(temp,0x00,sizeof(HGCodeDataControl_t));
 800270a:	2238      	movs	r2, #56	; 0x38
 800270c:	2100      	movs	r1, #0
 800270e:	6828      	ldr	r0, [r5, #0]
 8002710:	f001 f812 	bl	8003738 <memset>
 8002714:	e7eb      	b.n	80026ee <startHGCode+0x3e>
					G01();
 8002716:	f7ff ff33 	bl	8002580 <G01>
					break;
 800271a:	e7f6      	b.n	800270a <startHGCode+0x5a>
					G28();
 800271c:	f7ff ff48 	bl	80025b0 <G28>
					break;
 8002720:	e7f3      	b.n	800270a <startHGCode+0x5a>
			}else if(temp->HGCodeCommand.H != 0){
 8002722:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d0ef      	beq.n	800270a <startHGCode+0x5a>
				switch(temp->HGCodeCommand.H){
 800272a:	2b14      	cmp	r3, #20
 800272c:	d011      	beq.n	8002752 <startHGCode+0xa2>
 800272e:	dc06      	bgt.n	800273e <startHGCode+0x8e>
 8002730:	2b0a      	cmp	r3, #10
 8002732:	d00b      	beq.n	800274c <startHGCode+0x9c>
 8002734:	2b0b      	cmp	r3, #11
 8002736:	d1e8      	bne.n	800270a <startHGCode+0x5a>
					H11();
 8002738:	f7ff ff64 	bl	8002604 <H11>
					break;
 800273c:	e7e5      	b.n	800270a <startHGCode+0x5a>
				switch(temp->HGCodeCommand.H){
 800273e:	2b15      	cmp	r3, #21
 8002740:	d00a      	beq.n	8002758 <startHGCode+0xa8>
 8002742:	2b64      	cmp	r3, #100	; 0x64
 8002744:	d1e1      	bne.n	800270a <startHGCode+0x5a>
					H100();
 8002746:	f7ff ff9f 	bl	8002688 <H100>
 800274a:	e7de      	b.n	800270a <startHGCode+0x5a>
					H10();
 800274c:	f7ff ff44 	bl	80025d8 <H10>
					break;
 8002750:	e7db      	b.n	800270a <startHGCode+0x5a>
					H20();
 8002752:	f7ff ff6d 	bl	8002630 <H20>
					break;
 8002756:	e7d8      	b.n	800270a <startHGCode+0x5a>
					H21();
 8002758:	f7ff ff80 	bl	800265c <H21>
					break;
 800275c:	e7d5      	b.n	800270a <startHGCode+0x5a>
 800275e:	bf00      	nop
 8002760:	200005f4 	.word	0x200005f4
 8002764:	20000490 	.word	0x20000490
 8002768:	20000044 	.word	0x20000044

0800276c <HGCodeInit>:

uint8_t HGCodeBuffer[MAX_HGCODE_BUFFER] = {0};
HGCodeControl_t HGCodeControl = {0};

void HGCodeInit(UART_HandleTypeDef* HGCodeUsartHandle,DMA_HandleTypeDef* HGCodeDmaHandle){
	HGCodeControl.HGCodeUartHandle = HGCodeUsartHandle;
 800276c:	4b0b      	ldr	r3, [pc, #44]	; (800279c <HGCodeInit+0x30>)
	HGCodeControl.HGCodeDmaHandle = HGCodeDmaHandle;
	HGCodeControl.HGCodeBufferControl.GHCodeHuffer = HGCodeBuffer;
 800276e:	4a0c      	ldr	r2, [pc, #48]	; (80027a0 <HGCodeInit+0x34>)
 8002770:	609a      	str	r2, [r3, #8]
	HGCodeControl.HGCodeBufferControl.bufferSize = MAX_HGCODE_BUFFER;
 8002772:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
	HGCodeControl.HGCodeDmaHandle = HGCodeDmaHandle;
 8002776:	e883 0003 	stmia.w	r3, {r0, r1}
	HGCodeControl.HGCodeBufferControl.bufferSize = MAX_HGCODE_BUFFER;
 800277a:	819a      	strh	r2, [r3, #12]

	HGCodeControl.commandCount = 0;
 800277c:	2100      	movs	r1, #0
		HGCodeControl.HGCodeDataControl[i].HGCodeParameter.C = 0;
		HGCodeControl.HGCodeDataControl[i].HGCodeParameter.P = 0;
		HGCodeControl.HGCodeDataControl[i].HGCodeParameter.M = 0;
		HGCodeControl.HGCodeDataControl[i].HGCodeParameter.checkSum = 0;
	}*/
	memset(HGCodeControl.HGCodeDataControl,0x00,sizeof(HGCodeDataControl_t)*MAX_COMMAND);
 800277e:	f44f 720c 	mov.w	r2, #560	; 0x230
 8002782:	f103 0010 	add.w	r0, r3, #16
	HGCodeControl.commandCount = 0;
 8002786:	f883 1240 	strb.w	r1, [r3, #576]	; 0x240
	HGCodeControl.HGCodeBufferControl.front = 0;
 800278a:	7399      	strb	r1, [r3, #14]
	HGCodeControl.HGCodeBufferControl.rear = 0;
 800278c:	73d9      	strb	r1, [r3, #15]
	HGCodeControl.dataRear = 0;
 800278e:	f883 1242 	strb.w	r1, [r3, #578]	; 0x242
	HGCodeControl.dataFront = 0;
 8002792:	f883 1241 	strb.w	r1, [r3, #577]	; 0x241
	memset(HGCodeControl.HGCodeDataControl,0x00,sizeof(HGCodeDataControl_t)*MAX_COMMAND);
 8002796:	f000 bfcf 	b.w	8003738 <memset>
 800279a:	bf00      	nop
 800279c:	20000240 	.word	0x20000240
 80027a0:	20000048 	.word	0x20000048

080027a4 <HGCodeDMAStart>:
}

	//void HGCodeDMASetBuffer(int8_t *,uint16_t);

void HGCodeDMAStart(void){
	HAL_UART_Receive_DMA(HGCodeControl.HGCodeUartHandle,HGCodeBuffer,(int)MAX_HGCODE_BUFFER);
 80027a4:	4b03      	ldr	r3, [pc, #12]	; (80027b4 <HGCodeDMAStart+0x10>)
 80027a6:	4904      	ldr	r1, [pc, #16]	; (80027b8 <HGCodeDMAStart+0x14>)
 80027a8:	6818      	ldr	r0, [r3, #0]
 80027aa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80027ae:	f7ff bd71 	b.w	8002294 <HAL_UART_Receive_DMA>
 80027b2:	bf00      	nop
 80027b4:	20000240 	.word	0x20000240
 80027b8:	20000048 	.word	0x20000048

080027bc <HGCodeCheckCommandBuffer>:
}

int8_t HGCodeCheckCommandBuffer(void){
	if(HGCodeControl.HGCodeBufferControl.rear == MAX_HGCODE_BUFFER - __HAL_DMA_GET_COUNTER(HGCodeControl.HGCodeDmaHandle)){
 80027bc:	4a05      	ldr	r2, [pc, #20]	; (80027d4 <HGCodeCheckCommandBuffer+0x18>)
 80027be:	6853      	ldr	r3, [r2, #4]
 80027c0:	7bd0      	ldrb	r0, [r2, #15]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
		return 0;
	}else{
		return 1;
	}
}
 80027ca:	1ac0      	subs	r0, r0, r3
 80027cc:	bf18      	it	ne
 80027ce:	2001      	movne	r0, #1
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	20000240 	.word	0x20000240

080027d8 <HGCodeCheckDataBuffer>:
	}else{
		return 0;
	}
}
uint16_t HGCodeGetCommandCount(void){
	return HGCodeControl.commandCount;
 80027d8:	4b03      	ldr	r3, [pc, #12]	; (80027e8 <HGCodeCheckDataBuffer+0x10>)
	if(HGCodeGetCommandCount() > 0){
 80027da:	f893 0240 	ldrb.w	r0, [r3, #576]	; 0x240
}
 80027de:	3000      	adds	r0, #0
 80027e0:	bf18      	it	ne
 80027e2:	2001      	movne	r0, #1
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	20000240 	.word	0x20000240

080027ec <HGCodeGetCommandData>:

uint16_t HGCodeGet (void){
	return HGCodeControl.commandCount;
}

HGCodeDataControl_t* HGCodeGetCommandData(void){
 80027ec:	b530      	push	{r4, r5, lr}

	uint8_t rear = HGCodeControl.dataRear;
 80027ee:	4b0e      	ldr	r3, [pc, #56]	; (8002828 <HGCodeGetCommandData+0x3c>)
 80027f0:	f893 2242 	ldrb.w	r2, [r3, #578]	; 0x242

	if(rear == HGCodeControl.dataFront)
 80027f4:	f893 1241 	ldrb.w	r1, [r3, #577]	; 0x241
 80027f8:	4291      	cmp	r1, r2
 80027fa:	d012      	beq.n	8002822 <HGCodeGetCommandData+0x36>
		return 0;
	else if(HGCodeControl.commandCount == 0)
 80027fc:	f893 0240 	ldrb.w	r0, [r3, #576]	; 0x240
 8002800:	b180      	cbz	r0, 8002824 <HGCodeGetCommandData+0x38>
		return 0;
	HGCodeControl.dataRear = (HGCodeControl.dataRear + 1) % MAX_COMMAND;
 8002802:	1c55      	adds	r5, r2, #1
 8002804:	240a      	movs	r4, #10

	HGCodeControl.commandCount -= 1;
 8002806:	3801      	subs	r0, #1
	HGCodeControl.dataRear = (HGCodeControl.dataRear + 1) % MAX_COMMAND;
 8002808:	fb95 f1f4 	sdiv	r1, r5, r4
	HGCodeControl.commandCount -= 1;
 800280c:	f883 0240 	strb.w	r0, [r3, #576]	; 0x240
	HGCodeControl.dataRear = (HGCodeControl.dataRear + 1) % MAX_COMMAND;
 8002810:	fb04 5111 	mls	r1, r4, r1, r5

	return &HGCodeControl.HGCodeDataControl[rear];
 8002814:	2038      	movs	r0, #56	; 0x38
 8002816:	fb00 3002 	mla	r0, r0, r2, r3
	HGCodeControl.dataRear = (HGCodeControl.dataRear + 1) % MAX_COMMAND;
 800281a:	f883 1242 	strb.w	r1, [r3, #578]	; 0x242
	return &HGCodeControl.HGCodeDataControl[rear];
 800281e:	3010      	adds	r0, #16
 8002820:	bd30      	pop	{r4, r5, pc}
		return 0;
 8002822:	2000      	movs	r0, #0
}
 8002824:	bd30      	pop	{r4, r5, pc}
 8002826:	bf00      	nop
 8002828:	20000240 	.word	0x20000240

0800282c <HGCodeCharToInt>:
		HGCodeControl.HGCodeDataControl[HGCodeControl.dataFront].HGCodeParameter.checkSum = data;
		break;
	}
}

int16_t HGCodeCharToInt(uint8_t* buff, int size){
 800282c:	b530      	push	{r4, r5, lr}
	int16_t value = 0;
	int a = 1;
	for(int i = size - 1;i >= 0;i--){
 800282e:	3901      	subs	r1, #1
	int a = 1;
 8002830:	2401      	movs	r4, #1
	int16_t value = 0;
 8002832:	2300      	movs	r3, #0
		value += (buff[i] - 0x30) * a;
		a*=10;
 8002834:	250a      	movs	r5, #10
	for(int i = size - 1;i >= 0;i--){
 8002836:	2900      	cmp	r1, #0
 8002838:	da01      	bge.n	800283e <HGCodeCharToInt+0x12>
	}
	return value;
}
 800283a:	4618      	mov	r0, r3
 800283c:	bd30      	pop	{r4, r5, pc}
		value += (buff[i] - 0x30) * a;
 800283e:	5c42      	ldrb	r2, [r0, r1]
 8002840:	3a30      	subs	r2, #48	; 0x30
 8002842:	fb12 f204 	smulbb	r2, r2, r4
 8002846:	4413      	add	r3, r2
 8002848:	b21b      	sxth	r3, r3
		a*=10;
 800284a:	436c      	muls	r4, r5
	for(int i = size - 1;i >= 0;i--){
 800284c:	3901      	subs	r1, #1
 800284e:	e7f2      	b.n	8002836 <HGCodeCharToInt+0xa>

08002850 <HGCodeCharToDouble>:

double HGCodeCharToDouble(uint8_t* buff ,int size){
 8002850:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	double value = 0.0;
	int a = 1;
	double b = 1;
	for(int i = size - 1;i >= 0;i--){
 8002854:	1e4c      	subs	r4, r1, #1
	double b = 1;
 8002856:	f8df 9088 	ldr.w	r9, [pc, #136]	; 80028e0 <HGCodeCharToDouble+0x90>
 800285a:	9401      	str	r4, [sp, #4]
double HGCodeCharToDouble(uint8_t* buff ,int size){
 800285c:	4682      	mov	sl, r0
	double b = 1;
 800285e:	f04f 0800 	mov.w	r8, #0
	int a = 1;
 8002862:	2501      	movs	r5, #1
	double value = 0.0;
 8002864:	2600      	movs	r6, #0
 8002866:	2700      	movs	r7, #0
	for(int i = size - 1;i >= 0;i--){
 8002868:	2c00      	cmp	r4, #0
 800286a:	da04      	bge.n	8002876 <HGCodeCharToDouble+0x26>
			value += (buff[i] - 0x30) * a;
			a*=10;
		}
	}
	return value;
}
 800286c:	ec47 6b10 	vmov	d0, r6, r7
 8002870:	b003      	add	sp, #12
 8002872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(buff[i] == '.'){
 8002876:	f81a 0004 	ldrb.w	r0, [sl, r4]
 800287a:	282e      	cmp	r0, #46	; 0x2e
 800287c:	d11b      	bne.n	80028b6 <HGCodeCharToDouble+0x66>
			for(int j = 0; j < size - 1 - i ;j++){
 800287e:	9b01      	ldr	r3, [sp, #4]
 8002880:	2500      	movs	r5, #0
 8002882:	eba3 0b04 	sub.w	fp, r3, r4
 8002886:	455d      	cmp	r5, fp
 8002888:	db0a      	blt.n	80028a0 <HGCodeCharToDouble+0x50>
			value = value * b;
 800288a:	4630      	mov	r0, r6
 800288c:	4639      	mov	r1, r7
 800288e:	4642      	mov	r2, r8
 8002890:	464b      	mov	r3, r9
 8002892:	f7fd fe71 	bl	8000578 <__aeabi_dmul>
			a = 1;
 8002896:	2501      	movs	r5, #1
			value = value * b;
 8002898:	4606      	mov	r6, r0
 800289a:	460f      	mov	r7, r1
	for(int i = size - 1;i >= 0;i--){
 800289c:	3c01      	subs	r4, #1
 800289e:	e7e3      	b.n	8002868 <HGCodeCharToDouble+0x18>
				b *= 0.1;
 80028a0:	4640      	mov	r0, r8
 80028a2:	4649      	mov	r1, r9
 80028a4:	a30c      	add	r3, pc, #48	; (adr r3, 80028d8 <HGCodeCharToDouble+0x88>)
 80028a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028aa:	f7fd fe65 	bl	8000578 <__aeabi_dmul>
			for(int j = 0; j < size - 1 - i ;j++){
 80028ae:	3501      	adds	r5, #1
				b *= 0.1;
 80028b0:	4680      	mov	r8, r0
 80028b2:	4689      	mov	r9, r1
 80028b4:	e7e7      	b.n	8002886 <HGCodeCharToDouble+0x36>
			value += (buff[i] - 0x30) * a;
 80028b6:	3830      	subs	r0, #48	; 0x30
 80028b8:	4368      	muls	r0, r5
 80028ba:	f7fd fdf7 	bl	80004ac <__aeabi_i2d>
 80028be:	460b      	mov	r3, r1
 80028c0:	4602      	mov	r2, r0
 80028c2:	4639      	mov	r1, r7
 80028c4:	4630      	mov	r0, r6
 80028c6:	f7fd fca5 	bl	8000214 <__adddf3>
			a*=10;
 80028ca:	230a      	movs	r3, #10
			value += (buff[i] - 0x30) * a;
 80028cc:	4606      	mov	r6, r0
 80028ce:	460f      	mov	r7, r1
			a*=10;
 80028d0:	435d      	muls	r5, r3
 80028d2:	e7e3      	b.n	800289c <HGCodeCharToDouble+0x4c>
 80028d4:	f3af 8000 	nop.w
 80028d8:	9999999a 	.word	0x9999999a
 80028dc:	3fb99999 	.word	0x3fb99999
 80028e0:	3ff00000 	.word	0x3ff00000

080028e4 <HGCodeDecodeCommand>:
void HGCodeDecodeCommand(void){
 80028e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t rear = HGCodeControl.HGCodeBufferControl.rear;
 80028e8:	4daa      	ldr	r5, [pc, #680]	; (8002b94 <HGCodeDecodeCommand+0x2b0>)
	uint16_t front = MAX_HGCODE_BUFFER - __HAL_DMA_GET_COUNTER(HGCodeControl.HGCodeDmaHandle);
 80028ea:	686b      	ldr	r3, [r5, #4]
	uint16_t rear = HGCodeControl.HGCodeBufferControl.rear;
 80028ec:	7bec      	ldrb	r4, [r5, #15]
	uint16_t front = MAX_HGCODE_BUFFER - __HAL_DMA_GET_COUNTER(HGCodeControl.HGCodeDmaHandle);
 80028ee:	681b      	ldr	r3, [r3, #0]
void HGCodeDecodeCommand(void){
 80028f0:	b089      	sub	sp, #36	; 0x24
	uint16_t front = MAX_HGCODE_BUFFER - __HAL_DMA_GET_COUNTER(HGCodeControl.HGCodeDmaHandle);
 80028f2:	685f      	ldr	r7, [r3, #4]
	uint8_t buff[20] = {0};
 80028f4:	ae03      	add	r6, sp, #12
 80028f6:	2214      	movs	r2, #20
 80028f8:	2100      	movs	r1, #0
	uint16_t front = MAX_HGCODE_BUFFER - __HAL_DMA_GET_COUNTER(HGCodeControl.HGCodeDmaHandle);
 80028fa:	f5c7 77fa 	rsb	r7, r7, #500	; 0x1f4
	uint8_t buff[20] = {0};
 80028fe:	4630      	mov	r0, r6
 8002900:	f000 ff1a 	bl	8003738 <memset>
	uint16_t rear = HGCodeControl.HGCodeBufferControl.rear;
 8002904:	fa1f f884 	uxth.w	r8, r4
	uint16_t front = MAX_HGCODE_BUFFER - __HAL_DMA_GET_COUNTER(HGCodeControl.HGCodeDmaHandle);
 8002908:	b2bf      	uxth	r7, r7
	HAL_UART_Transmit(&huart1,(uint8_t*)"hello\r\n",7,1000);
 800290a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800290e:	2207      	movs	r2, #7
 8002910:	49a1      	ldr	r1, [pc, #644]	; (8002b98 <HGCodeDecodeCommand+0x2b4>)
 8002912:	48a2      	ldr	r0, [pc, #648]	; (8002b9c <HGCodeDecodeCommand+0x2b8>)
 8002914:	f7ff fc42 	bl	800219c <HAL_UART_Transmit>
	if( rear < front){
 8002918:	45b8      	cmp	r8, r7
 800291a:	d227      	bcs.n	800296c <HGCodeDecodeCommand+0x88>
		receiveDataSize = front - rear;
 800291c:	eba7 0308 	sub.w	r3, r7, r8
		if(HGCodeBuffer[index] == ';'){
 8002920:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8002ba0 <HGCodeDecodeCommand+0x2bc>
		receiveDataSize = front + (MAX_HGCODE_BUFFER - rear);
 8002924:	b29b      	uxth	r3, r3
				index = (index + 1) % MAX_HGCODE_BUFFER;
 8002926:	f44f 78fa 	mov.w	r8, #500	; 0x1f4
	for(int i = receiveDataSize; i > 0; i--,index = (index + 1) % MAX_HGCODE_BUFFER){
 800292a:	2b00      	cmp	r3, #0
 800292c:	dd1a      	ble.n	8002964 <HGCodeDecodeCommand+0x80>
		if(HGCodeBuffer[index] == ';'){
 800292e:	f819 2004 	ldrb.w	r2, [r9, r4]
 8002932:	2a3b      	cmp	r2, #59	; 0x3b
 8002934:	f104 0101 	add.w	r1, r4, #1
 8002938:	d11d      	bne.n	8002976 <HGCodeDecodeCommand+0x92>
			HGCodeControl.commandCount++;
 800293a:	f895 3240 	ldrb.w	r3, [r5, #576]	; 0x240
 800293e:	3301      	adds	r3, #1
 8002940:	f885 3240 	strb.w	r3, [r5, #576]	; 0x240
			HGCodeControl.dataFront = (HGCodeControl.dataFront + 1) % MAX_COMMAND;
 8002944:	f895 3241 	ldrb.w	r3, [r5, #577]	; 0x241
 8002948:	200a      	movs	r0, #10
 800294a:	3301      	adds	r3, #1
 800294c:	fb93 f2f0 	sdiv	r2, r3, r0
 8002950:	fb00 3312 	mls	r3, r0, r2, r3
 8002954:	f885 3241 	strb.w	r3, [r5, #577]	; 0x241
			index = (index + 1) % MAX_HGCODE_BUFFER;
 8002958:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800295c:	fb91 f4f3 	sdiv	r4, r1, r3
 8002960:	fb03 1414 	mls	r4, r3, r4, r1
	HGCodeControl.HGCodeBufferControl.rear = index;
 8002964:	73ec      	strb	r4, [r5, #15]
}
 8002966:	b009      	add	sp, #36	; 0x24
 8002968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}else if(rear > front){
 800296c:	d9fb      	bls.n	8002966 <HGCodeDecodeCommand+0x82>
		receiveDataSize = front + (MAX_HGCODE_BUFFER - rear);
 800296e:	f5c8 73fa 	rsb	r3, r8, #500	; 0x1f4
 8002972:	443b      	add	r3, r7
 8002974:	e7d4      	b.n	8002920 <HGCodeDecodeCommand+0x3c>
		switch(HGCodeBuffer[index]){
 8002976:	2a48      	cmp	r2, #72	; 0x48
 8002978:	d834      	bhi.n	80029e4 <HGCodeDecodeCommand+0x100>
 800297a:	2a47      	cmp	r2, #71	; 0x47
 800297c:	d206      	bcs.n	800298c <HGCodeDecodeCommand+0xa8>
 800297e:	2a2a      	cmp	r2, #42	; 0x2a
 8002980:	d004      	beq.n	800298c <HGCodeDecodeCommand+0xa8>
 8002982:	d333      	bcc.n	80029ec <HGCodeDecodeCommand+0x108>
 8002984:	f1a2 0041 	sub.w	r0, r2, #65	; 0x41
 8002988:	2802      	cmp	r0, #2
 800298a:	d82f      	bhi.n	80029ec <HGCodeDecodeCommand+0x108>
				index = (index + 1) % MAX_HGCODE_BUFFER;
 800298c:	fb91 f4f8 	sdiv	r4, r1, r8
 8002990:	fb08 1414 	mls	r4, r8, r4, r1
				if(HGCodeBuffer[index]=='-'){
 8002994:	f819 1004 	ldrb.w	r1, [r9, r4]
 8002998:	292d      	cmp	r1, #45	; 0x2d
					index = (index + 1) % MAX_HGCODE_BUFFER;
 800299a:	bf01      	itttt	eq
 800299c:	3401      	addeq	r4, #1
					i--;
 800299e:	f103 33ff 	addeq.w	r3, r3, #4294967295
					index = (index + 1) % MAX_HGCODE_BUFFER;
 80029a2:	fb94 f1f8 	sdiveq	r1, r4, r8
					sign = -1;
 80029a6:	f04f 37ff 	moveq.w	r7, #4294967295
					index = (index + 1) % MAX_HGCODE_BUFFER;
 80029aa:	bf0c      	ite	eq
 80029ac:	fb08 4411 	mlseq	r4, r8, r1, r4
 80029b0:	2701      	movne	r7, #1
 80029b2:	2100      	movs	r1, #0
				while(HGCodeBuffer[index] != ' ' && HGCodeBuffer[index] != ';'){
 80029b4:	f819 0004 	ldrb.w	r0, [r9, r4]
 80029b8:	2820      	cmp	r0, #32
 80029ba:	eba3 0a01 	sub.w	sl, r3, r1
 80029be:	d15d      	bne.n	8002a7c <HGCodeDecodeCommand+0x198>
				switch(HGCodeBuffer[data]){
 80029c0:	2a43      	cmp	r2, #67	; 0x43
 80029c2:	f000 809d 	beq.w	8002b00 <HGCodeDecodeCommand+0x21c>
 80029c6:	d82e      	bhi.n	8002a26 <HGCodeDecodeCommand+0x142>
 80029c8:	2a41      	cmp	r2, #65	; 0x41
 80029ca:	d06d      	beq.n	8002aa8 <HGCodeDecodeCommand+0x1c4>
 80029cc:	f200 8082 	bhi.w	8002ad4 <HGCodeDecodeCommand+0x1f0>
 80029d0:	2a2a      	cmp	r2, #42	; 0x2a
 80029d2:	f000 80c1 	beq.w	8002b58 <HGCodeDecodeCommand+0x274>
				memset(buff,0x00,sizeof(buff));
 80029d6:	2214      	movs	r2, #20
 80029d8:	2100      	movs	r1, #0
 80029da:	4630      	mov	r0, r6
 80029dc:	f000 feac 	bl	8003738 <memset>
				break;
 80029e0:	4653      	mov	r3, sl
 80029e2:	e003      	b.n	80029ec <HGCodeDecodeCommand+0x108>
		switch(HGCodeBuffer[index]){
 80029e4:	2a4d      	cmp	r2, #77	; 0x4d
 80029e6:	d0d1      	beq.n	800298c <HGCodeDecodeCommand+0xa8>
 80029e8:	2a50      	cmp	r2, #80	; 0x50
 80029ea:	d0cf      	beq.n	800298c <HGCodeDecodeCommand+0xa8>
		if(HGCodeBuffer[index] == ';'){
 80029ec:	f819 2004 	ldrb.w	r2, [r9, r4]
 80029f0:	2a3b      	cmp	r2, #59	; 0x3b
 80029f2:	f104 0401 	add.w	r4, r4, #1
 80029f6:	f040 80c7 	bne.w	8002b88 <HGCodeDecodeCommand+0x2a4>
			HGCodeControl.commandCount++;
 80029fa:	f895 3240 	ldrb.w	r3, [r5, #576]	; 0x240
 80029fe:	3301      	adds	r3, #1
 8002a00:	f885 3240 	strb.w	r3, [r5, #576]	; 0x240
			HGCodeControl.dataFront = (HGCodeControl.dataFront + 1) % MAX_COMMAND;
 8002a04:	f895 3241 	ldrb.w	r3, [r5, #577]	; 0x241
 8002a08:	210a      	movs	r1, #10
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	fb93 f2f1 	sdiv	r2, r3, r1
 8002a10:	fb01 3312 	mls	r3, r1, r2, r3
 8002a14:	f885 3241 	strb.w	r3, [r5, #577]	; 0x241
			index = (index + 1) % MAX_HGCODE_BUFFER;
 8002a18:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002a1c:	fb94 f2f3 	sdiv	r2, r4, r3
 8002a20:	fb03 4412 	mls	r4, r3, r2, r4
			break;
 8002a24:	e79e      	b.n	8002964 <HGCodeDecodeCommand+0x80>
				switch(HGCodeBuffer[data]){
 8002a26:	2a48      	cmp	r2, #72	; 0x48
 8002a28:	d032      	beq.n	8002a90 <HGCodeDecodeCommand+0x1ac>
 8002a2a:	d80d      	bhi.n	8002a48 <HGCodeDecodeCommand+0x164>
 8002a2c:	2a47      	cmp	r2, #71	; 0x47
 8002a2e:	d1d2      	bne.n	80029d6 <HGCodeDecodeCommand+0xf2>
					HGCodePutData(HGCodeCharToInt(buff,j) * sign,HGCODE_G);
 8002a30:	4630      	mov	r0, r6
 8002a32:	f7ff fefb 	bl	800282c <HGCodeCharToInt>
		HGCodeControl.HGCodeDataControl[HGCodeControl.dataFront].HGCodeCommand.G = (int16_t)data;
 8002a36:	f895 3241 	ldrb.w	r3, [r5, #577]	; 0x241
 8002a3a:	2238      	movs	r2, #56	; 0x38
 8002a3c:	fb02 5303 	mla	r3, r2, r3, r5
					HGCodePutData(HGCodeCharToInt(buff,j) * sign,HGCODE_G);
 8002a40:	fb17 f700 	smulbb	r7, r7, r0
		HGCodeControl.HGCodeDataControl[HGCodeControl.dataFront].HGCodeCommand.G = (int16_t)data;
 8002a44:	821f      	strh	r7, [r3, #16]
 8002a46:	e7c6      	b.n	80029d6 <HGCodeDecodeCommand+0xf2>
				switch(HGCodeBuffer[data]){
 8002a48:	2a4d      	cmp	r2, #77	; 0x4d
 8002a4a:	d06f      	beq.n	8002b2c <HGCodeDecodeCommand+0x248>
 8002a4c:	2a50      	cmp	r2, #80	; 0x50
 8002a4e:	d1c2      	bne.n	80029d6 <HGCodeDecodeCommand+0xf2>
					HGCodePutData(HGCodeCharToDouble(buff,j) * sign,HGCODE_P);
 8002a50:	4630      	mov	r0, r6
 8002a52:	f7ff fefd 	bl	8002850 <HGCodeCharToDouble>
		HGCodeControl.HGCodeDataControl[HGCodeControl.dataFront].HGCodeParameter.P = data;
 8002a56:	f895 b241 	ldrb.w	fp, [r5, #577]	; 0x241
					HGCodePutData(HGCodeCharToDouble(buff,j) * sign,HGCODE_P);
 8002a5a:	ec53 2b10 	vmov	r2, r3, d0
		HGCodeControl.HGCodeDataControl[HGCodeControl.dataFront].HGCodeParameter.P = data;
 8002a5e:	2138      	movs	r1, #56	; 0x38
					HGCodePutData(HGCodeCharToDouble(buff,j) * sign,HGCODE_P);
 8002a60:	4638      	mov	r0, r7
 8002a62:	e9cd 2300 	strd	r2, r3, [sp]
		HGCodeControl.HGCodeDataControl[HGCodeControl.dataFront].HGCodeParameter.P = data;
 8002a66:	fb01 5b0b 	mla	fp, r1, fp, r5
					HGCodePutData(HGCodeCharToDouble(buff,j) * sign,HGCODE_P);
 8002a6a:	f7fd fd1f 	bl	80004ac <__aeabi_i2d>
 8002a6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002a72:	f7fd fd81 	bl	8000578 <__aeabi_dmul>
		HGCodeControl.HGCodeDataControl[HGCodeControl.dataFront].HGCodeParameter.P = data;
 8002a76:	e9cb 010c 	strd	r0, r1, [fp, #48]	; 0x30
 8002a7a:	e7ac      	b.n	80029d6 <HGCodeDecodeCommand+0xf2>
				while(HGCodeBuffer[index] != ' ' && HGCodeBuffer[index] != ';'){
 8002a7c:	283b      	cmp	r0, #59	; 0x3b
 8002a7e:	d09f      	beq.n	80029c0 <HGCodeDecodeCommand+0xdc>
					index = (index + 1) % MAX_HGCODE_BUFFER;
 8002a80:	3401      	adds	r4, #1
					buff[j] = HGCodeBuffer[index];
 8002a82:	5470      	strb	r0, [r6, r1]
					index = (index + 1) % MAX_HGCODE_BUFFER;
 8002a84:	fb94 f0f8 	sdiv	r0, r4, r8
					j++;
 8002a88:	3101      	adds	r1, #1
					index = (index + 1) % MAX_HGCODE_BUFFER;
 8002a8a:	fb08 4410 	mls	r4, r8, r0, r4
 8002a8e:	e791      	b.n	80029b4 <HGCodeDecodeCommand+0xd0>
					HGCodePutData(HGCodeCharToInt(buff,j) * sign,HGCODE_H);
 8002a90:	4630      	mov	r0, r6
 8002a92:	f7ff fecb 	bl	800282c <HGCodeCharToInt>
		HGCodeControl.HGCodeDataControl[HGCodeControl.dataFront].HGCodeCommand.H = (int16_t)data;
 8002a96:	f895 3241 	ldrb.w	r3, [r5, #577]	; 0x241
 8002a9a:	2238      	movs	r2, #56	; 0x38
 8002a9c:	fb02 5303 	mla	r3, r2, r3, r5
					HGCodePutData(HGCodeCharToInt(buff,j) * sign,HGCODE_H);
 8002aa0:	fb17 f700 	smulbb	r7, r7, r0
		HGCodeControl.HGCodeDataControl[HGCodeControl.dataFront].HGCodeCommand.H = (int16_t)data;
 8002aa4:	825f      	strh	r7, [r3, #18]
 8002aa6:	e796      	b.n	80029d6 <HGCodeDecodeCommand+0xf2>
					HGCodePutData(HGCodeCharToDouble(buff,j) * sign,HGCODE_A);
 8002aa8:	4630      	mov	r0, r6
 8002aaa:	f7ff fed1 	bl	8002850 <HGCodeCharToDouble>
		HGCodeControl.HGCodeDataControl[HGCodeControl.dataFront].HGCodeParameter.A = data;
 8002aae:	f895 b241 	ldrb.w	fp, [r5, #577]	; 0x241
					HGCodePutData(HGCodeCharToDouble(buff,j) * sign,HGCODE_A);
 8002ab2:	ec53 2b10 	vmov	r2, r3, d0
		HGCodeControl.HGCodeDataControl[HGCodeControl.dataFront].HGCodeParameter.A = data;
 8002ab6:	2138      	movs	r1, #56	; 0x38
					HGCodePutData(HGCodeCharToDouble(buff,j) * sign,HGCODE_A);
 8002ab8:	4638      	mov	r0, r7
 8002aba:	e9cd 2300 	strd	r2, r3, [sp]
		HGCodeControl.HGCodeDataControl[HGCodeControl.dataFront].HGCodeParameter.A = data;
 8002abe:	fb01 5b0b 	mla	fp, r1, fp, r5
					HGCodePutData(HGCodeCharToDouble(buff,j) * sign,HGCODE_A);
 8002ac2:	f7fd fcf3 	bl	80004ac <__aeabi_i2d>
 8002ac6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002aca:	f7fd fd55 	bl	8000578 <__aeabi_dmul>
		HGCodeControl.HGCodeDataControl[HGCodeControl.dataFront].HGCodeParameter.A = data;
 8002ace:	e9cb 0106 	strd	r0, r1, [fp, #24]
 8002ad2:	e780      	b.n	80029d6 <HGCodeDecodeCommand+0xf2>
					HGCodePutData(HGCodeCharToDouble(buff,j) * sign,HGCODE_B);
 8002ad4:	4630      	mov	r0, r6
 8002ad6:	f7ff febb 	bl	8002850 <HGCodeCharToDouble>
		HGCodeControl.HGCodeDataControl[HGCodeControl.dataFront].HGCodeParameter.B = data;
 8002ada:	f895 b241 	ldrb.w	fp, [r5, #577]	; 0x241
					HGCodePutData(HGCodeCharToDouble(buff,j) * sign,HGCODE_B);
 8002ade:	ec53 2b10 	vmov	r2, r3, d0
		HGCodeControl.HGCodeDataControl[HGCodeControl.dataFront].HGCodeParameter.B = data;
 8002ae2:	2138      	movs	r1, #56	; 0x38
					HGCodePutData(HGCodeCharToDouble(buff,j) * sign,HGCODE_B);
 8002ae4:	4638      	mov	r0, r7
 8002ae6:	e9cd 2300 	strd	r2, r3, [sp]
		HGCodeControl.HGCodeDataControl[HGCodeControl.dataFront].HGCodeParameter.B = data;
 8002aea:	fb01 5b0b 	mla	fp, r1, fp, r5
					HGCodePutData(HGCodeCharToDouble(buff,j) * sign,HGCODE_B);
 8002aee:	f7fd fcdd 	bl	80004ac <__aeabi_i2d>
 8002af2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002af6:	f7fd fd3f 	bl	8000578 <__aeabi_dmul>
		HGCodeControl.HGCodeDataControl[HGCodeControl.dataFront].HGCodeParameter.B = data;
 8002afa:	e9cb 0108 	strd	r0, r1, [fp, #32]
 8002afe:	e76a      	b.n	80029d6 <HGCodeDecodeCommand+0xf2>
					HGCodePutData(HGCodeCharToDouble(buff,j) * sign,HGCODE_C);
 8002b00:	4630      	mov	r0, r6
 8002b02:	f7ff fea5 	bl	8002850 <HGCodeCharToDouble>
		HGCodeControl.HGCodeDataControl[HGCodeControl.dataFront].HGCodeParameter.C = data;
 8002b06:	f895 b241 	ldrb.w	fp, [r5, #577]	; 0x241
					HGCodePutData(HGCodeCharToDouble(buff,j) * sign,HGCODE_C);
 8002b0a:	ec53 2b10 	vmov	r2, r3, d0
		HGCodeControl.HGCodeDataControl[HGCodeControl.dataFront].HGCodeParameter.C = data;
 8002b0e:	2138      	movs	r1, #56	; 0x38
					HGCodePutData(HGCodeCharToDouble(buff,j) * sign,HGCODE_C);
 8002b10:	4638      	mov	r0, r7
 8002b12:	e9cd 2300 	strd	r2, r3, [sp]
		HGCodeControl.HGCodeDataControl[HGCodeControl.dataFront].HGCodeParameter.C = data;
 8002b16:	fb01 5b0b 	mla	fp, r1, fp, r5
					HGCodePutData(HGCodeCharToDouble(buff,j) * sign,HGCODE_C);
 8002b1a:	f7fd fcc7 	bl	80004ac <__aeabi_i2d>
 8002b1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002b22:	f7fd fd29 	bl	8000578 <__aeabi_dmul>
		HGCodeControl.HGCodeDataControl[HGCodeControl.dataFront].HGCodeParameter.C = data;
 8002b26:	e9cb 010a 	strd	r0, r1, [fp, #40]	; 0x28
 8002b2a:	e754      	b.n	80029d6 <HGCodeDecodeCommand+0xf2>
					HGCodePutData(HGCodeCharToDouble(buff,j) * sign,HGCODE_M);
 8002b2c:	4630      	mov	r0, r6
 8002b2e:	f7ff fe8f 	bl	8002850 <HGCodeCharToDouble>
		HGCodeControl.HGCodeDataControl[HGCodeControl.dataFront].HGCodeParameter.M = data;
 8002b32:	f895 b241 	ldrb.w	fp, [r5, #577]	; 0x241
					HGCodePutData(HGCodeCharToDouble(buff,j) * sign,HGCODE_M);
 8002b36:	ec53 2b10 	vmov	r2, r3, d0
		HGCodeControl.HGCodeDataControl[HGCodeControl.dataFront].HGCodeParameter.M = data;
 8002b3a:	2138      	movs	r1, #56	; 0x38
					HGCodePutData(HGCodeCharToDouble(buff,j) * sign,HGCODE_M);
 8002b3c:	4638      	mov	r0, r7
 8002b3e:	e9cd 2300 	strd	r2, r3, [sp]
		HGCodeControl.HGCodeDataControl[HGCodeControl.dataFront].HGCodeParameter.M = data;
 8002b42:	fb01 5b0b 	mla	fp, r1, fp, r5
					HGCodePutData(HGCodeCharToDouble(buff,j) * sign,HGCODE_M);
 8002b46:	f7fd fcb1 	bl	80004ac <__aeabi_i2d>
 8002b4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002b4e:	f7fd fd13 	bl	8000578 <__aeabi_dmul>
		HGCodeControl.HGCodeDataControl[HGCodeControl.dataFront].HGCodeParameter.M = data;
 8002b52:	e9cb 0110 	strd	r0, r1, [fp, #64]	; 0x40
 8002b56:	e73e      	b.n	80029d6 <HGCodeDecodeCommand+0xf2>
					HGCodePutData(HGCodeCharToDouble(buff,j) * sign,HGCODE_CHECKSUM);
 8002b58:	4630      	mov	r0, r6
 8002b5a:	f7ff fe79 	bl	8002850 <HGCodeCharToDouble>
		HGCodeControl.HGCodeDataControl[HGCodeControl.dataFront].HGCodeParameter.checkSum = data;
 8002b5e:	f895 b241 	ldrb.w	fp, [r5, #577]	; 0x241
 8002b62:	2338      	movs	r3, #56	; 0x38
 8002b64:	fb0b 3303 	mla	r3, fp, r3, r3
					HGCodePutData(HGCodeCharToDouble(buff,j) * sign,HGCODE_CHECKSUM);
 8002b68:	4638      	mov	r0, r7
		HGCodeControl.HGCodeDataControl[HGCodeControl.dataFront].HGCodeParameter.checkSum = data;
 8002b6a:	eb05 0b03 	add.w	fp, r5, r3
					HGCodePutData(HGCodeCharToDouble(buff,j) * sign,HGCODE_CHECKSUM);
 8002b6e:	ed8d 0b00 	vstr	d0, [sp]
 8002b72:	f7fd fc9b 	bl	80004ac <__aeabi_i2d>
 8002b76:	ed9d 0b00 	vldr	d0, [sp]
 8002b7a:	ec53 2b10 	vmov	r2, r3, d0
 8002b7e:	f7fd fcfb 	bl	8000578 <__aeabi_dmul>
		HGCodeControl.HGCodeDataControl[HGCodeControl.dataFront].HGCodeParameter.checkSum = data;
 8002b82:	e9cb 0100 	strd	r0, r1, [fp]
 8002b86:	e726      	b.n	80029d6 <HGCodeDecodeCommand+0xf2>
	for(int i = receiveDataSize; i > 0; i--,index = (index + 1) % MAX_HGCODE_BUFFER){
 8002b88:	fb94 f2f8 	sdiv	r2, r4, r8
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	fb08 4412 	mls	r4, r8, r2, r4
 8002b92:	e6ca      	b.n	800292a <HGCodeDecodeCommand+0x46>
 8002b94:	20000240 	.word	0x20000240
 8002b98:	0800379a 	.word	0x0800379a
 8002b9c:	200006cc 	.word	0x200006cc
 8002ba0:	20000048 	.word	0x20000048

08002ba4 <DecodeTimerInterruptHandler>:

void DecodeTimerInterruptHandler(void){
 8002ba4:	b508      	push	{r3, lr}
	if(HGCodeCheckCommandBuffer() == 1){
 8002ba6:	f7ff fe09 	bl	80027bc <HGCodeCheckCommandBuffer>
 8002baa:	2801      	cmp	r0, #1
 8002bac:	d103      	bne.n	8002bb6 <DecodeTimerInterruptHandler+0x12>
		HGCodeDecodeCommand();
	}
}
 8002bae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HGCodeDecodeCommand();
 8002bb2:	f7ff be97 	b.w	80028e4 <HGCodeDecodeCommand>
 8002bb6:	bd08      	pop	{r3, pc}

08002bb8 <STMotorInitHandler>:
bool STMotorInitControl(void){
	//return A4988_ControlInit();
	return TRUE;
}

bool STMotorInitHandler(STMotorHandle_t* STMotorHandle, TIM_HandleTypeDef* Handle, HAL_TIM_ActiveChannel channel,IRQn_Type IRQn){
 8002bb8:	b538      	push	{r3, r4, r5, lr}

	STMotorHandle->motorHandler.timHandle = Handle;
 8002bba:	6041      	str	r1, [r0, #4]
	STMotorHandle->motorHandler.instance = Handle->Instance;
 8002bbc:	6809      	ldr	r1, [r1, #0]
 8002bbe:	6081      	str	r1, [r0, #8]
	STMotorHandle->motorHandler.timChaanel = channel;
	STMotorHandle->motorHandler.deviceNumber = deviceCount++;
 8002bc0:	490b      	ldr	r1, [pc, #44]	; (8002bf0 <STMotorInitHandler+0x38>)
	STMotorHandle->motorHandler.timChaanel = channel;
 8002bc2:	7302      	strb	r2, [r0, #12]
	STMotorHandle->motorHandler.deviceNumber = deviceCount++;
 8002bc4:	780a      	ldrb	r2, [r1, #0]
bool STMotorInitHandler(STMotorHandle_t* STMotorHandle, TIM_HandleTypeDef* Handle, HAL_TIM_ActiveChannel channel,IRQn_Type IRQn){
 8002bc6:	4604      	mov	r4, r0
	STMotorHandle->motorHandler.deviceNumber = deviceCount++;
 8002bc8:	1c50      	adds	r0, r2, #1
 8002bca:	7008      	strb	r0, [r1, #0]
	STMotorHandle->motorHandler.isActivate = FALSE;
 8002bcc:	2500      	movs	r5, #0
	STMotorHandle->motorHandler.deviceNumber = deviceCount++;
 8002bce:	7022      	strb	r2, [r4, #0]
	STMotorHandle->motorHandler.timPrescaler = MOTOR_PRESCALER;
 8002bd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
	STMotorHandle->motorHandler.isActivate = FALSE;
 8002bd4:	73a5      	strb	r5, [r4, #14]
	STMotorHandle->motorHandler.timPrescaler = MOTOR_PRESCALER;
 8002bd6:	6122      	str	r2, [r4, #16]
	STMotorHandle->motorHandler.IRQn = IRQn;
 8002bd8:	7363      	strb	r3, [r4, #13]

	HAL_NVIC_DisableIRQ(STMotorHandle->motorHandler.IRQn);
 8002bda:	7b60      	ldrb	r0, [r4, #13]
 8002bdc:	b240      	sxtb	r0, r0
 8002bde:	f7fe f927 	bl	8000e30 <HAL_NVIC_DisableIRQ>

	STMotorDeviceControl.SetEnableGPIO(STMotorHandle,FALSE);
 8002be2:	4b04      	ldr	r3, [pc, #16]	; (8002bf4 <STMotorInitHandler+0x3c>)
 8002be4:	4620      	mov	r0, r4
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	4629      	mov	r1, r5
 8002bea:	4798      	blx	r3
	return TRUE;
}
 8002bec:	2001      	movs	r0, #1
 8002bee:	bd38      	pop	{r3, r4, r5, pc}
 8002bf0:	20000488 	.word	0x20000488
 8002bf4:	20000008 	.word	0x20000008

08002bf8 <STMotorInitParam>:

bool STMotorInitParam(STMotorHandle_t* STMotorHandle, uint32_t accel,uint32_t decel,uint32_t maxSpeed,uint32_t minSpeed){
 8002bf8:	b510      	push	{r4, lr}
 8002bfa:	9c02      	ldr	r4, [sp, #8]

	STMotorHandle->motorParam.accel = (accel) ? accel : MOTOR_ACCEL;
 8002bfc:	6241      	str	r1, [r0, #36]	; 0x24
	STMotorHandle->motorParam.decel = (decel) ? decel : MOTOR_DECEL;
	STMotorHandle->motorParam.maxSpeed = (maxSpeed) ? maxSpeed : MOTOR_MAX_SPEED;
	STMotorHandle->motorParam.minSpeed = (minSpeed) ? minSpeed : MOTOR_MIN_SPEED;
 8002bfe:	2c00      	cmp	r4, #0
	STMotorHandle->motorParam.decel = (decel) ? decel : MOTOR_DECEL;
 8002c00:	6282      	str	r2, [r0, #40]	; 0x28
	STMotorHandle->motorParam.minSpeed = (minSpeed) ? minSpeed : MOTOR_MIN_SPEED;
 8002c02:	bf08      	it	eq
 8002c04:	f44f 6448 	moveq.w	r4, #3200	; 0xc80
	STMotorHandle->motorParam.maxSpeed = (maxSpeed) ? maxSpeed : MOTOR_MAX_SPEED;
 8002c08:	6303      	str	r3, [r0, #48]	; 0x30
	//STMotorHandle->motorParam.microStep = (microStep) ? microStep : MOTOR_MICRO_STEP;
	//STMotorHandle->motorParam.motorStep = (motorStep) ? motorStep : MOTOR_MOTOR_STEP;

	STMotorHandle->motorParam.curPosition = 0;
 8002c0a:	2300      	movs	r3, #0
	STMotorHandle->motorParam.minSpeed = (minSpeed) ? minSpeed : MOTOR_MIN_SPEED;
 8002c0c:	6344      	str	r4, [r0, #52]	; 0x34
	STMotorHandle->motorParam.curPosition = 0;
 8002c0e:	6183      	str	r3, [r0, #24]
	STMotorHandle->motorParam.direction = DIR_UNKNOWN;
 8002c10:	2302      	movs	r3, #2
 8002c12:	7503      	strb	r3, [r0, #20]
	STMotorHandle->motorParam.state = STATE_STOP;
 8002c14:	2303      	movs	r3, #3
 8002c16:	7543      	strb	r3, [r0, #21]

	return TRUE;
}
 8002c18:	2001      	movs	r0, #1
 8002c1a:	bd10      	pop	{r4, pc}

08002c1c <STMotorCalcAccelSpeed>:
uint32_t STMotorCalcAccelSpeed(STMotorHandle_t* STMotorHandle,uint32_t nStep){

	uint32_t accSteps;
	uint32_t decSteps;

	uint32_t minSpeed = STMotorHandle->motorParam.minSpeed;
 8002c1c:	6b42      	ldr	r2, [r0, #52]	; 0x34
	uint32_t maxSpeed = STMotorHandle->motorParam.maxSpeed;
 8002c1e:	6b03      	ldr	r3, [r0, #48]	; 0x30
uint32_t STMotorCalcAccelSpeed(STMotorHandle_t* STMotorHandle,uint32_t nStep){
 8002c20:	b570      	push	{r4, r5, r6, lr}

	uint32_t acc = STMotorHandle->motorParam.accel;
	uint32_t dec = STMotorHandle->motorParam.decel;

	accSteps = (maxSpeed - minSpeed) * (maxSpeed + minSpeed);
 8002c22:	1a9e      	subs	r6, r3, r2
 8002c24:	4413      	add	r3, r2
 8002c26:	4373      	muls	r3, r6
	uint32_t acc = STMotorHandle->motorParam.accel;
 8002c28:	6a44      	ldr	r4, [r0, #36]	; 0x24
	uint32_t dec = STMotorHandle->motorParam.decel;
 8002c2a:	6a85      	ldr	r5, [r0, #40]	; 0x28
	decSteps = accSteps;
	accSteps /= acc;
 8002c2c:	fbb3 f2f4 	udiv	r2, r3, r4
	accSteps /= 2;

	decSteps /= dec;
 8002c30:	fbb3 f3f5 	udiv	r3, r3, r5
	accSteps /= 2;
 8002c34:	0852      	lsrs	r2, r2, #1
	decSteps /= 2;
 8002c36:	085b      	lsrs	r3, r3, #1

	if((accSteps + decSteps) > nStep){
 8002c38:	18d6      	adds	r6, r2, r3
 8002c3a:	428e      	cmp	r6, r1
 8002c3c:	d90c      	bls.n	8002c58 <STMotorCalcAccelSpeed+0x3c>

		decSteps = (dec * nStep) / (acc + dec);
 8002c3e:	4369      	muls	r1, r5
 8002c40:	442c      	add	r4, r5
 8002c42:	fbb1 f1f4 	udiv	r1, r1, r4

		if(decSteps > 1){
 8002c46:	2901      	cmp	r1, #1
			accSteps = decSteps - 1;
 8002c48:	bf8c      	ite	hi
 8002c4a:	f101 33ff 	addhi.w	r3, r1, #4294967295
			if(accSteps == 0){
				accSteps = 1;
			}
		}else{
			accSteps = 0;
 8002c4e:	2300      	movls	r3, #0
		}
		STMotorHandle->motorParam.endAccel = accSteps;
 8002c50:	6383      	str	r3, [r0, #56]	; 0x38
		STMotorHandle->motorParam.startDecel = decSteps;
	}else{
		STMotorHandle->motorParam.endAccel = accSteps;
		STMotorHandle->motorParam.startDecel = nStep - decSteps - 1;
 8002c52:	63c1      	str	r1, [r0, #60]	; 0x3c
	}
	return 0;
}
 8002c54:	2000      	movs	r0, #0
 8002c56:	bd70      	pop	{r4, r5, r6, pc}
		STMotorHandle->motorParam.startDecel = nStep - decSteps - 1;
 8002c58:	3901      	subs	r1, #1
		STMotorHandle->motorParam.endAccel = accSteps;
 8002c5a:	6382      	str	r2, [r0, #56]	; 0x38
		STMotorHandle->motorParam.startDecel = nStep - decSteps - 1;
 8002c5c:	1ac9      	subs	r1, r1, r3
 8002c5e:	e7f8      	b.n	8002c52 <STMotorCalcAccelSpeed+0x36>

08002c60 <STMotorSetFreq>:

uint32_t STMotorSetFreq(STMotorHandle_t* STMotorHandle,uint32_t freq){
 8002c60:	b538      	push	{r3, r4, r5, lr}
 8002c62:	4605      	mov	r5, r0
 8002c64:	460c      	mov	r4, r1
	uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 8002c66:	f7fe fbe5 	bl	8001434 <HAL_RCC_GetSysClockFreq>
	uint32_t period = (sysFreq/ (STMotorHandle->motorHandler.timPrescaler * (uint32_t)freq)) - 1;
 8002c6a:	6929      	ldr	r1, [r5, #16]

	__HAL_TIM_SET_AUTORELOAD(STMotorHandle->motorHandler.timHandle, period);
 8002c6c:	686b      	ldr	r3, [r5, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
	uint32_t period = (sysFreq/ (STMotorHandle->motorHandler.timPrescaler * (uint32_t)freq)) - 1;
 8002c70:	434c      	muls	r4, r1
 8002c72:	fbb0 f0f4 	udiv	r0, r0, r4
 8002c76:	3801      	subs	r0, #1
	__HAL_TIM_SET_AUTORELOAD(STMotorHandle->motorHandler.timHandle, period);
 8002c78:	62d8      	str	r0, [r3, #44]	; 0x2c
 8002c7a:	686b      	ldr	r3, [r5, #4]
 8002c7c:	60d8      	str	r0, [r3, #12]
	__HAL_TIM_SET_COMPARE(STMotorHandle->motorHandler.timHandle, STMotorHandle->motorHandler.timChaanel, period >> 1);
 8002c7e:	686b      	ldr	r3, [r5, #4]
 8002c80:	7b2a      	ldrb	r2, [r5, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	0892      	lsrs	r2, r2, #2
 8002c86:	3334      	adds	r3, #52	; 0x34
 8002c88:	0840      	lsrs	r0, r0, #1
 8002c8a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
	HAL_TIM_PWM_Start_IT(STMotorHandle->motorHandler.timHandle, STMotorHandle->motorHandler.timChaanel);
 8002c8e:	6868      	ldr	r0, [r5, #4]
 8002c90:	7b29      	ldrb	r1, [r5, #12]
 8002c92:	f7ff f861 	bl	8001d58 <HAL_TIM_PWM_Start_IT>

	return 0;
}
 8002c96:	2000      	movs	r0, #0
 8002c98:	bd38      	pop	{r3, r4, r5, pc}
	...

08002c9c <STMotorStopFreq>:

uint32_t STMotorStopFreq(STMotorHandle_t* STMotorHandle){
 8002c9c:	b538      	push	{r3, r4, r5, lr}
	STMotorDeviceControl.SetEnableGPIO(STMotorHandle,FALSE);
 8002c9e:	4d07      	ldr	r5, [pc, #28]	; (8002cbc <STMotorStopFreq+0x20>)
uint32_t STMotorStopFreq(STMotorHandle_t* STMotorHandle){
 8002ca0:	4604      	mov	r4, r0
	STMotorDeviceControl.SetEnableGPIO(STMotorHandle,FALSE);
 8002ca2:	686b      	ldr	r3, [r5, #4]
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	4798      	blx	r3
	HAL_TIM_PWM_Stop_IT(STMotorHandle->motorHandler.timHandle,STMotorHandle->motorHandler.timChaanel);
 8002ca8:	6860      	ldr	r0, [r4, #4]
 8002caa:	7b21      	ldrb	r1, [r4, #12]
 8002cac:	f7ff f88a 	bl	8001dc4 <HAL_TIM_PWM_Stop_IT>

	STMotorDeviceControl.FinishCallBack(STMotorHandle);
 8002cb0:	4620      	mov	r0, r4
 8002cb2:	69ab      	ldr	r3, [r5, #24]
 8002cb4:	4798      	blx	r3
	return 0;
}
 8002cb6:	2000      	movs	r0, #0
 8002cb8:	bd38      	pop	{r3, r4, r5, pc}
 8002cba:	bf00      	nop
 8002cbc:	20000008 	.word	0x20000008

08002cc0 <STMotorMoveStart>:

uint32_t STMotorMoveStart(STMotorHandle_t* STMotorHandle){
 8002cc0:	b538      	push	{r3, r4, r5, lr}

	STMotorHandle->motorParam.accu = 0;
	STMotorHandle->motorParam.nStep = 0;

	STMotorDeviceControl.SetEnableGPIO(STMotorHandle,TRUE);
 8002cc2:	4b0a      	ldr	r3, [pc, #40]	; (8002cec <STMotorMoveStart+0x2c>)
uint32_t STMotorMoveStart(STMotorHandle_t* STMotorHandle){
 8002cc4:	4604      	mov	r4, r0
	STMotorHandle->motorParam.accu = 0;
 8002cc6:	2500      	movs	r5, #0
 8002cc8:	6405      	str	r5, [r0, #64]	; 0x40
	STMotorDeviceControl.SetEnableGPIO(STMotorHandle,TRUE);
 8002cca:	685b      	ldr	r3, [r3, #4]
	STMotorHandle->motorParam.nStep = 0;
 8002ccc:	61c5      	str	r5, [r0, #28]
	STMotorDeviceControl.SetEnableGPIO(STMotorHandle,TRUE);
 8002cce:	2101      	movs	r1, #1
 8002cd0:	4798      	blx	r3

	if (STMotorHandle->motorParam.endAccel != 0)
 8002cd2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002cd4:	b133      	cbz	r3, 8002ce4 <STMotorMoveStart+0x24>
	{
		STMotorHandle->motorParam.state = STATE_ACCEL;
 8002cd6:	7565      	strb	r5, [r4, #21]
	else
	{
		STMotorHandle->motorParam.state = STATE_DECEL;
	}

	STMotorSetFreq(STMotorHandle,STMotorHandle->motorParam.minSpeed);
 8002cd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002cda:	4620      	mov	r0, r4
 8002cdc:	f7ff ffc0 	bl	8002c60 <STMotorSetFreq>

	return 0;
}
 8002ce0:	2000      	movs	r0, #0
 8002ce2:	bd38      	pop	{r3, r4, r5, pc}
		STMotorHandle->motorParam.state = STATE_DECEL;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	7563      	strb	r3, [r4, #21]
 8002ce8:	e7f6      	b.n	8002cd8 <STMotorMoveStart+0x18>
 8002cea:	bf00      	nop
 8002cec:	20000008 	.word	0x20000008

08002cf0 <STMotorGoStep>:

uint32_t STMotorGoStep(STMotorHandle_t* STMotorHandle,int32_t step){
 8002cf0:	b538      	push	{r3, r4, r5, lr}

	if(STMotorHandle->motorHandler.isActivate == FALSE){
 8002cf2:	7b82      	ldrb	r2, [r0, #14]
uint32_t STMotorGoStep(STMotorHandle_t* STMotorHandle,int32_t step){
 8002cf4:	4604      	mov	r4, r0
 8002cf6:	460b      	mov	r3, r1
	if(STMotorHandle->motorHandler.isActivate == FALSE){
 8002cf8:	f002 05ff 	and.w	r5, r2, #255	; 0xff
 8002cfc:	b9a2      	cbnz	r2, 8002d28 <STMotorGoStep+0x38>
		STMotorHandle->motorHandler.isActivate = TRUE;
 8002cfe:	2101      	movs	r1, #1
		if(step == 0){
 8002d00:	2b00      	cmp	r3, #0
		STMotorHandle->motorHandler.isActivate = TRUE;
 8002d02:	7381      	strb	r1, [r0, #14]
		if(step == 0){
 8002d04:	d010      	beq.n	8002d28 <STMotorGoStep+0x38>
 8002d06:	4a09      	ldr	r2, [pc, #36]	; (8002d2c <STMotorGoStep+0x3c>)
			return 0;
		}else if(step < 0) {
			STMotorHandle->motorParam.targetStep = -step;
			STMotorDeviceControl.SetDirectionGPIO(STMotorHandle,DIR_BACKWORD);
		}else{
			STMotorHandle->motorParam.targetStep = step;
 8002d08:	bfad      	iteet	ge
 8002d0a:	6203      	strge	r3, [r0, #32]
			STMotorHandle->motorParam.targetStep = -step;
 8002d0c:	425b      	neglt	r3, r3
 8002d0e:	6203      	strlt	r3, [r0, #32]
			STMotorDeviceControl.SetDirectionGPIO(STMotorHandle,DIR_FORWORD);
 8002d10:	4629      	movge	r1, r5
			STMotorDeviceControl.SetDirectionGPIO(STMotorHandle,DIR_BACKWORD);
 8002d12:	bfb4      	ite	lt
 8002d14:	6813      	ldrlt	r3, [r2, #0]
			STMotorDeviceControl.SetDirectionGPIO(STMotorHandle,DIR_FORWORD);
 8002d16:	6813      	ldrge	r3, [r2, #0]
 8002d18:	4798      	blx	r3
		}
		STMotorCalcAccelSpeed(STMotorHandle,STMotorHandle->motorParam.targetStep);
 8002d1a:	6a21      	ldr	r1, [r4, #32]
 8002d1c:	4620      	mov	r0, r4
 8002d1e:	f7ff ff7d 	bl	8002c1c <STMotorCalcAccelSpeed>

		STMotorMoveStart(STMotorHandle);
 8002d22:	4620      	mov	r0, r4
 8002d24:	f7ff ffcc 	bl	8002cc0 <STMotorMoveStart>
		return 0;
	}else{
		return 0;
	}
}
 8002d28:	2000      	movs	r0, #0
 8002d2a:	bd38      	pop	{r3, r4, r5, pc}
 8002d2c:	20000008 	.word	0x20000008

08002d30 <STMotorGoSpeed>:

uint32_t STMotorGoSpeed(STMotorHandle_t* STMotorHandle,int16_t speed,uint16_t timeOut){
 8002d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(STMotorHandle->motorHandler.isActivate == FALSE){
 8002d32:	7b83      	ldrb	r3, [r0, #14]
uint32_t STMotorGoSpeed(STMotorHandle_t* STMotorHandle,int16_t speed,uint16_t timeOut){
 8002d34:	460e      	mov	r6, r1
 8002d36:	4604      	mov	r4, r0
	if(STMotorHandle->motorHandler.isActivate == FALSE){
 8002d38:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8002d3c:	bb1b      	cbnz	r3, 8002d86 <STMotorGoSpeed+0x56>
		STMotorHandle->motorHandler.isActivate = TRUE;
 8002d3e:	2301      	movs	r3, #1
		if(speed == 0){
 8002d40:	2e00      	cmp	r6, #0
		STMotorHandle->motorHandler.isActivate = TRUE;
 8002d42:	7383      	strb	r3, [r0, #14]
		if(speed == 0){
 8002d44:	d102      	bne.n	8002d4c <STMotorGoSpeed+0x1c>
			STMotorHandle->motorHandler.isActivate = FALSE;
 8002d46:	7386      	strb	r6, [r0, #14]
			return 0;
 8002d48:	4630      	mov	r0, r6
 8002d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d4c:	4f0f      	ldr	r7, [pc, #60]	; (8002d8c <STMotorGoSpeed+0x5c>)
		}else if(speed < 0) {
 8002d4e:	da17      	bge.n	8002d80 <STMotorGoSpeed+0x50>
			STMotorDeviceControl.SetDirectionGPIO(STMotorHandle,DIR_BACKWORD);
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	4619      	mov	r1, r3
 8002d54:	4790      	blx	r2
		}else{
			STMotorDeviceControl.SetDirectionGPIO(STMotorHandle,DIR_FORWORD);
		}
		STMotorHandle->motorParam.accu = 0;
 8002d56:	2500      	movs	r5, #0
		STMotorHandle->motorParam.endAccel = 0;
		STMotorHandle->motorParam.startDecel = 0;
		STMotorHandle->motorParam.targetStep = 0;
		STMotorHandle->motorParam.nStep = 0;

		STMotorHandle->motorParam.state = STATE_INFINITE;
 8002d58:	2306      	movs	r3, #6
		STMotorHandle->motorParam.accu = 0;
 8002d5a:	6425      	str	r5, [r4, #64]	; 0x40

		STMotorDeviceControl.SetEnableGPIO(STMotorHandle,TRUE);
 8002d5c:	4620      	mov	r0, r4
		STMotorHandle->motorParam.endAccel = 0;
 8002d5e:	63a5      	str	r5, [r4, #56]	; 0x38
		STMotorDeviceControl.SetEnableGPIO(STMotorHandle,TRUE);
 8002d60:	2101      	movs	r1, #1
		STMotorHandle->motorParam.startDecel = 0;
 8002d62:	63e5      	str	r5, [r4, #60]	; 0x3c
		STMotorHandle->motorParam.targetStep = 0;
 8002d64:	6225      	str	r5, [r4, #32]
		STMotorHandle->motorParam.nStep = 0;
 8002d66:	61e5      	str	r5, [r4, #28]
		STMotorHandle->motorParam.state = STATE_INFINITE;
 8002d68:	7563      	strb	r3, [r4, #21]
		STMotorDeviceControl.SetEnableGPIO(STMotorHandle,TRUE);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4798      	blx	r3
		STMotorSetFreq(STMotorHandle,abs(speed));
 8002d6e:	ea86 71e6 	eor.w	r1, r6, r6, asr #31
 8002d72:	eba1 71e6 	sub.w	r1, r1, r6, asr #31
 8002d76:	4620      	mov	r0, r4
 8002d78:	f7ff ff72 	bl	8002c60 <STMotorSetFreq>
 8002d7c:	4628      	mov	r0, r5
 8002d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			STMotorDeviceControl.SetDirectionGPIO(STMotorHandle,DIR_FORWORD);
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	4798      	blx	r3
 8002d84:	e7e7      	b.n	8002d56 <STMotorGoSpeed+0x26>
		return 0;
	}else{
		return -1;
 8002d86:	f04f 30ff 	mov.w	r0, #4294967295
	}
}
 8002d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d8c:	20000008 	.word	0x20000008

08002d90 <STMotorAutoHome>:

uint32_t STMotorAutoHome(STMotorHandle_t* STMotorHandle,uint16_t speed){
 8002d90:	b510      	push	{r4, lr}
 8002d92:	4604      	mov	r4, r0

	if(speed == 0){
 8002d94:	b951      	cbnz	r1, 8002dac <STMotorAutoHome+0x1c>
		STMotorGoSpeed(STMotorHandle,-MOTOR_MIN_SPEED,0);
 8002d96:	460a      	mov	r2, r1
 8002d98:	f5a1 6148 	sub.w	r1, r1, #3200	; 0xc80
	}else{
		STMotorGoSpeed(STMotorHandle,speed,0);
 8002d9c:	f7ff ffc8 	bl	8002d30 <STMotorGoSpeed>
	}
	HAL_NVIC_EnableIRQ(STMotorHandle->motorHandler.IRQn);
 8002da0:	7b60      	ldrb	r0, [r4, #13]
 8002da2:	b240      	sxtb	r0, r0
 8002da4:	f7fe f838 	bl	8000e18 <HAL_NVIC_EnableIRQ>
	return 0;
}
 8002da8:	2000      	movs	r0, #0
 8002daa:	bd10      	pop	{r4, pc}
		STMotorGoSpeed(STMotorHandle,speed,0);
 8002dac:	2200      	movs	r2, #0
 8002dae:	b209      	sxth	r1, r1
 8002db0:	e7f4      	b.n	8002d9c <STMotorAutoHome+0xc>
	...

08002db4 <STMotorGoMilli>:

uint32_t STMotorGoMilli(STMotorHandle_t* STMotorHandle,double milli){
 8002db4:	b510      	push	{r4, lr}
	//return nStep/(STMotorDeviceControl.GetMicroStep() * STMotorDeviceControl.GetMotorStep()) * STMotorDeviceControl.GetMotorPitch();
	return nStep/(MOTOR_DRIVER_MiCRO_STEP * MOTOR_STEP) * MOTOR_SCREW_PITCH;
}
uint32_t STMotorCalcMilliToStep(double milli){
	//return (milli / STMotorDeviceControl.GetMotorPitch()) * (STMotorDeviceControl.GetMicroStep() * STMotorDeviceControl.GetMotorStep());
	return (milli / (double)MOTOR_SCREW_PITCH) * (MOTOR_DRIVER_MiCRO_STEP * MOTOR_STEP);
 8002db6:	2200      	movs	r2, #0
uint32_t STMotorGoMilli(STMotorHandle_t* STMotorHandle,double milli){
 8002db8:	4604      	mov	r4, r0
	return (milli / (double)MOTOR_SCREW_PITCH) * (MOTOR_DRIVER_MiCRO_STEP * MOTOR_STEP);
 8002dba:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002dbe:	ec51 0b10 	vmov	r0, r1, d0
 8002dc2:	f7fd fbd9 	bl	8000578 <__aeabi_dmul>
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	4b05      	ldr	r3, [pc, #20]	; (8002de0 <STMotorGoMilli+0x2c>)
 8002dca:	f7fd fbd5 	bl	8000578 <__aeabi_dmul>
 8002dce:	f7fd fde5 	bl	800099c <__aeabi_d2uiz>
	return STMotorGoStep(STMotorHandle, STMotorCalcMilliToStep(milli));
 8002dd2:	4601      	mov	r1, r0
 8002dd4:	4620      	mov	r0, r4
}
 8002dd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return STMotorGoStep(STMotorHandle, STMotorCalcMilliToStep(milli));
 8002dda:	f7ff bf89 	b.w	8002cf0 <STMotorGoStep>
 8002dde:	bf00      	nop
 8002de0:	40a90000 	.word	0x40a90000

08002de4 <STMotorPWMPulseInterruptHandle>:
}




uint32_t STMotorPWMPulseInterruptHandle(STMotorHandle_t* STMotorHandle){
 8002de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	uint32_t relStep = ++STMotorHandle->motorParam.nStep;
 8002de6:	69c3      	ldr	r3, [r0, #28]
 8002de8:	3301      	adds	r3, #1
 8002dea:	61c3      	str	r3, [r0, #28]
	uint32_t targetStep = STMotorHandle->motorParam.targetStep;
 8002dec:	6a06      	ldr	r6, [r0, #32]
	uint32_t speed = STMotorHandle->motorParam.curSpeed;
 8002dee:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
	uint32_t accel = STMotorHandle->motorParam.accel << 16;
 8002df0:	6a44      	ldr	r4, [r0, #36]	; 0x24
	uint32_t decel = STMotorHandle->motorParam.decel << 16;
 8002df2:	6a82      	ldr	r2, [r0, #40]	; 0x28

	STMotorHandle->motorParam.curPosition += STMotorHandle->motorParam.direction ? 1 : -1;
 8002df4:	7d05      	ldrb	r5, [r0, #20]
 8002df6:	6987      	ldr	r7, [r0, #24]
 8002df8:	2d00      	cmp	r5, #0
 8002dfa:	bf14      	ite	ne
 8002dfc:	2501      	movne	r5, #1
 8002dfe:	f04f 35ff 	moveq.w	r5, #4294967295
 8002e02:	443d      	add	r5, r7
 8002e04:	6185      	str	r5, [r0, #24]

	bool speedUpdated = FALSE;

	switch(STMotorHandle->motorParam.state){
 8002e06:	7d45      	ldrb	r5, [r0, #21]
 8002e08:	2d06      	cmp	r5, #6
 8002e0a:	d80f      	bhi.n	8002e2c <STMotorPWMPulseInterruptHandle+0x48>
 8002e0c:	e8df f005 	tbb	[pc, r5]
 8002e10:	6d364210 	.word	0x6d364210
 8002e14:	6d42      	.short	0x6d42
 8002e16:	04          	.byte	0x04
 8002e17:	00          	.byte	0x00

		case STATE_INFINITE:
			if(STMotorHandle->motorParam.state == STATE_HARDSTOP){
 8002e18:	7d43      	ldrb	r3, [r0, #21]
 8002e1a:	2b05      	cmp	r3, #5
 8002e1c:	d101      	bne.n	8002e22 <STMotorPWMPulseInterruptHandle+0x3e>
			if(relStep >= targetStep || speed <= STMotorHandle->motorParam.minSpeed){
				STMotorHandle->motorParam.state = STATE_STOP;
			}else if(relStep <= STMotorHandle->motorParam.startDecel){
				STMotorHandle->motorParam.state = STATE_STAND;
			}else if(STMotorHandle->motorParam.state == STATE_HARDSTOP){
				STMotorHandle->motorParam.state = STATE_STOP;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e003      	b.n	8002e2a <STMotorPWMPulseInterruptHandle+0x46>
			}else if(STMotorHandle->motorParam.state == STATE_SOFTSTOP){
 8002e22:	7d43      	ldrb	r3, [r0, #21]
 8002e24:	2b04      	cmp	r3, #4
 8002e26:	d101      	bne.n	8002e2c <STMotorPWMPulseInterruptHandle+0x48>
				STMotorHandle->motorParam.state = STATE_DECEL;
 8002e28:	2301      	movs	r3, #1
				STMotorHandle->motorParam.state = STATE_STOP;
 8002e2a:	7543      	strb	r3, [r0, #21]
		default:
			break;
	}

	return 0;
}
 8002e2c:	2000      	movs	r0, #0
 8002e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if(relStep >= targetStep){
 8002e30:	42b3      	cmp	r3, r6
 8002e32:	d2f4      	bcs.n	8002e1e <STMotorPWMPulseInterruptHandle+0x3a>
			}else if(relStep >= STMotorHandle->motorParam.endAccel){
 8002e34:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d301      	bcc.n	8002e3e <STMotorPWMPulseInterruptHandle+0x5a>
				STMotorHandle->motorParam.state = STATE_STAND;
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	e7f5      	b.n	8002e2a <STMotorPWMPulseInterruptHandle+0x46>
				STMotorHandle->motorParam.accu += accel / speed;
 8002e3e:	6c02      	ldr	r2, [r0, #64]	; 0x40
					speed = 1;
 8002e40:	2900      	cmp	r1, #0
 8002e42:	bf08      	it	eq
 8002e44:	2101      	moveq	r1, #1
	uint32_t accel = STMotorHandle->motorParam.accel << 16;
 8002e46:	0423      	lsls	r3, r4, #16
				STMotorHandle->motorParam.accu += accel / speed;
 8002e48:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e4c:	4413      	add	r3, r2
 8002e4e:	6403      	str	r3, [r0, #64]	; 0x40
	bool speedUpdated = FALSE;
 8002e50:	2300      	movs	r3, #0
				while (STMotorHandle->motorParam.accu >= (0X10000L))
 8002e52:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002e54:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002e58:	d209      	bcs.n	8002e6e <STMotorPWMPulseInterruptHandle+0x8a>
				if(speedUpdated == TRUE){
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d0e6      	beq.n	8002e2c <STMotorPWMPulseInterruptHandle+0x48>
					if(speed > STMotorHandle->motorParam.maxSpeed)
 8002e5e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002e60:	4299      	cmp	r1, r3
 8002e62:	d900      	bls.n	8002e66 <STMotorPWMPulseInterruptHandle+0x82>
						speed = STMotorHandle->motorParam.maxSpeed;
 8002e64:	6b01      	ldr	r1, [r0, #48]	; 0x30
					STMotorHandle->motorParam.curSpeed = speed;
 8002e66:	62c1      	str	r1, [r0, #44]	; 0x2c
					STMotorSetFreq(STMotorHandle,speed);
 8002e68:	f7ff fefa 	bl	8002c60 <STMotorSetFreq>
 8002e6c:	e7de      	b.n	8002e2c <STMotorPWMPulseInterruptHandle+0x48>
					STMotorHandle->motorParam.accu -= (0X10000L);
 8002e6e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002e70:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8002e74:	6403      	str	r3, [r0, #64]	; 0x40
					speed += 1;
 8002e76:	3101      	adds	r1, #1
					speedUpdated = TRUE;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e7ea      	b.n	8002e52 <STMotorPWMPulseInterruptHandle+0x6e>
			if( relStep >= STMotorHandle->motorParam.startDecel){
 8002e7c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d302      	bcc.n	8002e88 <STMotorPWMPulseInterruptHandle+0xa4>
				STMotorHandle->motorParam.accu = 0;
 8002e82:	2300      	movs	r3, #0
 8002e84:	6403      	str	r3, [r0, #64]	; 0x40
 8002e86:	e7cf      	b.n	8002e28 <STMotorPWMPulseInterruptHandle+0x44>
			}else if(relStep <= STMotorHandle->motorParam.endAccel){
 8002e88:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d8ce      	bhi.n	8002e2c <STMotorPWMPulseInterruptHandle+0x48>
				STMotorHandle->motorParam.accu = 0;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	6403      	str	r3, [r0, #64]	; 0x40
 8002e92:	e7ca      	b.n	8002e2a <STMotorPWMPulseInterruptHandle+0x46>
			if(relStep >= targetStep || speed <= STMotorHandle->motorParam.minSpeed){
 8002e94:	42b3      	cmp	r3, r6
 8002e96:	d2c2      	bcs.n	8002e1e <STMotorPWMPulseInterruptHandle+0x3a>
 8002e98:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002e9a:	42a1      	cmp	r1, r4
 8002e9c:	d9bf      	bls.n	8002e1e <STMotorPWMPulseInterruptHandle+0x3a>
			}else if(relStep <= STMotorHandle->motorParam.startDecel){
 8002e9e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002ea0:	42a3      	cmp	r3, r4
 8002ea2:	d9ca      	bls.n	8002e3a <STMotorPWMPulseInterruptHandle+0x56>
			}else if(STMotorHandle->motorParam.state == STATE_HARDSTOP){
 8002ea4:	7d43      	ldrb	r3, [r0, #21]
 8002ea6:	2b05      	cmp	r3, #5
 8002ea8:	d0b9      	beq.n	8002e1e <STMotorPWMPulseInterruptHandle+0x3a>
				STMotorHandle->motorParam.accu += decel / speed;
 8002eaa:	6c04      	ldr	r4, [r0, #64]	; 0x40
		        if (speed == 0) speed =1;
 8002eac:	2900      	cmp	r1, #0
 8002eae:	bf08      	it	eq
 8002eb0:	2101      	moveq	r1, #1
	uint32_t decel = STMotorHandle->motorParam.decel << 16;
 8002eb2:	0413      	lsls	r3, r2, #16
				STMotorHandle->motorParam.accu += decel / speed;
 8002eb4:	fbb3 f3f1 	udiv	r3, r3, r1
 8002eb8:	4423      	add	r3, r4
 8002eba:	6403      	str	r3, [r0, #64]	; 0x40
				bool speedUpdated = FALSE;
 8002ebc:	2300      	movs	r3, #0
				while (STMotorHandle->motorParam.accu >= (0X10000L))
 8002ebe:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002ec0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002ec4:	d206      	bcs.n	8002ed4 <STMotorPWMPulseInterruptHandle+0xf0>
				if(speedUpdated == TRUE){
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d0b0      	beq.n	8002e2c <STMotorPWMPulseInterruptHandle+0x48>
					if(speed < STMotorHandle->motorParam.minSpeed)
 8002eca:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002ecc:	4299      	cmp	r1, r3
						speed = STMotorHandle->motorParam.minSpeed;
 8002ece:	bf38      	it	cc
 8002ed0:	6b41      	ldrcc	r1, [r0, #52]	; 0x34
 8002ed2:	e7c8      	b.n	8002e66 <STMotorPWMPulseInterruptHandle+0x82>
					STMotorHandle->motorParam.accu -= (0X10000L);
 8002ed4:	6c03      	ldr	r3, [r0, #64]	; 0x40
					if (speed > 1){
 8002ed6:	2901      	cmp	r1, #1
					STMotorHandle->motorParam.accu -= (0X10000L);
 8002ed8:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8002edc:	6403      	str	r3, [r0, #64]	; 0x40
						speed -=1;
 8002ede:	bf8c      	ite	hi
 8002ee0:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8002ee4:	2101      	movls	r1, #1
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e7e9      	b.n	8002ebe <STMotorPWMPulseInterruptHandle+0xda>
			STMotorHandle->motorParam.curPosition += (STMotorHandle->motorParam.nStep * (STMotorHandle->motorParam.direction) ? 1 : -1);
 8002eea:	69c2      	ldr	r2, [r0, #28]
 8002eec:	7d03      	ldrb	r3, [r0, #20]
 8002eee:	435a      	muls	r2, r3
 8002ef0:	6982      	ldr	r2, [r0, #24]
 8002ef2:	bf14      	ite	ne
 8002ef4:	2301      	movne	r3, #1
 8002ef6:	f04f 33ff 	moveq.w	r3, #4294967295
 8002efa:	4413      	add	r3, r2
 8002efc:	6183      	str	r3, [r0, #24]
			STMotorHandle->motorParam.nStep = 0;
 8002efe:	2300      	movs	r3, #0
 8002f00:	61c3      	str	r3, [r0, #28]
			STMotorHandle->motorParam.targetStep = 0;
 8002f02:	6203      	str	r3, [r0, #32]
			STMotorHandle->motorHandler.isActivate = FALSE;
 8002f04:	7383      	strb	r3, [r0, #14]
			STMotorHandle->motorParam.state = STATE_STOP;
 8002f06:	2303      	movs	r3, #3
 8002f08:	7543      	strb	r3, [r0, #21]
			STMotorStopFreq(STMotorHandle);
 8002f0a:	f7ff fec7 	bl	8002c9c <STMotorStopFreq>
			break;
 8002f0e:	e78d      	b.n	8002e2c <STMotorPWMPulseInterruptHandle+0x48>

08002f10 <STMotorEXTInterruptHandle>:

uint32_t STMotorEXTInterruptHandle(STMotorHandle_t* STMotorHandle){
 8002f10:	b510      	push	{r4, lr}
 8002f12:	4604      	mov	r4, r0
	HAL_NVIC_DisableIRQ(STMotorHandle->motorHandler.IRQn);
 8002f14:	7b40      	ldrb	r0, [r0, #13]
 8002f16:	b240      	sxtb	r0, r0
 8002f18:	f7fd ff8a 	bl	8000e30 <HAL_NVIC_DisableIRQ>
	return STMotorHandle->motorParam.state = STATE_HARDSTOP;
 8002f1c:	2305      	movs	r3, #5
	STMotorHandle->motorParam.curPosition = 0;
 8002f1e:	2000      	movs	r0, #0
	return STMotorHandle->motorParam.state = STATE_HARDSTOP;
 8002f20:	7563      	strb	r3, [r4, #21]
	STMotorHandle->motorParam.curPosition = 0;
 8002f22:	61a0      	str	r0, [r4, #24]
	STMotorHardStop(STMotorHandle);
	STMotorSetHome(STMotorHandle);
	return 0;
}
 8002f24:	bd10      	pop	{r4, pc}
	...

08002f28 <SetDirectionGPIO>:
	NULL,
	FinishCallBack
};

void SetDirectionGPIO(STMotorHandle_t *STMotorHandle, MotorDirection_t direction){
	switch(STMotorHandle->motorHandler.deviceNumber){
 8002f28:	7803      	ldrb	r3, [r0, #0]
 8002f2a:	b93b      	cbnz	r3, 8002f3c <SetDirectionGPIO+0x14>
		case 0x00:
			HAL_GPIO_WritePin(MOTOR_1_DIR_GPIOX,MOTOR_1_DIR_PINX,direction ? (GPIO_PIN_SET) : (GPIO_PIN_RESET));
 8002f2c:	1c0a      	adds	r2, r1, #0
 8002f2e:	bf18      	it	ne
 8002f30:	2201      	movne	r2, #1
 8002f32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f36:	4802      	ldr	r0, [pc, #8]	; (8002f40 <SetDirectionGPIO+0x18>)
 8002f38:	f7fe b9f8 	b.w	800132c <HAL_GPIO_WritePin>
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	40020400 	.word	0x40020400

08002f44 <SetEnableGPIO>:
			break;
	}
}

void SetEnableGPIO(STMotorHandle_t *STMotorHandle, bool flag){
	switch(STMotorHandle->motorHandler.deviceNumber){
 8002f44:	7803      	ldrb	r3, [r0, #0]
 8002f46:	b93b      	cbnz	r3, 8002f58 <SetEnableGPIO+0x14>
		case 0x00:
			HAL_GPIO_WritePin(MOTOR_1_ENABLE_GPIOX,MOTOR_1_ENABLE_PINX,flag ? (GPIO_PIN_RESET) : (GPIO_PIN_SET));
 8002f48:	fab1 f281 	clz	r2, r1
 8002f4c:	0952      	lsrs	r2, r2, #5
 8002f4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f52:	4802      	ldr	r0, [pc, #8]	; (8002f5c <SetEnableGPIO+0x18>)
 8002f54:	f7fe b9ea 	b.w	800132c <HAL_GPIO_WritePin>
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	40020800 	.word	0x40020800

08002f60 <FinishCallBack>:
}


void FinishCallBack(STMotorHandle_t *STMotorHandle){

	switch(STMotorHandle->motorHandler.deviceNumber){
 8002f60:	7803      	ldrb	r3, [r0, #0]
 8002f62:	2b03      	cmp	r3, #3
 8002f64:	d811      	bhi.n	8002f8a <FinishCallBack+0x2a>
 8002f66:	e8df f003 	tbb	[pc, r3]
 8002f6a:	0702      	.short	0x0702
 8002f6c:	0d0a      	.short	0x0d0a
		case 0x00:
			HAL_UART_Transmit_IT(&huart2,(uint8_t*)"MOVE OK A",9);
 8002f6e:	4907      	ldr	r1, [pc, #28]	; (8002f8c <FinishCallBack+0x2c>)
 8002f70:	2209      	movs	r2, #9
			break;
		case 0x02:
			HAL_UART_Transmit_IT(&huart2,(uint8_t*)"MOVE OK C",9);
			break;
		case 0x03:
			HAL_UART_Transmit_IT(&huart2,(uint8_t*)"MOVE OK P",9);
 8002f72:	4807      	ldr	r0, [pc, #28]	; (8002f90 <FinishCallBack+0x30>)
 8002f74:	f7ff b96f 	b.w	8002256 <HAL_UART_Transmit_IT>
			HAL_UART_Transmit_IT(&huart2,(uint8_t*)"MOVE OK B",9);
 8002f78:	2209      	movs	r2, #9
 8002f7a:	4906      	ldr	r1, [pc, #24]	; (8002f94 <FinishCallBack+0x34>)
 8002f7c:	e7f9      	b.n	8002f72 <FinishCallBack+0x12>
			HAL_UART_Transmit_IT(&huart2,(uint8_t*)"MOVE OK C",9);
 8002f7e:	2209      	movs	r2, #9
 8002f80:	4905      	ldr	r1, [pc, #20]	; (8002f98 <FinishCallBack+0x38>)
 8002f82:	e7f6      	b.n	8002f72 <FinishCallBack+0x12>
			HAL_UART_Transmit_IT(&huart2,(uint8_t*)"MOVE OK P",9);
 8002f84:	2209      	movs	r2, #9
 8002f86:	4905      	ldr	r1, [pc, #20]	; (8002f9c <FinishCallBack+0x3c>)
 8002f88:	e7f3      	b.n	8002f72 <FinishCallBack+0x12>
 8002f8a:	4770      	bx	lr
 8002f8c:	080037a2 	.word	0x080037a2
 8002f90:	2000070c 	.word	0x2000070c
 8002f94:	080037ac 	.word	0x080037ac
 8002f98:	080037b6 	.word	0x080037b6
 8002f9c:	080037c0 	.word	0x080037c0

08002fa0 <PWMPulseInterruptHandle>:
	return;
}


void PWMPulseInterruptHandle(TIM_HandleTypeDef *htim){
	if(htim->Instance == STMotorDevices[0].motorHandler.instance){
 8002fa0:	4b04      	ldr	r3, [pc, #16]	; (8002fb4 <PWMPulseInterruptHandle+0x14>)
 8002fa2:	6801      	ldr	r1, [r0, #0]
 8002fa4:	689a      	ldr	r2, [r3, #8]
 8002fa6:	4291      	cmp	r1, r2
 8002fa8:	d102      	bne.n	8002fb0 <PWMPulseInterruptHandle+0x10>
		STMotorPWMPulseInterruptHandle(&STMotorDevices[0]);
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7ff bf1a 	b.w	8002de4 <STMotorPWMPulseInterruptHandle>
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	20000490 	.word	0x20000490

08002fb8 <EXTInterruptHandle>:
	}
}

void EXTInterruptHandle(void){

	if(__HAL_GPIO_EXTI_GET_FLAG(MOTOR_1_ENDSTOP_PIN)){
 8002fb8:	4b03      	ldr	r3, [pc, #12]	; (8002fc8 <EXTInterruptHandle+0x10>)
 8002fba:	695b      	ldr	r3, [r3, #20]
 8002fbc:	07db      	lsls	r3, r3, #31
 8002fbe:	d502      	bpl.n	8002fc6 <EXTInterruptHandle+0xe>
		STMotorEXTInterruptHandle(&STMotorDevices[0]);
 8002fc0:	4802      	ldr	r0, [pc, #8]	; (8002fcc <EXTInterruptHandle+0x14>)
 8002fc2:	f7ff bfa5 	b.w	8002f10 <STMotorEXTInterruptHandle>
 8002fc6:	4770      	bx	lr
 8002fc8:	40013c00 	.word	0x40013c00
 8002fcc:	20000490 	.word	0x20000490

08002fd0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8002fd0:	b507      	push	{r0, r1, r2, lr}
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002fd2:	4b0b      	ldr	r3, [pc, #44]	; (8003000 <MX_DMA_Init+0x30>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	9201      	str	r2, [sp, #4]
 8002fd8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fda:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
 8002fde:	6319      	str	r1, [r3, #48]	; 0x30
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fe6:	9301      	str	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002fe8:	4611      	mov	r1, r2
 8002fea:	2010      	movs	r0, #16
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002fec:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002fee:	f7fd fedf 	bl	8000db0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002ff2:	2010      	movs	r0, #16
 8002ff4:	f7fd ff10 	bl	8000e18 <HAL_NVIC_EnableIRQ>

}
 8002ff8:	b003      	add	sp, #12
 8002ffa:	f85d fb04 	ldr.w	pc, [sp], #4
 8002ffe:	bf00      	nop
 8003000:	40023800 	.word	0x40023800

08003004 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003004:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003008:	2214      	movs	r2, #20
{
 800300a:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800300c:	eb0d 0002 	add.w	r0, sp, r2
 8003010:	2100      	movs	r1, #0
 8003012:	f000 fb91 	bl	8003738 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003016:	2400      	movs	r4, #0
 8003018:	4b3c      	ldr	r3, [pc, #240]	; (800310c <MX_GPIO_Init+0x108>)
 800301a:	9401      	str	r4, [sp, #4]
 800301c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, COOLER_SIGNAL_Pin|GPIO_PIN_5, GPIO_PIN_RESET);
 800301e:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8003118 <MX_GPIO_Init+0x114>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SERVO_EN_Pin|SERVO_RESET_Pin|MOTOR_DIR_1_Pin, GPIO_PIN_RESET);
 8003022:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 800311c <MX_GPIO_Init+0x118>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_EN_1_GPIO_Port, MOTOR_EN_1_Pin, GPIO_PIN_RESET);
 8003026:	4e3a      	ldr	r6, [pc, #232]	; (8003110 <MX_GPIO_Init+0x10c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003028:	f042 0204 	orr.w	r2, r2, #4
 800302c:	631a      	str	r2, [r3, #48]	; 0x30
 800302e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003030:	f002 0204 	and.w	r2, r2, #4
 8003034:	9201      	str	r2, [sp, #4]
 8003036:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003038:	9402      	str	r4, [sp, #8]
 800303a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800303c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003040:	631a      	str	r2, [r3, #48]	; 0x30
 8003042:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003044:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003048:	9202      	str	r2, [sp, #8]
 800304a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800304c:	9403      	str	r4, [sp, #12]
 800304e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003050:	f042 0201 	orr.w	r2, r2, #1
 8003054:	631a      	str	r2, [r3, #48]	; 0x30
 8003056:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003058:	f002 0201 	and.w	r2, r2, #1
 800305c:	9203      	str	r2, [sp, #12]
 800305e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003060:	9404      	str	r4, [sp, #16]
 8003062:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003064:	f042 0202 	orr.w	r2, r2, #2
 8003068:	631a      	str	r2, [r3, #48]	; 0x30
 800306a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, COOLER_SIGNAL_Pin|GPIO_PIN_5, GPIO_PIN_RESET);
 8003072:	4622      	mov	r2, r4
 8003074:	4648      	mov	r0, r9
 8003076:	2130      	movs	r1, #48	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003078:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, COOLER_SIGNAL_Pin|GPIO_PIN_5, GPIO_PIN_RESET);
 800307a:	f7fe f957 	bl	800132c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SERVO_EN_Pin|SERVO_RESET_Pin|MOTOR_DIR_1_Pin, GPIO_PIN_RESET);
 800307e:	4622      	mov	r2, r4
 8003080:	4640      	mov	r0, r8
 8003082:	f248 0103 	movw	r1, #32771	; 0x8003
 8003086:	f7fe f951 	bl	800132c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MOTOR_EN_1_GPIO_Port, MOTOR_EN_1_Pin, GPIO_PIN_RESET);
 800308a:	4622      	mov	r2, r4
 800308c:	4630      	mov	r0, r6
 800308e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003092:	f7fe f94b 	bl	800132c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MOTOR_ENDBTN_1_Pin|POWER_BTN_Pin;
 8003096:	2509      	movs	r5, #9
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003098:	4b1e      	ldr	r3, [pc, #120]	; (8003114 <MX_GPIO_Init+0x110>)
 800309a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800309c:	a905      	add	r1, sp, #20
 800309e:	4630      	mov	r0, r6

  /*Configure GPIO pins : PAPin PA5 */
  GPIO_InitStruct.Pin = COOLER_SIGNAL_Pin|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030a0:	2701      	movs	r7, #1
  GPIO_InitStruct.Pin = MOTOR_ENDBTN_1_Pin|POWER_BTN_Pin;
 80030a2:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a4:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030a6:	f7fe f885 	bl	80011b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = COOLER_SIGNAL_Pin|GPIO_PIN_5;
 80030aa:	2330      	movs	r3, #48	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030ac:	a905      	add	r1, sp, #20
 80030ae:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = COOLER_SIGNAL_Pin|GPIO_PIN_5;
 80030b0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030b2:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b4:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b6:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030b8:	f7fe f87c 	bl	80011b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SERVO_EN_Pin|SERVO_RESET_Pin|MOTOR_DIR_1_Pin;
 80030bc:	f248 0303 	movw	r3, #32771	; 0x8003
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030c0:	a905      	add	r1, sp, #20
 80030c2:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = SERVO_EN_Pin|SERVO_RESET_Pin|MOTOR_DIR_1_Pin;
 80030c4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030c6:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c8:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ca:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030cc:	f7fe f872 	bl	80011b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MOTOR_EN_1_Pin;
 80030d0:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(MOTOR_EN_1_GPIO_Port, &GPIO_InitStruct);
 80030d4:	a905      	add	r1, sp, #20
 80030d6:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = MOTOR_EN_1_Pin;
 80030d8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030da:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030dc:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030de:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(MOTOR_EN_1_GPIO_Port, &GPIO_InitStruct);
 80030e0:	f7fe f868 	bl	80011b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80030e4:	4622      	mov	r2, r4
 80030e6:	4621      	mov	r1, r4
 80030e8:	2006      	movs	r0, #6
 80030ea:	f7fd fe61 	bl	8000db0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80030ee:	2006      	movs	r0, #6
 80030f0:	f7fd fe92 	bl	8000e18 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80030f4:	4622      	mov	r2, r4
 80030f6:	4621      	mov	r1, r4
 80030f8:	4628      	mov	r0, r5
 80030fa:	f7fd fe59 	bl	8000db0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80030fe:	4628      	mov	r0, r5
 8003100:	f7fd fe8a 	bl	8000e18 <HAL_NVIC_EnableIRQ>

}
 8003104:	b00b      	add	sp, #44	; 0x2c
 8003106:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800310a:	bf00      	nop
 800310c:	40023800 	.word	0x40023800
 8003110:	40020800 	.word	0x40020800
 8003114:	10110000 	.word	0x10110000
 8003118:	40020000 	.word	0x40020000
 800311c:	40020400 	.word	0x40020400

08003120 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8003120:	b508      	push	{r3, lr}

  hi2c2.Instance = I2C2;
 8003122:	480c      	ldr	r0, [pc, #48]	; (8003154 <MX_I2C2_Init+0x34>)
  hi2c2.Init.ClockSpeed = 100000;
 8003124:	4b0c      	ldr	r3, [pc, #48]	; (8003158 <MX_I2C2_Init+0x38>)
 8003126:	f8df e034 	ldr.w	lr, [pc, #52]	; 800315c <MX_I2C2_Init+0x3c>
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800312a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c2.Init.ClockSpeed = 100000;
 800312e:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003132:	2300      	movs	r3, #0
 8003134:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003136:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003138:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800313a:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800313c:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800313e:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003140:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003142:	f7fe f909 	bl	8001358 <HAL_I2C_Init>
 8003146:	b118      	cbz	r0, 8003150 <MX_I2C2_Init+0x30>
  {
    Error_Handler();
  }

}
 8003148:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800314c:	f000 b8aa 	b.w	80032a4 <Error_Handler>
 8003150:	bd08      	pop	{r3, pc}
 8003152:	bf00      	nop
 8003154:	200005a0 	.word	0x200005a0
 8003158:	40005800 	.word	0x40005800
 800315c:	000186a0 	.word	0x000186a0

08003160 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003160:	b530      	push	{r4, r5, lr}
 8003162:	4604      	mov	r4, r0
 8003164:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003166:	2214      	movs	r2, #20
 8003168:	2100      	movs	r1, #0
 800316a:	a803      	add	r0, sp, #12
 800316c:	f000 fae4 	bl	8003738 <memset>
  if(i2cHandle->Instance==I2C2)
 8003170:	6822      	ldr	r2, [r4, #0]
 8003172:	4b15      	ldr	r3, [pc, #84]	; (80031c8 <HAL_I2C_MspInit+0x68>)
 8003174:	429a      	cmp	r2, r3
 8003176:	d124      	bne.n	80031c2 <HAL_I2C_MspInit+0x62>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003178:	4c14      	ldr	r4, [pc, #80]	; (80031cc <HAL_I2C_MspInit+0x6c>)
    GPIO_InitStruct.Pin = SENSOR_SCL_Pin|SENSOR_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800317a:	4815      	ldr	r0, [pc, #84]	; (80031d0 <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800317c:	2500      	movs	r5, #0
 800317e:	9501      	str	r5, [sp, #4]
 8003180:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003182:	f043 0302 	orr.w	r3, r3, #2
 8003186:	6323      	str	r3, [r4, #48]	; 0x30
 8003188:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	9301      	str	r3, [sp, #4]
 8003190:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = SENSOR_SCL_Pin|SENSOR_SDA_Pin;
 8003192:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003196:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003198:	2312      	movs	r3, #18
 800319a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800319c:	2301      	movs	r3, #1
 800319e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031a0:	2303      	movs	r3, #3
 80031a2:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031a4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80031a6:	2304      	movs	r3, #4
 80031a8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031aa:	f7fe f803 	bl	80011b4 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80031ae:	9502      	str	r5, [sp, #8]
 80031b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80031b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80031b6:	6423      	str	r3, [r4, #64]	; 0x40
 80031b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80031ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031be:	9302      	str	r3, [sp, #8]
 80031c0:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80031c2:	b009      	add	sp, #36	; 0x24
 80031c4:	bd30      	pop	{r4, r5, pc}
 80031c6:	bf00      	nop
 80031c8:	40005800 	.word	0x40005800
 80031cc:	40023800 	.word	0x40023800
 80031d0:	40020400 	.word	0x40020400

080031d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80031d4:	b530      	push	{r4, r5, lr}
 80031d6:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031d8:	2234      	movs	r2, #52	; 0x34
 80031da:	2100      	movs	r1, #0
 80031dc:	a807      	add	r0, sp, #28
 80031de:	f000 faab 	bl	8003738 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80031e2:	2100      	movs	r1, #0
 80031e4:	2214      	movs	r2, #20
 80031e6:	a802      	add	r0, sp, #8
 80031e8:	f000 faa6 	bl	8003738 <memset>

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80031ec:	2500      	movs	r5, #0
 80031ee:	4b1b      	ldr	r3, [pc, #108]	; (800325c <SystemClock_Config+0x88>)
 80031f0:	9500      	str	r5, [sp, #0]
 80031f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031f4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80031f8:	641a      	str	r2, [r3, #64]	; 0x40
 80031fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003200:	9300      	str	r3, [sp, #0]
 8003202:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003204:	4b16      	ldr	r3, [pc, #88]	; (8003260 <SystemClock_Config+0x8c>)
 8003206:	9501      	str	r5, [sp, #4]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800320e:	601a      	str	r2, [r3, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003212:	950e      	str	r5, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003214:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003218:	9301      	str	r3, [sp, #4]
 800321a:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800321c:	2301      	movs	r3, #1
 800321e:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003220:	2310      	movs	r3, #16
 8003222:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8003224:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003226:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800322a:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 336;
 800322c:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800322e:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003230:	2304      	movs	r3, #4
 8003232:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003234:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003236:	9407      	str	r4, [sp, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003238:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = 2;
 800323a:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800323c:	f7fe f9e2 	bl	8001604 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003240:	230f      	movs	r3, #15
 8003242:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003244:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003246:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800324a:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800324c:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800324e:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003250:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003252:	9506      	str	r5, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003254:	f7fe f91c 	bl	8001490 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8003258:	b015      	add	sp, #84	; 0x54
 800325a:	bd30      	pop	{r4, r5, pc}
 800325c:	40023800 	.word	0x40023800
 8003260:	40007000 	.word	0x40007000

08003264 <main>:
{
 8003264:	b508      	push	{r3, lr}
  HAL_Init();
 8003266:	f7fd fd65 	bl	8000d34 <HAL_Init>
  SystemClock_Config();
 800326a:	f7ff ffb3 	bl	80031d4 <SystemClock_Config>
  MX_GPIO_Init();
 800326e:	f7ff fec9 	bl	8003004 <MX_GPIO_Init>
  MX_DMA_Init();
 8003272:	f7ff fead 	bl	8002fd0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8003276:	f000 f96b 	bl	8003550 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800327a:	f000 f94d 	bl	8003518 <MX_USART1_UART_Init>
  MX_TIM5_Init();
 800327e:	f000 f915 	bl	80034ac <MX_TIM5_Init>
  MX_TIM6_Init();
 8003282:	f000 f88b 	bl	800339c <MX_TIM6_Init>
  MX_I2C2_Init();
 8003286:	f7ff ff4b 	bl	8003120 <MX_I2C2_Init>
  startHGCode(&htim6,&huart2,&hdma_usart2_rx);
 800328a:	4a03      	ldr	r2, [pc, #12]	; (8003298 <main+0x34>)
 800328c:	4903      	ldr	r1, [pc, #12]	; (800329c <main+0x38>)
 800328e:	4804      	ldr	r0, [pc, #16]	; (80032a0 <main+0x3c>)
 8003290:	f7ff fa0e 	bl	80026b0 <startHGCode>
 8003294:	e7fe      	b.n	8003294 <main+0x30>
 8003296:	bf00      	nop
 8003298:	2000066c 	.word	0x2000066c
 800329c:	2000070c 	.word	0x2000070c
 80032a0:	20000630 	.word	0x20000630

080032a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032a4:	4770      	bx	lr
	...

080032a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032a8:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032aa:	4b0e      	ldr	r3, [pc, #56]	; (80032e4 <HAL_MspInit+0x3c>)
 80032ac:	2100      	movs	r1, #0
 80032ae:	9100      	str	r1, [sp, #0]
 80032b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032b6:	645a      	str	r2, [r3, #68]	; 0x44
 80032b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032ba:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80032be:	9200      	str	r2, [sp, #0]
 80032c0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032c2:	9101      	str	r1, [sp, #4]
 80032c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032c6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80032ca:	641a      	str	r2, [r3, #64]	; 0x40
 80032cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d2:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80032d4:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 80032d6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80032d8:	f7fd fd58 	bl	8000d8c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032dc:	b003      	add	sp, #12
 80032de:	f85d fb04 	ldr.w	pc, [sp], #4
 80032e2:	bf00      	nop
 80032e4:	40023800 	.word	0x40023800

080032e8 <HAL_TIM_PWM_PulseFinishedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
	PWMPulseInterruptHandle(htim);
 80032e8:	f7ff be5a 	b.w	8002fa0 <PWMPulseInterruptHandle>

080032ec <NMI_Handler>:
 80032ec:	4770      	bx	lr

080032ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032ee:	e7fe      	b.n	80032ee <HardFault_Handler>

080032f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032f0:	e7fe      	b.n	80032f0 <MemManage_Handler>

080032f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032f2:	e7fe      	b.n	80032f2 <BusFault_Handler>

080032f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032f4:	e7fe      	b.n	80032f4 <UsageFault_Handler>

080032f6 <SVC_Handler>:
 80032f6:	4770      	bx	lr

080032f8 <DebugMon_Handler>:
 80032f8:	4770      	bx	lr

080032fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032fa:	4770      	bx	lr

080032fc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032fc:	f7fd bd34 	b.w	8000d68 <HAL_IncTick>

08003300 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003300:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	EXTInterruptHandle();
 8003302:	f7ff fe59 	bl	8002fb8 <EXTInterruptHandle>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003306:	2001      	movs	r0, #1
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003308:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800330c:	f7fe b818 	b.w	8001340 <HAL_GPIO_EXTI_IRQHandler>

08003310 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8003310:	2008      	movs	r0, #8
 8003312:	f7fe b815 	b.w	8001340 <HAL_GPIO_EXTI_IRQHandler>
	...

08003318 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003318:	4801      	ldr	r0, [pc, #4]	; (8003320 <DMA1_Stream5_IRQHandler+0x8>)
 800331a:	f7fd be91 	b.w	8001040 <HAL_DMA_IRQHandler>
 800331e:	bf00      	nop
 8003320:	2000066c 	.word	0x2000066c

08003324 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003324:	4801      	ldr	r0, [pc, #4]	; (800332c <USART2_IRQHandler+0x8>)
 8003326:	f7ff b883 	b.w	8002430 <HAL_UART_IRQHandler>
 800332a:	bf00      	nop
 800332c:	2000070c 	.word	0x2000070c

08003330 <TIM5_IRQHandler>:
void TIM5_IRQHandler(void)
{
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003330:	4801      	ldr	r0, [pc, #4]	; (8003338 <TIM5_IRQHandler+0x8>)
 8003332:	f7fe bb6e 	b.w	8001a12 <HAL_TIM_IRQHandler>
 8003336:	bf00      	nop
 8003338:	200005f4 	.word	0x200005f4

0800333c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC channel underrun error interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 800333c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	DecodeTimerInterruptHandler();
 800333e:	f7ff fc31 	bl	8002ba4 <DecodeTimerInterruptHandler>
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003342:	4802      	ldr	r0, [pc, #8]	; (800334c <TIM6_DAC_IRQHandler+0x10>)
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003344:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim6);
 8003348:	f7fe bb63 	b.w	8001a12 <HAL_TIM_IRQHandler>
 800334c:	20000630 	.word	0x20000630

08003350 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003350:	490f      	ldr	r1, [pc, #60]	; (8003390 <SystemInit+0x40>)
 8003352:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003356:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800335a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800335e:	4b0d      	ldr	r3, [pc, #52]	; (8003394 <SystemInit+0x44>)
 8003360:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003362:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8003364:	f042 0201 	orr.w	r2, r2, #1
 8003368:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800336a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003372:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003376:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003378:	4a07      	ldr	r2, [pc, #28]	; (8003398 <SystemInit+0x48>)
 800337a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003382:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003384:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003386:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800338a:	608b      	str	r3, [r1, #8]
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	e000ed00 	.word	0xe000ed00
 8003394:	40023800 	.word	0x40023800
 8003398:	24003010 	.word	0x24003010

0800339c <MX_TIM6_Init>:
  HAL_TIM_MspPostInit(&htim5);

}
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800339c:	b513      	push	{r0, r1, r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim6.Instance = TIM6;
  htim6.Init.Prescaler = 4800 - 1;
 800339e:	4a0e      	ldr	r2, [pc, #56]	; (80033d8 <MX_TIM6_Init+0x3c>)
  htim6.Instance = TIM6;
 80033a0:	480e      	ldr	r0, [pc, #56]	; (80033dc <MX_TIM6_Init+0x40>)
  htim6.Init.Prescaler = 4800 - 1;
 80033a2:	f241 23bf 	movw	r3, #4799	; 0x12bf
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033a6:	2400      	movs	r4, #0
  htim6.Init.Prescaler = 4800 - 1;
 80033a8:	e880 000c 	stmia.w	r0, {r2, r3}
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.Period = 100 - 1 ;
 80033ac:	2363      	movs	r3, #99	; 0x63
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033ae:	9400      	str	r4, [sp, #0]
 80033b0:	9401      	str	r4, [sp, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033b2:	6084      	str	r4, [r0, #8]
  htim6.Init.Period = 100 - 1 ;
 80033b4:	60c3      	str	r3, [r0, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80033b6:	f7fe fc01 	bl	8001bbc <HAL_TIM_Base_Init>
 80033ba:	b108      	cbz	r0, 80033c0 <MX_TIM6_Init+0x24>
  {
    Error_Handler();
 80033bc:	f7ff ff72 	bl	80032a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80033c0:	4669      	mov	r1, sp
 80033c2:	4806      	ldr	r0, [pc, #24]	; (80033dc <MX_TIM6_Init+0x40>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033c4:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033c6:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80033c8:	f7fe fd46 	bl	8001e58 <HAL_TIMEx_MasterConfigSynchronization>
 80033cc:	b108      	cbz	r0, 80033d2 <MX_TIM6_Init+0x36>
  {
    Error_Handler();
 80033ce:	f7ff ff69 	bl	80032a4 <Error_Handler>
  }

}
 80033d2:	b002      	add	sp, #8
 80033d4:	bd10      	pop	{r4, pc}
 80033d6:	bf00      	nop
 80033d8:	40001000 	.word	0x40001000
 80033dc:	20000630 	.word	0x20000630

080033e0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80033e0:	b507      	push	{r0, r1, r2, lr}

  if(tim_pwmHandle->Instance==TIM5)
 80033e2:	4b0d      	ldr	r3, [pc, #52]	; (8003418 <HAL_TIM_PWM_MspInit+0x38>)
 80033e4:	6802      	ldr	r2, [r0, #0]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d113      	bne.n	8003412 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80033ea:	2200      	movs	r2, #0
 80033ec:	f503 330b 	add.w	r3, r3, #142336	; 0x22c00
 80033f0:	9201      	str	r2, [sp, #4]
 80033f2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80033f4:	f041 0108 	orr.w	r1, r1, #8
 80033f8:	6419      	str	r1, [r3, #64]	; 0x40
 80033fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fc:	f003 0308 	and.w	r3, r3, #8
 8003400:	9301      	str	r3, [sp, #4]

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003402:	2032      	movs	r0, #50	; 0x32
 8003404:	4611      	mov	r1, r2
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003406:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003408:	f7fd fcd2 	bl	8000db0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800340c:	2032      	movs	r0, #50	; 0x32
 800340e:	f7fd fd03 	bl	8000e18 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8003412:	b003      	add	sp, #12
 8003414:	f85d fb04 	ldr.w	pc, [sp], #4
 8003418:	40000c00 	.word	0x40000c00

0800341c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800341c:	b507      	push	{r0, r1, r2, lr}

  if(tim_baseHandle->Instance==TIM6)
 800341e:	4b0d      	ldr	r3, [pc, #52]	; (8003454 <HAL_TIM_Base_MspInit+0x38>)
 8003420:	6802      	ldr	r2, [r0, #0]
 8003422:	429a      	cmp	r2, r3
 8003424:	d113      	bne.n	800344e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003426:	2200      	movs	r2, #0
 8003428:	f503 330a 	add.w	r3, r3, #141312	; 0x22800
 800342c:	9201      	str	r2, [sp, #4]
 800342e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003430:	f041 0110 	orr.w	r1, r1, #16
 8003434:	6419      	str	r1, [r3, #64]	; 0x40
 8003436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003438:	f003 0310 	and.w	r3, r3, #16
 800343c:	9301      	str	r3, [sp, #4]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800343e:	2036      	movs	r0, #54	; 0x36
 8003440:	4611      	mov	r1, r2
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003442:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003444:	f7fd fcb4 	bl	8000db0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003448:	2036      	movs	r0, #54	; 0x36
 800344a:	f7fd fce5 	bl	8000e18 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800344e:	b003      	add	sp, #12
 8003450:	f85d fb04 	ldr.w	pc, [sp], #4
 8003454:	40001000 	.word	0x40001000

08003458 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003458:	b510      	push	{r4, lr}
 800345a:	4604      	mov	r4, r0
 800345c:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800345e:	2214      	movs	r2, #20
 8003460:	2100      	movs	r1, #0
 8003462:	a801      	add	r0, sp, #4
 8003464:	f000 f968 	bl	8003738 <memset>
  if(timHandle->Instance==TIM5)
 8003468:	6822      	ldr	r2, [r4, #0]
 800346a:	4b0d      	ldr	r3, [pc, #52]	; (80034a0 <HAL_TIM_MspPostInit+0x48>)
 800346c:	429a      	cmp	r2, r3
 800346e:	d114      	bne.n	800349a <HAL_TIM_MspPostInit+0x42>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003470:	2300      	movs	r3, #0
 8003472:	9300      	str	r3, [sp, #0]
 8003474:	4b0b      	ldr	r3, [pc, #44]	; (80034a4 <HAL_TIM_MspPostInit+0x4c>)
    GPIO_InitStruct.Pin = MOTOR_STEP_1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
    HAL_GPIO_Init(MOTOR_STEP_1_GPIO_Port, &GPIO_InitStruct);
 8003476:	480c      	ldr	r0, [pc, #48]	; (80034a8 <HAL_TIM_MspPostInit+0x50>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003478:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800347a:	f042 0201 	orr.w	r2, r2, #1
 800347e:	631a      	str	r2, [r3, #48]	; 0x30
 8003480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	9300      	str	r3, [sp, #0]
 8003488:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = MOTOR_STEP_1_Pin;
 800348a:	2301      	movs	r3, #1
 800348c:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(MOTOR_STEP_1_GPIO_Port, &GPIO_InitStruct);
 800348e:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003490:	2302      	movs	r3, #2
 8003492:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003494:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(MOTOR_STEP_1_GPIO_Port, &GPIO_InitStruct);
 8003496:	f7fd fe8d 	bl	80011b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800349a:	b006      	add	sp, #24
 800349c:	bd10      	pop	{r4, pc}
 800349e:	bf00      	nop
 80034a0:	40000c00 	.word	0x40000c00
 80034a4:	40023800 	.word	0x40023800
 80034a8:	40020000 	.word	0x40020000

080034ac <MX_TIM5_Init>:
{
 80034ac:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034ae:	2400      	movs	r4, #0
{
 80034b0:	b08a      	sub	sp, #40	; 0x28
  TIM_OC_InitTypeDef sConfigOC = {0};
 80034b2:	221c      	movs	r2, #28
 80034b4:	4621      	mov	r1, r4
 80034b6:	a803      	add	r0, sp, #12
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034b8:	9401      	str	r4, [sp, #4]
 80034ba:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80034bc:	f000 f93c 	bl	8003738 <memset>
  htim5.Instance = TIM5;
 80034c0:	4813      	ldr	r0, [pc, #76]	; (8003510 <MX_TIM5_Init+0x64>)
 80034c2:	4b14      	ldr	r3, [pc, #80]	; (8003514 <MX_TIM5_Init+0x68>)
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034c4:	6084      	str	r4, [r0, #8]
  htim5.Init.Prescaler = 0;
 80034c6:	e880 0018 	stmia.w	r0, {r3, r4}
  htim5.Init.Period = 0;
 80034ca:	60c4      	str	r4, [r0, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034cc:	6104      	str	r4, [r0, #16]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80034ce:	f7fe fb8f 	bl	8001bf0 <HAL_TIM_PWM_Init>
 80034d2:	b108      	cbz	r0, 80034d8 <MX_TIM5_Init+0x2c>
    Error_Handler();
 80034d4:	f7ff fee6 	bl	80032a4 <Error_Handler>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80034d8:	a901      	add	r1, sp, #4
 80034da:	480d      	ldr	r0, [pc, #52]	; (8003510 <MX_TIM5_Init+0x64>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034dc:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034de:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80034e0:	f7fe fcba 	bl	8001e58 <HAL_TIMEx_MasterConfigSynchronization>
 80034e4:	b108      	cbz	r0, 80034ea <MX_TIM5_Init+0x3e>
    Error_Handler();
 80034e6:	f7ff fedd 	bl	80032a4 <Error_Handler>
  sConfigOC.Pulse = 0;
 80034ea:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80034ec:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80034ee:	a903      	add	r1, sp, #12
 80034f0:	4807      	ldr	r0, [pc, #28]	; (8003510 <MX_TIM5_Init+0x64>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80034f2:	9303      	str	r3, [sp, #12]
  sConfigOC.Pulse = 0;
 80034f4:	9204      	str	r2, [sp, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80034f6:	9205      	str	r2, [sp, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80034f8:	9207      	str	r2, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80034fa:	f7fe fbbf 	bl	8001c7c <HAL_TIM_PWM_ConfigChannel>
 80034fe:	b108      	cbz	r0, 8003504 <MX_TIM5_Init+0x58>
    Error_Handler();
 8003500:	f7ff fed0 	bl	80032a4 <Error_Handler>
  HAL_TIM_MspPostInit(&htim5);
 8003504:	4802      	ldr	r0, [pc, #8]	; (8003510 <MX_TIM5_Init+0x64>)
 8003506:	f7ff ffa7 	bl	8003458 <HAL_TIM_MspPostInit>
}
 800350a:	b00a      	add	sp, #40	; 0x28
 800350c:	bd10      	pop	{r4, pc}
 800350e:	bf00      	nop
 8003510:	200005f4 	.word	0x200005f4
 8003514:	40000c00 	.word	0x40000c00

08003518 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003518:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 800351a:	480b      	ldr	r0, [pc, #44]	; (8003548 <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 115200;
 800351c:	4b0b      	ldr	r3, [pc, #44]	; (800354c <MX_USART1_UART_Init+0x34>)
 800351e:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8003522:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003526:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003528:	2300      	movs	r3, #0
 800352a:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800352c:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800352e:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003530:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003532:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003534:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003536:	f7fe fe03 	bl	8002140 <HAL_UART_Init>
 800353a:	b118      	cbz	r0, 8003544 <MX_USART1_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 800353c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003540:	f7ff beb0 	b.w	80032a4 <Error_Handler>
 8003544:	bd08      	pop	{r3, pc}
 8003546:	bf00      	nop
 8003548:	200006cc 	.word	0x200006cc
 800354c:	40011000 	.word	0x40011000

08003550 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003550:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 8003552:	480b      	ldr	r0, [pc, #44]	; (8003580 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 8003554:	4b0b      	ldr	r3, [pc, #44]	; (8003584 <MX_USART2_UART_Init+0x34>)
 8003556:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 800355a:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 800355e:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003560:	2300      	movs	r3, #0
 8003562:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003564:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003566:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003568:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800356a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800356c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800356e:	f7fe fde7 	bl	8002140 <HAL_UART_Init>
 8003572:	b118      	cbz	r0, 800357c <MX_USART2_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8003574:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003578:	f7ff be94 	b.w	80032a4 <Error_Handler>
 800357c:	bd08      	pop	{r3, pc}
 800357e:	bf00      	nop
 8003580:	2000070c 	.word	0x2000070c
 8003584:	40004400 	.word	0x40004400

08003588 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003588:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800358a:	2214      	movs	r2, #20
{
 800358c:	b08a      	sub	sp, #40	; 0x28
 800358e:	4606      	mov	r6, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003590:	2100      	movs	r1, #0
 8003592:	eb0d 0002 	add.w	r0, sp, r2
 8003596:	f000 f8cf 	bl	8003738 <memset>
  if(uartHandle->Instance==USART1)
 800359a:	6833      	ldr	r3, [r6, #0]
 800359c:	4a38      	ldr	r2, [pc, #224]	; (8003680 <HAL_UART_MspInit+0xf8>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d125      	bne.n	80035ee <HAL_UART_MspInit+0x66>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80035a2:	4b38      	ldr	r3, [pc, #224]	; (8003684 <HAL_UART_MspInit+0xfc>)
    GPIO_InitStruct.Pin = DEBUG_LOG_SERIAL_TX_Pin|DEBUG_LOG_SERIAL_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035a4:	4838      	ldr	r0, [pc, #224]	; (8003688 <HAL_UART_MspInit+0x100>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80035a6:	2100      	movs	r1, #0
 80035a8:	9101      	str	r1, [sp, #4]
 80035aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035ac:	f042 0210 	orr.w	r2, r2, #16
 80035b0:	645a      	str	r2, [r3, #68]	; 0x44
 80035b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035b4:	f002 0210 	and.w	r2, r2, #16
 80035b8:	9201      	str	r2, [sp, #4]
 80035ba:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035bc:	9102      	str	r1, [sp, #8]
 80035be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035c0:	f042 0202 	orr.w	r2, r2, #2
 80035c4:	631a      	str	r2, [r3, #48]	; 0x30
 80035c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	9302      	str	r3, [sp, #8]
 80035ce:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = DEBUG_LOG_SERIAL_TX_Pin|DEBUG_LOG_SERIAL_RX_Pin;
 80035d0:	23c0      	movs	r3, #192	; 0xc0
 80035d2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d4:	2302      	movs	r3, #2
 80035d6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035d8:	2301      	movs	r3, #1
 80035da:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035dc:	2303      	movs	r3, #3
 80035de:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035e0:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80035e2:	2307      	movs	r3, #7
 80035e4:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035e6:	f7fd fde5 	bl	80011b4 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80035ea:	b00a      	add	sp, #40	; 0x28
 80035ec:	bd70      	pop	{r4, r5, r6, pc}
  else if(uartHandle->Instance==USART2)
 80035ee:	4a27      	ldr	r2, [pc, #156]	; (800368c <HAL_UART_MspInit+0x104>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d1fa      	bne.n	80035ea <HAL_UART_MspInit+0x62>
    __HAL_RCC_USART2_CLK_ENABLE();
 80035f4:	2500      	movs	r5, #0
 80035f6:	4b23      	ldr	r3, [pc, #140]	; (8003684 <HAL_UART_MspInit+0xfc>)
 80035f8:	9503      	str	r5, [sp, #12]
 80035fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035fc:	4824      	ldr	r0, [pc, #144]	; (8003690 <HAL_UART_MspInit+0x108>)
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80035fe:	4c25      	ldr	r4, [pc, #148]	; (8003694 <HAL_UART_MspInit+0x10c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8003600:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003604:	641a      	str	r2, [r3, #64]	; 0x40
 8003606:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003608:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800360c:	9203      	str	r2, [sp, #12]
 800360e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003610:	9504      	str	r5, [sp, #16]
 8003612:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003614:	f042 0201 	orr.w	r2, r2, #1
 8003618:	631a      	str	r2, [r3, #48]	; 0x30
 800361a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361c:	f003 0301 	and.w	r3, r3, #1
 8003620:	9304      	str	r3, [sp, #16]
 8003622:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003624:	230c      	movs	r3, #12
 8003626:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003628:	2302      	movs	r3, #2
 800362a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800362c:	2301      	movs	r3, #1
 800362e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003630:	2303      	movs	r3, #3
 8003632:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003634:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003636:	2307      	movs	r3, #7
 8003638:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800363a:	f7fd fdbb 	bl	80011b4 <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800363e:	4a16      	ldr	r2, [pc, #88]	; (8003698 <HAL_UART_MspInit+0x110>)
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003640:	60a5      	str	r5, [r4, #8]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003642:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003646:	e884 000c 	stmia.w	r4, {r2, r3}
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800364a:	4620      	mov	r0, r4
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800364c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003650:	60e5      	str	r5, [r4, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003652:	6123      	str	r3, [r4, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003654:	6165      	str	r5, [r4, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003656:	61a5      	str	r5, [r4, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003658:	61e5      	str	r5, [r4, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800365a:	6225      	str	r5, [r4, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800365c:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800365e:	f7fd fc21 	bl	8000ea4 <HAL_DMA_Init>
 8003662:	b108      	cbz	r0, 8003668 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8003664:	f7ff fe1e 	bl	80032a4 <Error_Handler>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003668:	2200      	movs	r2, #0
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800366a:	6374      	str	r4, [r6, #52]	; 0x34
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800366c:	4611      	mov	r1, r2
 800366e:	2026      	movs	r0, #38	; 0x26
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8003670:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003672:	f7fd fb9d 	bl	8000db0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003676:	2026      	movs	r0, #38	; 0x26
 8003678:	f7fd fbce 	bl	8000e18 <HAL_NVIC_EnableIRQ>
}
 800367c:	e7b5      	b.n	80035ea <HAL_UART_MspInit+0x62>
 800367e:	bf00      	nop
 8003680:	40011000 	.word	0x40011000
 8003684:	40023800 	.word	0x40023800
 8003688:	40020400 	.word	0x40020400
 800368c:	40004400 	.word	0x40004400
 8003690:	40020000 	.word	0x40020000
 8003694:	2000066c 	.word	0x2000066c
 8003698:	40026088 	.word	0x40026088

0800369c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 800369c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80036d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80036a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80036a2:	e003      	b.n	80036ac <LoopCopyDataInit>

080036a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80036a4:	4b0c      	ldr	r3, [pc, #48]	; (80036d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80036a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80036a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80036aa:	3104      	adds	r1, #4

080036ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80036ac:	480b      	ldr	r0, [pc, #44]	; (80036dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80036ae:	4b0c      	ldr	r3, [pc, #48]	; (80036e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80036b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80036b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80036b4:	d3f6      	bcc.n	80036a4 <CopyDataInit>
  ldr  r2, =_sbss
 80036b6:	4a0b      	ldr	r2, [pc, #44]	; (80036e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80036b8:	e002      	b.n	80036c0 <LoopFillZerobss>

080036ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80036ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80036bc:	f842 3b04 	str.w	r3, [r2], #4

080036c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80036c0:	4b09      	ldr	r3, [pc, #36]	; (80036e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80036c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80036c4:	d3f9      	bcc.n	80036ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80036c6:	f7ff fe43 	bl	8003350 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80036ca:	f000 f811 	bl	80036f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036ce:	f7ff fdc9 	bl	8003264 <main>
  bx  lr    
 80036d2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80036d4:	20008000 	.word	0x20008000
  ldr  r3, =_sidata
 80036d8:	080037f4 	.word	0x080037f4
  ldr  r0, =_sdata
 80036dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80036e0:	20000028 	.word	0x20000028
  ldr  r2, =_sbss
 80036e4:	20000028 	.word	0x20000028
  ldr  r3, = _ebss
 80036e8:	2000074c 	.word	0x2000074c

080036ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036ec:	e7fe      	b.n	80036ec <ADC_IRQHandler>
	...

080036f0 <__libc_init_array>:
 80036f0:	b570      	push	{r4, r5, r6, lr}
 80036f2:	4e0d      	ldr	r6, [pc, #52]	; (8003728 <__libc_init_array+0x38>)
 80036f4:	4c0d      	ldr	r4, [pc, #52]	; (800372c <__libc_init_array+0x3c>)
 80036f6:	1ba4      	subs	r4, r4, r6
 80036f8:	10a4      	asrs	r4, r4, #2
 80036fa:	2500      	movs	r5, #0
 80036fc:	42a5      	cmp	r5, r4
 80036fe:	d109      	bne.n	8003714 <__libc_init_array+0x24>
 8003700:	4e0b      	ldr	r6, [pc, #44]	; (8003730 <__libc_init_array+0x40>)
 8003702:	4c0c      	ldr	r4, [pc, #48]	; (8003734 <__libc_init_array+0x44>)
 8003704:	f000 f820 	bl	8003748 <_init>
 8003708:	1ba4      	subs	r4, r4, r6
 800370a:	10a4      	asrs	r4, r4, #2
 800370c:	2500      	movs	r5, #0
 800370e:	42a5      	cmp	r5, r4
 8003710:	d105      	bne.n	800371e <__libc_init_array+0x2e>
 8003712:	bd70      	pop	{r4, r5, r6, pc}
 8003714:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003718:	4798      	blx	r3
 800371a:	3501      	adds	r5, #1
 800371c:	e7ee      	b.n	80036fc <__libc_init_array+0xc>
 800371e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003722:	4798      	blx	r3
 8003724:	3501      	adds	r5, #1
 8003726:	e7f2      	b.n	800370e <__libc_init_array+0x1e>
 8003728:	080037ec 	.word	0x080037ec
 800372c:	080037ec 	.word	0x080037ec
 8003730:	080037ec 	.word	0x080037ec
 8003734:	080037f0 	.word	0x080037f0

08003738 <memset>:
 8003738:	4402      	add	r2, r0
 800373a:	4603      	mov	r3, r0
 800373c:	4293      	cmp	r3, r2
 800373e:	d100      	bne.n	8003742 <memset+0xa>
 8003740:	4770      	bx	lr
 8003742:	f803 1b01 	strb.w	r1, [r3], #1
 8003746:	e7f9      	b.n	800373c <memset+0x4>

08003748 <_init>:
 8003748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800374a:	bf00      	nop
 800374c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800374e:	bc08      	pop	{r3}
 8003750:	469e      	mov	lr, r3
 8003752:	4770      	bx	lr

08003754 <_fini>:
 8003754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003756:	bf00      	nop
 8003758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800375a:	bc08      	pop	{r3}
 800375c:	469e      	mov	lr, r3
 800375e:	4770      	bx	lr
